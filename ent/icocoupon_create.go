// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/indikay/wallet-service/ent/icocoupon"
	"github.com/rs/xid"
)

// IcoCouponCreate is the builder for creating a IcoCoupon entity.
type IcoCouponCreate struct {
	config
	mutation *IcoCouponMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (icc *IcoCouponCreate) SetCreatedAt(t time.Time) *IcoCouponCreate {
	icc.mutation.SetCreatedAt(t)
	return icc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (icc *IcoCouponCreate) SetNillableCreatedAt(t *time.Time) *IcoCouponCreate {
	if t != nil {
		icc.SetCreatedAt(*t)
	}
	return icc
}

// SetUpdatedAt sets the "updated_at" field.
func (icc *IcoCouponCreate) SetUpdatedAt(t time.Time) *IcoCouponCreate {
	icc.mutation.SetUpdatedAt(t)
	return icc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (icc *IcoCouponCreate) SetNillableUpdatedAt(t *time.Time) *IcoCouponCreate {
	if t != nil {
		icc.SetUpdatedAt(*t)
	}
	return icc
}

// SetUserID sets the "user_id" field.
func (icc *IcoCouponCreate) SetUserID(s string) *IcoCouponCreate {
	icc.mutation.SetUserID(s)
	return icc
}

// SetCoupon sets the "coupon" field.
func (icc *IcoCouponCreate) SetCoupon(s string) *IcoCouponCreate {
	icc.mutation.SetCoupon(s)
	return icc
}

// SetReward sets the "reward" field.
func (icc *IcoCouponCreate) SetReward(s string) *IcoCouponCreate {
	icc.mutation.SetReward(s)
	return icc
}

// SetCashback sets the "cashback" field.
func (icc *IcoCouponCreate) SetCashback(s string) *IcoCouponCreate {
	icc.mutation.SetCashback(s)
	return icc
}

// SetDeletedAt sets the "deleted_at" field.
func (icc *IcoCouponCreate) SetDeletedAt(t time.Time) *IcoCouponCreate {
	icc.mutation.SetDeletedAt(t)
	return icc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (icc *IcoCouponCreate) SetNillableDeletedAt(t *time.Time) *IcoCouponCreate {
	if t != nil {
		icc.SetDeletedAt(*t)
	}
	return icc
}

// SetID sets the "id" field.
func (icc *IcoCouponCreate) SetID(x xid.ID) *IcoCouponCreate {
	icc.mutation.SetID(x)
	return icc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (icc *IcoCouponCreate) SetNillableID(x *xid.ID) *IcoCouponCreate {
	if x != nil {
		icc.SetID(*x)
	}
	return icc
}

// Mutation returns the IcoCouponMutation object of the builder.
func (icc *IcoCouponCreate) Mutation() *IcoCouponMutation {
	return icc.mutation
}

// Save creates the IcoCoupon in the database.
func (icc *IcoCouponCreate) Save(ctx context.Context) (*IcoCoupon, error) {
	icc.defaults()
	return withHooks(ctx, icc.sqlSave, icc.mutation, icc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (icc *IcoCouponCreate) SaveX(ctx context.Context) *IcoCoupon {
	v, err := icc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icc *IcoCouponCreate) Exec(ctx context.Context) error {
	_, err := icc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icc *IcoCouponCreate) ExecX(ctx context.Context) {
	if err := icc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (icc *IcoCouponCreate) defaults() {
	if _, ok := icc.mutation.CreatedAt(); !ok {
		v := icocoupon.DefaultCreatedAt()
		icc.mutation.SetCreatedAt(v)
	}
	if _, ok := icc.mutation.UpdatedAt(); !ok {
		v := icocoupon.DefaultUpdatedAt()
		icc.mutation.SetUpdatedAt(v)
	}
	if _, ok := icc.mutation.ID(); !ok {
		v := icocoupon.DefaultID()
		icc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (icc *IcoCouponCreate) check() error {
	if _, ok := icc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IcoCoupon.created_at"`)}
	}
	if _, ok := icc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "IcoCoupon.updated_at"`)}
	}
	if _, ok := icc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "IcoCoupon.user_id"`)}
	}
	if _, ok := icc.mutation.Coupon(); !ok {
		return &ValidationError{Name: "coupon", err: errors.New(`ent: missing required field "IcoCoupon.coupon"`)}
	}
	if _, ok := icc.mutation.Reward(); !ok {
		return &ValidationError{Name: "reward", err: errors.New(`ent: missing required field "IcoCoupon.reward"`)}
	}
	if _, ok := icc.mutation.Cashback(); !ok {
		return &ValidationError{Name: "cashback", err: errors.New(`ent: missing required field "IcoCoupon.cashback"`)}
	}
	return nil
}

func (icc *IcoCouponCreate) sqlSave(ctx context.Context) (*IcoCoupon, error) {
	if err := icc.check(); err != nil {
		return nil, err
	}
	_node, _spec := icc.createSpec()
	if err := sqlgraph.CreateNode(ctx, icc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	icc.mutation.id = &_node.ID
	icc.mutation.done = true
	return _node, nil
}

func (icc *IcoCouponCreate) createSpec() (*IcoCoupon, *sqlgraph.CreateSpec) {
	var (
		_node = &IcoCoupon{config: icc.config}
		_spec = sqlgraph.NewCreateSpec(icocoupon.Table, sqlgraph.NewFieldSpec(icocoupon.FieldID, field.TypeString))
	)
	_spec.OnConflict = icc.conflict
	if id, ok := icc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := icc.mutation.CreatedAt(); ok {
		_spec.SetField(icocoupon.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := icc.mutation.UpdatedAt(); ok {
		_spec.SetField(icocoupon.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := icc.mutation.UserID(); ok {
		_spec.SetField(icocoupon.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := icc.mutation.Coupon(); ok {
		_spec.SetField(icocoupon.FieldCoupon, field.TypeString, value)
		_node.Coupon = value
	}
	if value, ok := icc.mutation.Reward(); ok {
		_spec.SetField(icocoupon.FieldReward, field.TypeString, value)
		_node.Reward = value
	}
	if value, ok := icc.mutation.Cashback(); ok {
		_spec.SetField(icocoupon.FieldCashback, field.TypeString, value)
		_node.Cashback = value
	}
	if value, ok := icc.mutation.DeletedAt(); ok {
		_spec.SetField(icocoupon.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IcoCoupon.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IcoCouponUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (icc *IcoCouponCreate) OnConflict(opts ...sql.ConflictOption) *IcoCouponUpsertOne {
	icc.conflict = opts
	return &IcoCouponUpsertOne{
		create: icc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IcoCoupon.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icc *IcoCouponCreate) OnConflictColumns(columns ...string) *IcoCouponUpsertOne {
	icc.conflict = append(icc.conflict, sql.ConflictColumns(columns...))
	return &IcoCouponUpsertOne{
		create: icc,
	}
}

type (
	// IcoCouponUpsertOne is the builder for "upsert"-ing
	//  one IcoCoupon node.
	IcoCouponUpsertOne struct {
		create *IcoCouponCreate
	}

	// IcoCouponUpsert is the "OnConflict" setter.
	IcoCouponUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *IcoCouponUpsert) SetUpdatedAt(v time.Time) *IcoCouponUpsert {
	u.Set(icocoupon.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IcoCouponUpsert) UpdateUpdatedAt() *IcoCouponUpsert {
	u.SetExcluded(icocoupon.FieldUpdatedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *IcoCouponUpsert) SetUserID(v string) *IcoCouponUpsert {
	u.Set(icocoupon.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IcoCouponUpsert) UpdateUserID() *IcoCouponUpsert {
	u.SetExcluded(icocoupon.FieldUserID)
	return u
}

// SetCoupon sets the "coupon" field.
func (u *IcoCouponUpsert) SetCoupon(v string) *IcoCouponUpsert {
	u.Set(icocoupon.FieldCoupon, v)
	return u
}

// UpdateCoupon sets the "coupon" field to the value that was provided on create.
func (u *IcoCouponUpsert) UpdateCoupon() *IcoCouponUpsert {
	u.SetExcluded(icocoupon.FieldCoupon)
	return u
}

// SetReward sets the "reward" field.
func (u *IcoCouponUpsert) SetReward(v string) *IcoCouponUpsert {
	u.Set(icocoupon.FieldReward, v)
	return u
}

// UpdateReward sets the "reward" field to the value that was provided on create.
func (u *IcoCouponUpsert) UpdateReward() *IcoCouponUpsert {
	u.SetExcluded(icocoupon.FieldReward)
	return u
}

// SetCashback sets the "cashback" field.
func (u *IcoCouponUpsert) SetCashback(v string) *IcoCouponUpsert {
	u.Set(icocoupon.FieldCashback, v)
	return u
}

// UpdateCashback sets the "cashback" field to the value that was provided on create.
func (u *IcoCouponUpsert) UpdateCashback() *IcoCouponUpsert {
	u.SetExcluded(icocoupon.FieldCashback)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *IcoCouponUpsert) SetDeletedAt(v time.Time) *IcoCouponUpsert {
	u.Set(icocoupon.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *IcoCouponUpsert) UpdateDeletedAt() *IcoCouponUpsert {
	u.SetExcluded(icocoupon.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *IcoCouponUpsert) ClearDeletedAt() *IcoCouponUpsert {
	u.SetNull(icocoupon.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IcoCoupon.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(icocoupon.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IcoCouponUpsertOne) UpdateNewValues() *IcoCouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(icocoupon.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(icocoupon.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IcoCoupon.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IcoCouponUpsertOne) Ignore() *IcoCouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IcoCouponUpsertOne) DoNothing() *IcoCouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IcoCouponCreate.OnConflict
// documentation for more info.
func (u *IcoCouponUpsertOne) Update(set func(*IcoCouponUpsert)) *IcoCouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IcoCouponUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IcoCouponUpsertOne) SetUpdatedAt(v time.Time) *IcoCouponUpsertOne {
	return u.Update(func(s *IcoCouponUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IcoCouponUpsertOne) UpdateUpdatedAt() *IcoCouponUpsertOne {
	return u.Update(func(s *IcoCouponUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *IcoCouponUpsertOne) SetUserID(v string) *IcoCouponUpsertOne {
	return u.Update(func(s *IcoCouponUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IcoCouponUpsertOne) UpdateUserID() *IcoCouponUpsertOne {
	return u.Update(func(s *IcoCouponUpsert) {
		s.UpdateUserID()
	})
}

// SetCoupon sets the "coupon" field.
func (u *IcoCouponUpsertOne) SetCoupon(v string) *IcoCouponUpsertOne {
	return u.Update(func(s *IcoCouponUpsert) {
		s.SetCoupon(v)
	})
}

// UpdateCoupon sets the "coupon" field to the value that was provided on create.
func (u *IcoCouponUpsertOne) UpdateCoupon() *IcoCouponUpsertOne {
	return u.Update(func(s *IcoCouponUpsert) {
		s.UpdateCoupon()
	})
}

// SetReward sets the "reward" field.
func (u *IcoCouponUpsertOne) SetReward(v string) *IcoCouponUpsertOne {
	return u.Update(func(s *IcoCouponUpsert) {
		s.SetReward(v)
	})
}

// UpdateReward sets the "reward" field to the value that was provided on create.
func (u *IcoCouponUpsertOne) UpdateReward() *IcoCouponUpsertOne {
	return u.Update(func(s *IcoCouponUpsert) {
		s.UpdateReward()
	})
}

// SetCashback sets the "cashback" field.
func (u *IcoCouponUpsertOne) SetCashback(v string) *IcoCouponUpsertOne {
	return u.Update(func(s *IcoCouponUpsert) {
		s.SetCashback(v)
	})
}

// UpdateCashback sets the "cashback" field to the value that was provided on create.
func (u *IcoCouponUpsertOne) UpdateCashback() *IcoCouponUpsertOne {
	return u.Update(func(s *IcoCouponUpsert) {
		s.UpdateCashback()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *IcoCouponUpsertOne) SetDeletedAt(v time.Time) *IcoCouponUpsertOne {
	return u.Update(func(s *IcoCouponUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *IcoCouponUpsertOne) UpdateDeletedAt() *IcoCouponUpsertOne {
	return u.Update(func(s *IcoCouponUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *IcoCouponUpsertOne) ClearDeletedAt() *IcoCouponUpsertOne {
	return u.Update(func(s *IcoCouponUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *IcoCouponUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IcoCouponCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IcoCouponUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IcoCouponUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IcoCouponUpsertOne.ID is not supported by MySQL driver. Use IcoCouponUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IcoCouponUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IcoCouponCreateBulk is the builder for creating many IcoCoupon entities in bulk.
type IcoCouponCreateBulk struct {
	config
	err      error
	builders []*IcoCouponCreate
	conflict []sql.ConflictOption
}

// Save creates the IcoCoupon entities in the database.
func (iccb *IcoCouponCreateBulk) Save(ctx context.Context) ([]*IcoCoupon, error) {
	if iccb.err != nil {
		return nil, iccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iccb.builders))
	nodes := make([]*IcoCoupon, len(iccb.builders))
	mutators := make([]Mutator, len(iccb.builders))
	for i := range iccb.builders {
		func(i int, root context.Context) {
			builder := iccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IcoCouponMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iccb *IcoCouponCreateBulk) SaveX(ctx context.Context) []*IcoCoupon {
	v, err := iccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iccb *IcoCouponCreateBulk) Exec(ctx context.Context) error {
	_, err := iccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iccb *IcoCouponCreateBulk) ExecX(ctx context.Context) {
	if err := iccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IcoCoupon.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IcoCouponUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (iccb *IcoCouponCreateBulk) OnConflict(opts ...sql.ConflictOption) *IcoCouponUpsertBulk {
	iccb.conflict = opts
	return &IcoCouponUpsertBulk{
		create: iccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IcoCoupon.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iccb *IcoCouponCreateBulk) OnConflictColumns(columns ...string) *IcoCouponUpsertBulk {
	iccb.conflict = append(iccb.conflict, sql.ConflictColumns(columns...))
	return &IcoCouponUpsertBulk{
		create: iccb,
	}
}

// IcoCouponUpsertBulk is the builder for "upsert"-ing
// a bulk of IcoCoupon nodes.
type IcoCouponUpsertBulk struct {
	create *IcoCouponCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IcoCoupon.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(icocoupon.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IcoCouponUpsertBulk) UpdateNewValues() *IcoCouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(icocoupon.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(icocoupon.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IcoCoupon.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IcoCouponUpsertBulk) Ignore() *IcoCouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IcoCouponUpsertBulk) DoNothing() *IcoCouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IcoCouponCreateBulk.OnConflict
// documentation for more info.
func (u *IcoCouponUpsertBulk) Update(set func(*IcoCouponUpsert)) *IcoCouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IcoCouponUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IcoCouponUpsertBulk) SetUpdatedAt(v time.Time) *IcoCouponUpsertBulk {
	return u.Update(func(s *IcoCouponUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IcoCouponUpsertBulk) UpdateUpdatedAt() *IcoCouponUpsertBulk {
	return u.Update(func(s *IcoCouponUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *IcoCouponUpsertBulk) SetUserID(v string) *IcoCouponUpsertBulk {
	return u.Update(func(s *IcoCouponUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IcoCouponUpsertBulk) UpdateUserID() *IcoCouponUpsertBulk {
	return u.Update(func(s *IcoCouponUpsert) {
		s.UpdateUserID()
	})
}

// SetCoupon sets the "coupon" field.
func (u *IcoCouponUpsertBulk) SetCoupon(v string) *IcoCouponUpsertBulk {
	return u.Update(func(s *IcoCouponUpsert) {
		s.SetCoupon(v)
	})
}

// UpdateCoupon sets the "coupon" field to the value that was provided on create.
func (u *IcoCouponUpsertBulk) UpdateCoupon() *IcoCouponUpsertBulk {
	return u.Update(func(s *IcoCouponUpsert) {
		s.UpdateCoupon()
	})
}

// SetReward sets the "reward" field.
func (u *IcoCouponUpsertBulk) SetReward(v string) *IcoCouponUpsertBulk {
	return u.Update(func(s *IcoCouponUpsert) {
		s.SetReward(v)
	})
}

// UpdateReward sets the "reward" field to the value that was provided on create.
func (u *IcoCouponUpsertBulk) UpdateReward() *IcoCouponUpsertBulk {
	return u.Update(func(s *IcoCouponUpsert) {
		s.UpdateReward()
	})
}

// SetCashback sets the "cashback" field.
func (u *IcoCouponUpsertBulk) SetCashback(v string) *IcoCouponUpsertBulk {
	return u.Update(func(s *IcoCouponUpsert) {
		s.SetCashback(v)
	})
}

// UpdateCashback sets the "cashback" field to the value that was provided on create.
func (u *IcoCouponUpsertBulk) UpdateCashback() *IcoCouponUpsertBulk {
	return u.Update(func(s *IcoCouponUpsert) {
		s.UpdateCashback()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *IcoCouponUpsertBulk) SetDeletedAt(v time.Time) *IcoCouponUpsertBulk {
	return u.Update(func(s *IcoCouponUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *IcoCouponUpsertBulk) UpdateDeletedAt() *IcoCouponUpsertBulk {
	return u.Update(func(s *IcoCouponUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *IcoCouponUpsertBulk) ClearDeletedAt() *IcoCouponUpsertBulk {
	return u.Update(func(s *IcoCouponUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *IcoCouponUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IcoCouponCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IcoCouponCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IcoCouponUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
