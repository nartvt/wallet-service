// Code generated by ent, DO NOT EDIT.

package icohistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/indikay/wallet-service/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// RoundID applies equality check predicate on the "round_id" field. It's identical to RoundIDEQ.
func RoundID(v int32) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEQ(FieldRoundID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEQ(FieldUserID, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEQ(FieldPrice, v))
}

// NumToken applies equality check predicate on the "num_token" field. It's identical to NumTokenEQ.
func NumToken(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEQ(FieldNumToken, v))
}

// SubRound applies equality check predicate on the "sub_round" field. It's identical to SubRoundEQ.
func SubRound(v int32) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEQ(FieldSubRound, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEQ(FieldType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldLTE(FieldUpdatedAt, v))
}

// RoundIDEQ applies the EQ predicate on the "round_id" field.
func RoundIDEQ(v int32) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEQ(FieldRoundID, v))
}

// RoundIDNEQ applies the NEQ predicate on the "round_id" field.
func RoundIDNEQ(v int32) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNEQ(FieldRoundID, v))
}

// RoundIDIn applies the In predicate on the "round_id" field.
func RoundIDIn(vs ...int32) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldIn(FieldRoundID, vs...))
}

// RoundIDNotIn applies the NotIn predicate on the "round_id" field.
func RoundIDNotIn(vs ...int32) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNotIn(FieldRoundID, vs...))
}

// RoundIDGT applies the GT predicate on the "round_id" field.
func RoundIDGT(v int32) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldGT(FieldRoundID, v))
}

// RoundIDGTE applies the GTE predicate on the "round_id" field.
func RoundIDGTE(v int32) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldGTE(FieldRoundID, v))
}

// RoundIDLT applies the LT predicate on the "round_id" field.
func RoundIDLT(v int32) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldLT(FieldRoundID, v))
}

// RoundIDLTE applies the LTE predicate on the "round_id" field.
func RoundIDLTE(v int32) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldLTE(FieldRoundID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldContainsFold(FieldUserID, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldLTE(FieldPrice, v))
}

// PriceContains applies the Contains predicate on the "price" field.
func PriceContains(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldContains(FieldPrice, v))
}

// PriceHasPrefix applies the HasPrefix predicate on the "price" field.
func PriceHasPrefix(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldHasPrefix(FieldPrice, v))
}

// PriceHasSuffix applies the HasSuffix predicate on the "price" field.
func PriceHasSuffix(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldHasSuffix(FieldPrice, v))
}

// PriceEqualFold applies the EqualFold predicate on the "price" field.
func PriceEqualFold(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEqualFold(FieldPrice, v))
}

// PriceContainsFold applies the ContainsFold predicate on the "price" field.
func PriceContainsFold(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldContainsFold(FieldPrice, v))
}

// NumTokenEQ applies the EQ predicate on the "num_token" field.
func NumTokenEQ(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEQ(FieldNumToken, v))
}

// NumTokenNEQ applies the NEQ predicate on the "num_token" field.
func NumTokenNEQ(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNEQ(FieldNumToken, v))
}

// NumTokenIn applies the In predicate on the "num_token" field.
func NumTokenIn(vs ...string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldIn(FieldNumToken, vs...))
}

// NumTokenNotIn applies the NotIn predicate on the "num_token" field.
func NumTokenNotIn(vs ...string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNotIn(FieldNumToken, vs...))
}

// NumTokenGT applies the GT predicate on the "num_token" field.
func NumTokenGT(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldGT(FieldNumToken, v))
}

// NumTokenGTE applies the GTE predicate on the "num_token" field.
func NumTokenGTE(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldGTE(FieldNumToken, v))
}

// NumTokenLT applies the LT predicate on the "num_token" field.
func NumTokenLT(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldLT(FieldNumToken, v))
}

// NumTokenLTE applies the LTE predicate on the "num_token" field.
func NumTokenLTE(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldLTE(FieldNumToken, v))
}

// NumTokenContains applies the Contains predicate on the "num_token" field.
func NumTokenContains(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldContains(FieldNumToken, v))
}

// NumTokenHasPrefix applies the HasPrefix predicate on the "num_token" field.
func NumTokenHasPrefix(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldHasPrefix(FieldNumToken, v))
}

// NumTokenHasSuffix applies the HasSuffix predicate on the "num_token" field.
func NumTokenHasSuffix(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldHasSuffix(FieldNumToken, v))
}

// NumTokenEqualFold applies the EqualFold predicate on the "num_token" field.
func NumTokenEqualFold(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEqualFold(FieldNumToken, v))
}

// NumTokenContainsFold applies the ContainsFold predicate on the "num_token" field.
func NumTokenContainsFold(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldContainsFold(FieldNumToken, v))
}

// SubRoundEQ applies the EQ predicate on the "sub_round" field.
func SubRoundEQ(v int32) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEQ(FieldSubRound, v))
}

// SubRoundNEQ applies the NEQ predicate on the "sub_round" field.
func SubRoundNEQ(v int32) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNEQ(FieldSubRound, v))
}

// SubRoundIn applies the In predicate on the "sub_round" field.
func SubRoundIn(vs ...int32) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldIn(FieldSubRound, vs...))
}

// SubRoundNotIn applies the NotIn predicate on the "sub_round" field.
func SubRoundNotIn(vs ...int32) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNotIn(FieldSubRound, vs...))
}

// SubRoundGT applies the GT predicate on the "sub_round" field.
func SubRoundGT(v int32) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldGT(FieldSubRound, v))
}

// SubRoundGTE applies the GTE predicate on the "sub_round" field.
func SubRoundGTE(v int32) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldGTE(FieldSubRound, v))
}

// SubRoundLT applies the LT predicate on the "sub_round" field.
func SubRoundLT(v int32) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldLT(FieldSubRound, v))
}

// SubRoundLTE applies the LTE predicate on the "sub_round" field.
func SubRoundLTE(v int32) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldLTE(FieldSubRound, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.IcoHistory {
	return predicate.IcoHistory(sql.FieldContainsFold(FieldType, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IcoHistory) predicate.IcoHistory {
	return predicate.IcoHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IcoHistory) predicate.IcoHistory {
	return predicate.IcoHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IcoHistory) predicate.IcoHistory {
	return predicate.IcoHistory(sql.NotPredicates(p))
}
