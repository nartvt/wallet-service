// Code generated by ent, DO NOT EDIT.

package icohistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the icohistory type in the database.
	Label = "ico_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldRoundID holds the string denoting the round_id field in the database.
	FieldRoundID = "round_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldNumToken holds the string denoting the num_token field in the database.
	FieldNumToken = "num_token"
	// FieldSubRound holds the string denoting the sub_round field in the database.
	FieldSubRound = "sub_round"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// Table holds the table name of the icohistory in the database.
	Table = "ico_histories"
)

// Columns holds all SQL columns for icohistory fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldRoundID,
	FieldUserID,
	FieldPrice,
	FieldNumToken,
	FieldSubRound,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the IcoHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRoundID orders the results by the round_id field.
func ByRoundID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoundID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByNumToken orders the results by the num_token field.
func ByNumToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumToken, opts...).ToFunc()
}

// BySubRound orders the results by the sub_round field.
func BySubRound(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubRound, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}
