// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/indikay/wallet-service/ent/predicate"
	"github.com/indikay/wallet-service/ent/transaction"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks     []Hook
	mutation  *TransactionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tu *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TransactionUpdate) SetUpdatedAt(t time.Time) *TransactionUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetTransType sets the "trans_type" field.
func (tu *TransactionUpdate) SetTransType(s string) *TransactionUpdate {
	tu.mutation.SetTransType(s)
	return tu
}

// SetNillableTransType sets the "trans_type" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTransType(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetTransType(*s)
	}
	return tu
}

// SetSource sets the "source" field.
func (tu *TransactionUpdate) SetSource(s string) *TransactionUpdate {
	tu.mutation.SetSource(s)
	return tu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableSource(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetSource(*s)
	}
	return tu
}

// SetSrcSymbol sets the "src_symbol" field.
func (tu *TransactionUpdate) SetSrcSymbol(s string) *TransactionUpdate {
	tu.mutation.SetSrcSymbol(s)
	return tu
}

// SetNillableSrcSymbol sets the "src_symbol" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableSrcSymbol(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetSrcSymbol(*s)
	}
	return tu
}

// SetSrcAmount sets the "src_amount" field.
func (tu *TransactionUpdate) SetSrcAmount(s string) *TransactionUpdate {
	tu.mutation.SetSrcAmount(s)
	return tu
}

// SetNillableSrcAmount sets the "src_amount" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableSrcAmount(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetSrcAmount(*s)
	}
	return tu
}

// SetDestination sets the "destination" field.
func (tu *TransactionUpdate) SetDestination(s string) *TransactionUpdate {
	tu.mutation.SetDestination(s)
	return tu
}

// SetNillableDestination sets the "destination" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableDestination(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetDestination(*s)
	}
	return tu
}

// SetDestSymbol sets the "dest_symbol" field.
func (tu *TransactionUpdate) SetDestSymbol(s string) *TransactionUpdate {
	tu.mutation.SetDestSymbol(s)
	return tu
}

// SetNillableDestSymbol sets the "dest_symbol" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableDestSymbol(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetDestSymbol(*s)
	}
	return tu
}

// SetDestAmount sets the "dest_amount" field.
func (tu *TransactionUpdate) SetDestAmount(s string) *TransactionUpdate {
	tu.mutation.SetDestAmount(s)
	return tu
}

// SetNillableDestAmount sets the "dest_amount" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableDestAmount(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetDestAmount(*s)
	}
	return tu
}

// SetRate sets the "rate" field.
func (tu *TransactionUpdate) SetRate(s string) *TransactionUpdate {
	tu.mutation.SetRate(s)
	return tu
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableRate(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetRate(*s)
	}
	return tu
}

// SetSourceService sets the "source_service" field.
func (tu *TransactionUpdate) SetSourceService(s string) *TransactionUpdate {
	tu.mutation.SetSourceService(s)
	return tu
}

// SetNillableSourceService sets the "source_service" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableSourceService(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetSourceService(*s)
	}
	return tu
}

// SetSourceID sets the "source_id" field.
func (tu *TransactionUpdate) SetSourceID(s string) *TransactionUpdate {
	tu.mutation.SetSourceID(s)
	return tu
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableSourceID(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetSourceID(*s)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TransactionUpdate) SetStatus(s string) *TransactionUpdate {
	tu.mutation.SetStatus(s)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableStatus(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetStatus(*s)
	}
	return tu
}

// Mutation returns the TransactionMutation object of the builder.
func (tu *TransactionUpdate) Mutation() *TransactionMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TransactionUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := transaction.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TransactionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TransactionUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.TransType(); ok {
		_spec.SetField(transaction.FieldTransType, field.TypeString, value)
	}
	if value, ok := tu.mutation.Source(); ok {
		_spec.SetField(transaction.FieldSource, field.TypeString, value)
	}
	if value, ok := tu.mutation.SrcSymbol(); ok {
		_spec.SetField(transaction.FieldSrcSymbol, field.TypeString, value)
	}
	if value, ok := tu.mutation.SrcAmount(); ok {
		_spec.SetField(transaction.FieldSrcAmount, field.TypeString, value)
	}
	if value, ok := tu.mutation.Destination(); ok {
		_spec.SetField(transaction.FieldDestination, field.TypeString, value)
	}
	if value, ok := tu.mutation.DestSymbol(); ok {
		_spec.SetField(transaction.FieldDestSymbol, field.TypeString, value)
	}
	if value, ok := tu.mutation.DestAmount(); ok {
		_spec.SetField(transaction.FieldDestAmount, field.TypeString, value)
	}
	if value, ok := tu.mutation.Rate(); ok {
		_spec.SetField(transaction.FieldRate, field.TypeString, value)
	}
	if value, ok := tu.mutation.SourceService(); ok {
		_spec.SetField(transaction.FieldSourceService, field.TypeString, value)
	}
	if value, ok := tu.mutation.SourceID(); ok {
		_spec.SetField(transaction.FieldSourceID, field.TypeString, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(transaction.FieldStatus, field.TypeString, value)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TransactionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TransactionUpdateOne) SetUpdatedAt(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetTransType sets the "trans_type" field.
func (tuo *TransactionUpdateOne) SetTransType(s string) *TransactionUpdateOne {
	tuo.mutation.SetTransType(s)
	return tuo
}

// SetNillableTransType sets the "trans_type" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTransType(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetTransType(*s)
	}
	return tuo
}

// SetSource sets the "source" field.
func (tuo *TransactionUpdateOne) SetSource(s string) *TransactionUpdateOne {
	tuo.mutation.SetSource(s)
	return tuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableSource(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetSource(*s)
	}
	return tuo
}

// SetSrcSymbol sets the "src_symbol" field.
func (tuo *TransactionUpdateOne) SetSrcSymbol(s string) *TransactionUpdateOne {
	tuo.mutation.SetSrcSymbol(s)
	return tuo
}

// SetNillableSrcSymbol sets the "src_symbol" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableSrcSymbol(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetSrcSymbol(*s)
	}
	return tuo
}

// SetSrcAmount sets the "src_amount" field.
func (tuo *TransactionUpdateOne) SetSrcAmount(s string) *TransactionUpdateOne {
	tuo.mutation.SetSrcAmount(s)
	return tuo
}

// SetNillableSrcAmount sets the "src_amount" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableSrcAmount(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetSrcAmount(*s)
	}
	return tuo
}

// SetDestination sets the "destination" field.
func (tuo *TransactionUpdateOne) SetDestination(s string) *TransactionUpdateOne {
	tuo.mutation.SetDestination(s)
	return tuo
}

// SetNillableDestination sets the "destination" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableDestination(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetDestination(*s)
	}
	return tuo
}

// SetDestSymbol sets the "dest_symbol" field.
func (tuo *TransactionUpdateOne) SetDestSymbol(s string) *TransactionUpdateOne {
	tuo.mutation.SetDestSymbol(s)
	return tuo
}

// SetNillableDestSymbol sets the "dest_symbol" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableDestSymbol(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetDestSymbol(*s)
	}
	return tuo
}

// SetDestAmount sets the "dest_amount" field.
func (tuo *TransactionUpdateOne) SetDestAmount(s string) *TransactionUpdateOne {
	tuo.mutation.SetDestAmount(s)
	return tuo
}

// SetNillableDestAmount sets the "dest_amount" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableDestAmount(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetDestAmount(*s)
	}
	return tuo
}

// SetRate sets the "rate" field.
func (tuo *TransactionUpdateOne) SetRate(s string) *TransactionUpdateOne {
	tuo.mutation.SetRate(s)
	return tuo
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableRate(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetRate(*s)
	}
	return tuo
}

// SetSourceService sets the "source_service" field.
func (tuo *TransactionUpdateOne) SetSourceService(s string) *TransactionUpdateOne {
	tuo.mutation.SetSourceService(s)
	return tuo
}

// SetNillableSourceService sets the "source_service" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableSourceService(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetSourceService(*s)
	}
	return tuo
}

// SetSourceID sets the "source_id" field.
func (tuo *TransactionUpdateOne) SetSourceID(s string) *TransactionUpdateOne {
	tuo.mutation.SetSourceID(s)
	return tuo
}

// SetNillableSourceID sets the "source_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableSourceID(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetSourceID(*s)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TransactionUpdateOne) SetStatus(s string) *TransactionUpdateOne {
	tuo.mutation.SetStatus(s)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableStatus(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetStatus(*s)
	}
	return tuo
}

// Mutation returns the TransactionMutation object of the builder.
func (tuo *TransactionUpdateOne) Mutation() *TransactionMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tuo *TransactionUpdateOne) Where(ps ...predicate.Transaction) *TransactionUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transaction entity.
func (tuo *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TransactionUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := transaction.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TransactionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TransactionUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.TransType(); ok {
		_spec.SetField(transaction.FieldTransType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Source(); ok {
		_spec.SetField(transaction.FieldSource, field.TypeString, value)
	}
	if value, ok := tuo.mutation.SrcSymbol(); ok {
		_spec.SetField(transaction.FieldSrcSymbol, field.TypeString, value)
	}
	if value, ok := tuo.mutation.SrcAmount(); ok {
		_spec.SetField(transaction.FieldSrcAmount, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Destination(); ok {
		_spec.SetField(transaction.FieldDestination, field.TypeString, value)
	}
	if value, ok := tuo.mutation.DestSymbol(); ok {
		_spec.SetField(transaction.FieldDestSymbol, field.TypeString, value)
	}
	if value, ok := tuo.mutation.DestAmount(); ok {
		_spec.SetField(transaction.FieldDestAmount, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Rate(); ok {
		_spec.SetField(transaction.FieldRate, field.TypeString, value)
	}
	if value, ok := tuo.mutation.SourceService(); ok {
		_spec.SetField(transaction.FieldSourceService, field.TypeString, value)
	}
	if value, ok := tuo.mutation.SourceID(); ok {
		_spec.SetField(transaction.FieldSourceID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(transaction.FieldStatus, field.TypeString, value)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Transaction{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
