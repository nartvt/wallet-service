// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/indikay/wallet-service/ent/icoround"
	"github.com/indikay/wallet-service/ent/predicate"
)

// IcoRoundUpdate is the builder for updating IcoRound entities.
type IcoRoundUpdate struct {
	config
	hooks     []Hook
	mutation  *IcoRoundMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IcoRoundUpdate builder.
func (iru *IcoRoundUpdate) Where(ps ...predicate.IcoRound) *IcoRoundUpdate {
	iru.mutation.Where(ps...)
	return iru
}

// SetUpdatedAt sets the "updated_at" field.
func (iru *IcoRoundUpdate) SetUpdatedAt(t time.Time) *IcoRoundUpdate {
	iru.mutation.SetUpdatedAt(t)
	return iru
}

// SetRoundID sets the "round_id" field.
func (iru *IcoRoundUpdate) SetRoundID(i int32) *IcoRoundUpdate {
	iru.mutation.ResetRoundID()
	iru.mutation.SetRoundID(i)
	return iru
}

// SetNillableRoundID sets the "round_id" field if the given value is not nil.
func (iru *IcoRoundUpdate) SetNillableRoundID(i *int32) *IcoRoundUpdate {
	if i != nil {
		iru.SetRoundID(*i)
	}
	return iru
}

// AddRoundID adds i to the "round_id" field.
func (iru *IcoRoundUpdate) AddRoundID(i int32) *IcoRoundUpdate {
	iru.mutation.AddRoundID(i)
	return iru
}

// SetSubRound sets the "sub_round" field.
func (iru *IcoRoundUpdate) SetSubRound(i int32) *IcoRoundUpdate {
	iru.mutation.ResetSubRound()
	iru.mutation.SetSubRound(i)
	return iru
}

// SetNillableSubRound sets the "sub_round" field if the given value is not nil.
func (iru *IcoRoundUpdate) SetNillableSubRound(i *int32) *IcoRoundUpdate {
	if i != nil {
		iru.SetSubRound(*i)
	}
	return iru
}

// AddSubRound adds i to the "sub_round" field.
func (iru *IcoRoundUpdate) AddSubRound(i int32) *IcoRoundUpdate {
	iru.mutation.AddSubRound(i)
	return iru
}

// SetPrice sets the "price" field.
func (iru *IcoRoundUpdate) SetPrice(s string) *IcoRoundUpdate {
	iru.mutation.SetPrice(s)
	return iru
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (iru *IcoRoundUpdate) SetNillablePrice(s *string) *IcoRoundUpdate {
	if s != nil {
		iru.SetPrice(*s)
	}
	return iru
}

// SetNumToken sets the "num_token" field.
func (iru *IcoRoundUpdate) SetNumToken(s string) *IcoRoundUpdate {
	iru.mutation.SetNumToken(s)
	return iru
}

// SetNillableNumToken sets the "num_token" field if the given value is not nil.
func (iru *IcoRoundUpdate) SetNillableNumToken(s *string) *IcoRoundUpdate {
	if s != nil {
		iru.SetNumToken(*s)
	}
	return iru
}

// SetBoughtToken sets the "bought_token" field.
func (iru *IcoRoundUpdate) SetBoughtToken(s string) *IcoRoundUpdate {
	iru.mutation.SetBoughtToken(s)
	return iru
}

// SetNillableBoughtToken sets the "bought_token" field if the given value is not nil.
func (iru *IcoRoundUpdate) SetNillableBoughtToken(s *string) *IcoRoundUpdate {
	if s != nil {
		iru.SetBoughtToken(*s)
	}
	return iru
}

// SetStartAt sets the "start_at" field.
func (iru *IcoRoundUpdate) SetStartAt(t time.Time) *IcoRoundUpdate {
	iru.mutation.SetStartAt(t)
	return iru
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (iru *IcoRoundUpdate) SetNillableStartAt(t *time.Time) *IcoRoundUpdate {
	if t != nil {
		iru.SetStartAt(*t)
	}
	return iru
}

// ClearStartAt clears the value of the "start_at" field.
func (iru *IcoRoundUpdate) ClearStartAt() *IcoRoundUpdate {
	iru.mutation.ClearStartAt()
	return iru
}

// SetEndAt sets the "end_at" field.
func (iru *IcoRoundUpdate) SetEndAt(t time.Time) *IcoRoundUpdate {
	iru.mutation.SetEndAt(t)
	return iru
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (iru *IcoRoundUpdate) SetNillableEndAt(t *time.Time) *IcoRoundUpdate {
	if t != nil {
		iru.SetEndAt(*t)
	}
	return iru
}

// ClearEndAt clears the value of the "end_at" field.
func (iru *IcoRoundUpdate) ClearEndAt() *IcoRoundUpdate {
	iru.mutation.ClearEndAt()
	return iru
}

// SetIsClose sets the "is_close" field.
func (iru *IcoRoundUpdate) SetIsClose(b bool) *IcoRoundUpdate {
	iru.mutation.SetIsClose(b)
	return iru
}

// SetNillableIsClose sets the "is_close" field if the given value is not nil.
func (iru *IcoRoundUpdate) SetNillableIsClose(b *bool) *IcoRoundUpdate {
	if b != nil {
		iru.SetIsClose(*b)
	}
	return iru
}

// Mutation returns the IcoRoundMutation object of the builder.
func (iru *IcoRoundUpdate) Mutation() *IcoRoundMutation {
	return iru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iru *IcoRoundUpdate) Save(ctx context.Context) (int, error) {
	iru.defaults()
	return withHooks(ctx, iru.sqlSave, iru.mutation, iru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iru *IcoRoundUpdate) SaveX(ctx context.Context) int {
	affected, err := iru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iru *IcoRoundUpdate) Exec(ctx context.Context) error {
	_, err := iru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iru *IcoRoundUpdate) ExecX(ctx context.Context) {
	if err := iru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iru *IcoRoundUpdate) defaults() {
	if _, ok := iru.mutation.UpdatedAt(); !ok {
		v := icoround.UpdateDefaultUpdatedAt()
		iru.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iru *IcoRoundUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IcoRoundUpdate {
	iru.modifiers = append(iru.modifiers, modifiers...)
	return iru
}

func (iru *IcoRoundUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(icoround.Table, icoround.Columns, sqlgraph.NewFieldSpec(icoround.FieldID, field.TypeString))
	if ps := iru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iru.mutation.UpdatedAt(); ok {
		_spec.SetField(icoround.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iru.mutation.RoundID(); ok {
		_spec.SetField(icoround.FieldRoundID, field.TypeInt32, value)
	}
	if value, ok := iru.mutation.AddedRoundID(); ok {
		_spec.AddField(icoround.FieldRoundID, field.TypeInt32, value)
	}
	if value, ok := iru.mutation.SubRound(); ok {
		_spec.SetField(icoround.FieldSubRound, field.TypeInt32, value)
	}
	if value, ok := iru.mutation.AddedSubRound(); ok {
		_spec.AddField(icoround.FieldSubRound, field.TypeInt32, value)
	}
	if value, ok := iru.mutation.Price(); ok {
		_spec.SetField(icoround.FieldPrice, field.TypeString, value)
	}
	if value, ok := iru.mutation.NumToken(); ok {
		_spec.SetField(icoround.FieldNumToken, field.TypeString, value)
	}
	if value, ok := iru.mutation.BoughtToken(); ok {
		_spec.SetField(icoround.FieldBoughtToken, field.TypeString, value)
	}
	if value, ok := iru.mutation.StartAt(); ok {
		_spec.SetField(icoround.FieldStartAt, field.TypeTime, value)
	}
	if iru.mutation.StartAtCleared() {
		_spec.ClearField(icoround.FieldStartAt, field.TypeTime)
	}
	if value, ok := iru.mutation.EndAt(); ok {
		_spec.SetField(icoround.FieldEndAt, field.TypeTime, value)
	}
	if iru.mutation.EndAtCleared() {
		_spec.ClearField(icoround.FieldEndAt, field.TypeTime)
	}
	if value, ok := iru.mutation.IsClose(); ok {
		_spec.SetField(icoround.FieldIsClose, field.TypeBool, value)
	}
	_spec.AddModifiers(iru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{icoround.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iru.mutation.done = true
	return n, nil
}

// IcoRoundUpdateOne is the builder for updating a single IcoRound entity.
type IcoRoundUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IcoRoundMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (iruo *IcoRoundUpdateOne) SetUpdatedAt(t time.Time) *IcoRoundUpdateOne {
	iruo.mutation.SetUpdatedAt(t)
	return iruo
}

// SetRoundID sets the "round_id" field.
func (iruo *IcoRoundUpdateOne) SetRoundID(i int32) *IcoRoundUpdateOne {
	iruo.mutation.ResetRoundID()
	iruo.mutation.SetRoundID(i)
	return iruo
}

// SetNillableRoundID sets the "round_id" field if the given value is not nil.
func (iruo *IcoRoundUpdateOne) SetNillableRoundID(i *int32) *IcoRoundUpdateOne {
	if i != nil {
		iruo.SetRoundID(*i)
	}
	return iruo
}

// AddRoundID adds i to the "round_id" field.
func (iruo *IcoRoundUpdateOne) AddRoundID(i int32) *IcoRoundUpdateOne {
	iruo.mutation.AddRoundID(i)
	return iruo
}

// SetSubRound sets the "sub_round" field.
func (iruo *IcoRoundUpdateOne) SetSubRound(i int32) *IcoRoundUpdateOne {
	iruo.mutation.ResetSubRound()
	iruo.mutation.SetSubRound(i)
	return iruo
}

// SetNillableSubRound sets the "sub_round" field if the given value is not nil.
func (iruo *IcoRoundUpdateOne) SetNillableSubRound(i *int32) *IcoRoundUpdateOne {
	if i != nil {
		iruo.SetSubRound(*i)
	}
	return iruo
}

// AddSubRound adds i to the "sub_round" field.
func (iruo *IcoRoundUpdateOne) AddSubRound(i int32) *IcoRoundUpdateOne {
	iruo.mutation.AddSubRound(i)
	return iruo
}

// SetPrice sets the "price" field.
func (iruo *IcoRoundUpdateOne) SetPrice(s string) *IcoRoundUpdateOne {
	iruo.mutation.SetPrice(s)
	return iruo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (iruo *IcoRoundUpdateOne) SetNillablePrice(s *string) *IcoRoundUpdateOne {
	if s != nil {
		iruo.SetPrice(*s)
	}
	return iruo
}

// SetNumToken sets the "num_token" field.
func (iruo *IcoRoundUpdateOne) SetNumToken(s string) *IcoRoundUpdateOne {
	iruo.mutation.SetNumToken(s)
	return iruo
}

// SetNillableNumToken sets the "num_token" field if the given value is not nil.
func (iruo *IcoRoundUpdateOne) SetNillableNumToken(s *string) *IcoRoundUpdateOne {
	if s != nil {
		iruo.SetNumToken(*s)
	}
	return iruo
}

// SetBoughtToken sets the "bought_token" field.
func (iruo *IcoRoundUpdateOne) SetBoughtToken(s string) *IcoRoundUpdateOne {
	iruo.mutation.SetBoughtToken(s)
	return iruo
}

// SetNillableBoughtToken sets the "bought_token" field if the given value is not nil.
func (iruo *IcoRoundUpdateOne) SetNillableBoughtToken(s *string) *IcoRoundUpdateOne {
	if s != nil {
		iruo.SetBoughtToken(*s)
	}
	return iruo
}

// SetStartAt sets the "start_at" field.
func (iruo *IcoRoundUpdateOne) SetStartAt(t time.Time) *IcoRoundUpdateOne {
	iruo.mutation.SetStartAt(t)
	return iruo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (iruo *IcoRoundUpdateOne) SetNillableStartAt(t *time.Time) *IcoRoundUpdateOne {
	if t != nil {
		iruo.SetStartAt(*t)
	}
	return iruo
}

// ClearStartAt clears the value of the "start_at" field.
func (iruo *IcoRoundUpdateOne) ClearStartAt() *IcoRoundUpdateOne {
	iruo.mutation.ClearStartAt()
	return iruo
}

// SetEndAt sets the "end_at" field.
func (iruo *IcoRoundUpdateOne) SetEndAt(t time.Time) *IcoRoundUpdateOne {
	iruo.mutation.SetEndAt(t)
	return iruo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (iruo *IcoRoundUpdateOne) SetNillableEndAt(t *time.Time) *IcoRoundUpdateOne {
	if t != nil {
		iruo.SetEndAt(*t)
	}
	return iruo
}

// ClearEndAt clears the value of the "end_at" field.
func (iruo *IcoRoundUpdateOne) ClearEndAt() *IcoRoundUpdateOne {
	iruo.mutation.ClearEndAt()
	return iruo
}

// SetIsClose sets the "is_close" field.
func (iruo *IcoRoundUpdateOne) SetIsClose(b bool) *IcoRoundUpdateOne {
	iruo.mutation.SetIsClose(b)
	return iruo
}

// SetNillableIsClose sets the "is_close" field if the given value is not nil.
func (iruo *IcoRoundUpdateOne) SetNillableIsClose(b *bool) *IcoRoundUpdateOne {
	if b != nil {
		iruo.SetIsClose(*b)
	}
	return iruo
}

// Mutation returns the IcoRoundMutation object of the builder.
func (iruo *IcoRoundUpdateOne) Mutation() *IcoRoundMutation {
	return iruo.mutation
}

// Where appends a list predicates to the IcoRoundUpdate builder.
func (iruo *IcoRoundUpdateOne) Where(ps ...predicate.IcoRound) *IcoRoundUpdateOne {
	iruo.mutation.Where(ps...)
	return iruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iruo *IcoRoundUpdateOne) Select(field string, fields ...string) *IcoRoundUpdateOne {
	iruo.fields = append([]string{field}, fields...)
	return iruo
}

// Save executes the query and returns the updated IcoRound entity.
func (iruo *IcoRoundUpdateOne) Save(ctx context.Context) (*IcoRound, error) {
	iruo.defaults()
	return withHooks(ctx, iruo.sqlSave, iruo.mutation, iruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iruo *IcoRoundUpdateOne) SaveX(ctx context.Context) *IcoRound {
	node, err := iruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iruo *IcoRoundUpdateOne) Exec(ctx context.Context) error {
	_, err := iruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iruo *IcoRoundUpdateOne) ExecX(ctx context.Context) {
	if err := iruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iruo *IcoRoundUpdateOne) defaults() {
	if _, ok := iruo.mutation.UpdatedAt(); !ok {
		v := icoround.UpdateDefaultUpdatedAt()
		iruo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iruo *IcoRoundUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IcoRoundUpdateOne {
	iruo.modifiers = append(iruo.modifiers, modifiers...)
	return iruo
}

func (iruo *IcoRoundUpdateOne) sqlSave(ctx context.Context) (_node *IcoRound, err error) {
	_spec := sqlgraph.NewUpdateSpec(icoround.Table, icoround.Columns, sqlgraph.NewFieldSpec(icoround.FieldID, field.TypeString))
	id, ok := iruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IcoRound.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, icoround.FieldID)
		for _, f := range fields {
			if !icoround.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != icoround.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iruo.mutation.UpdatedAt(); ok {
		_spec.SetField(icoround.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iruo.mutation.RoundID(); ok {
		_spec.SetField(icoround.FieldRoundID, field.TypeInt32, value)
	}
	if value, ok := iruo.mutation.AddedRoundID(); ok {
		_spec.AddField(icoround.FieldRoundID, field.TypeInt32, value)
	}
	if value, ok := iruo.mutation.SubRound(); ok {
		_spec.SetField(icoround.FieldSubRound, field.TypeInt32, value)
	}
	if value, ok := iruo.mutation.AddedSubRound(); ok {
		_spec.AddField(icoround.FieldSubRound, field.TypeInt32, value)
	}
	if value, ok := iruo.mutation.Price(); ok {
		_spec.SetField(icoround.FieldPrice, field.TypeString, value)
	}
	if value, ok := iruo.mutation.NumToken(); ok {
		_spec.SetField(icoround.FieldNumToken, field.TypeString, value)
	}
	if value, ok := iruo.mutation.BoughtToken(); ok {
		_spec.SetField(icoround.FieldBoughtToken, field.TypeString, value)
	}
	if value, ok := iruo.mutation.StartAt(); ok {
		_spec.SetField(icoround.FieldStartAt, field.TypeTime, value)
	}
	if iruo.mutation.StartAtCleared() {
		_spec.ClearField(icoround.FieldStartAt, field.TypeTime)
	}
	if value, ok := iruo.mutation.EndAt(); ok {
		_spec.SetField(icoround.FieldEndAt, field.TypeTime, value)
	}
	if iruo.mutation.EndAtCleared() {
		_spec.ClearField(icoround.FieldEndAt, field.TypeTime)
	}
	if value, ok := iruo.mutation.IsClose(); ok {
		_spec.SetField(icoround.FieldIsClose, field.TypeBool, value)
	}
	_spec.AddModifiers(iruo.modifiers...)
	_node = &IcoRound{config: iruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{icoround.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iruo.mutation.done = true
	return _node, nil
}
