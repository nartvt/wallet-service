// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/indikay/wallet-service/ent/ico"
	"github.com/rs/xid"
)

// IcoCreate is the builder for creating a Ico entity.
type IcoCreate struct {
	config
	mutation *IcoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ic *IcoCreate) SetCreatedAt(t time.Time) *IcoCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *IcoCreate) SetNillableCreatedAt(t *time.Time) *IcoCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *IcoCreate) SetUpdatedAt(t time.Time) *IcoCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *IcoCreate) SetNillableUpdatedAt(t *time.Time) *IcoCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetRoundID sets the "round_id" field.
func (ic *IcoCreate) SetRoundID(i int32) *IcoCreate {
	ic.mutation.SetRoundID(i)
	return ic
}

// SetRoundName sets the "round_name" field.
func (ic *IcoCreate) SetRoundName(s string) *IcoCreate {
	ic.mutation.SetRoundName(s)
	return ic
}

// SetPrice sets the "price" field.
func (ic *IcoCreate) SetPrice(s string) *IcoCreate {
	ic.mutation.SetPrice(s)
	return ic
}

// SetNumToken sets the "num_token" field.
func (ic *IcoCreate) SetNumToken(s string) *IcoCreate {
	ic.mutation.SetNumToken(s)
	return ic
}

// SetNumSub sets the "num_sub" field.
func (ic *IcoCreate) SetNumSub(i int32) *IcoCreate {
	ic.mutation.SetNumSub(i)
	return ic
}

// SetPriceGap sets the "price_gap" field.
func (ic *IcoCreate) SetPriceGap(s string) *IcoCreate {
	ic.mutation.SetPriceGap(s)
	return ic
}

// SetEndedAt sets the "ended_at" field.
func (ic *IcoCreate) SetEndedAt(t time.Time) *IcoCreate {
	ic.mutation.SetEndedAt(t)
	return ic
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (ic *IcoCreate) SetNillableEndedAt(t *time.Time) *IcoCreate {
	if t != nil {
		ic.SetEndedAt(*t)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *IcoCreate) SetID(x xid.ID) *IcoCreate {
	ic.mutation.SetID(x)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *IcoCreate) SetNillableID(x *xid.ID) *IcoCreate {
	if x != nil {
		ic.SetID(*x)
	}
	return ic
}

// Mutation returns the IcoMutation object of the builder.
func (ic *IcoCreate) Mutation() *IcoMutation {
	return ic.mutation
}

// Save creates the Ico in the database.
func (ic *IcoCreate) Save(ctx context.Context) (*Ico, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IcoCreate) SaveX(ctx context.Context) *Ico {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IcoCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IcoCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IcoCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := ico.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := ico.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := ico.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IcoCreate) check() error {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Ico.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Ico.updated_at"`)}
	}
	if _, ok := ic.mutation.RoundID(); !ok {
		return &ValidationError{Name: "round_id", err: errors.New(`ent: missing required field "Ico.round_id"`)}
	}
	if _, ok := ic.mutation.RoundName(); !ok {
		return &ValidationError{Name: "round_name", err: errors.New(`ent: missing required field "Ico.round_name"`)}
	}
	if _, ok := ic.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Ico.price"`)}
	}
	if _, ok := ic.mutation.NumToken(); !ok {
		return &ValidationError{Name: "num_token", err: errors.New(`ent: missing required field "Ico.num_token"`)}
	}
	if _, ok := ic.mutation.NumSub(); !ok {
		return &ValidationError{Name: "num_sub", err: errors.New(`ent: missing required field "Ico.num_sub"`)}
	}
	if _, ok := ic.mutation.PriceGap(); !ok {
		return &ValidationError{Name: "price_gap", err: errors.New(`ent: missing required field "Ico.price_gap"`)}
	}
	return nil
}

func (ic *IcoCreate) sqlSave(ctx context.Context) (*Ico, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IcoCreate) createSpec() (*Ico, *sqlgraph.CreateSpec) {
	var (
		_node = &Ico{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(ico.Table, sqlgraph.NewFieldSpec(ico.FieldID, field.TypeString))
	)
	_spec.OnConflict = ic.conflict
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(ico.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(ico.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.RoundID(); ok {
		_spec.SetField(ico.FieldRoundID, field.TypeInt32, value)
		_node.RoundID = value
	}
	if value, ok := ic.mutation.RoundName(); ok {
		_spec.SetField(ico.FieldRoundName, field.TypeString, value)
		_node.RoundName = value
	}
	if value, ok := ic.mutation.Price(); ok {
		_spec.SetField(ico.FieldPrice, field.TypeString, value)
		_node.Price = value
	}
	if value, ok := ic.mutation.NumToken(); ok {
		_spec.SetField(ico.FieldNumToken, field.TypeString, value)
		_node.NumToken = value
	}
	if value, ok := ic.mutation.NumSub(); ok {
		_spec.SetField(ico.FieldNumSub, field.TypeInt32, value)
		_node.NumSub = value
	}
	if value, ok := ic.mutation.PriceGap(); ok {
		_spec.SetField(ico.FieldPriceGap, field.TypeString, value)
		_node.PriceGap = value
	}
	if value, ok := ic.mutation.EndedAt(); ok {
		_spec.SetField(ico.FieldEndedAt, field.TypeTime, value)
		_node.EndedAt = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ico.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IcoUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ic *IcoCreate) OnConflict(opts ...sql.ConflictOption) *IcoUpsertOne {
	ic.conflict = opts
	return &IcoUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ico.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *IcoCreate) OnConflictColumns(columns ...string) *IcoUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &IcoUpsertOne{
		create: ic,
	}
}

type (
	// IcoUpsertOne is the builder for "upsert"-ing
	//  one Ico node.
	IcoUpsertOne struct {
		create *IcoCreate
	}

	// IcoUpsert is the "OnConflict" setter.
	IcoUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *IcoUpsert) SetUpdatedAt(v time.Time) *IcoUpsert {
	u.Set(ico.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IcoUpsert) UpdateUpdatedAt() *IcoUpsert {
	u.SetExcluded(ico.FieldUpdatedAt)
	return u
}

// SetRoundID sets the "round_id" field.
func (u *IcoUpsert) SetRoundID(v int32) *IcoUpsert {
	u.Set(ico.FieldRoundID, v)
	return u
}

// UpdateRoundID sets the "round_id" field to the value that was provided on create.
func (u *IcoUpsert) UpdateRoundID() *IcoUpsert {
	u.SetExcluded(ico.FieldRoundID)
	return u
}

// AddRoundID adds v to the "round_id" field.
func (u *IcoUpsert) AddRoundID(v int32) *IcoUpsert {
	u.Add(ico.FieldRoundID, v)
	return u
}

// SetRoundName sets the "round_name" field.
func (u *IcoUpsert) SetRoundName(v string) *IcoUpsert {
	u.Set(ico.FieldRoundName, v)
	return u
}

// UpdateRoundName sets the "round_name" field to the value that was provided on create.
func (u *IcoUpsert) UpdateRoundName() *IcoUpsert {
	u.SetExcluded(ico.FieldRoundName)
	return u
}

// SetPrice sets the "price" field.
func (u *IcoUpsert) SetPrice(v string) *IcoUpsert {
	u.Set(ico.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *IcoUpsert) UpdatePrice() *IcoUpsert {
	u.SetExcluded(ico.FieldPrice)
	return u
}

// SetNumToken sets the "num_token" field.
func (u *IcoUpsert) SetNumToken(v string) *IcoUpsert {
	u.Set(ico.FieldNumToken, v)
	return u
}

// UpdateNumToken sets the "num_token" field to the value that was provided on create.
func (u *IcoUpsert) UpdateNumToken() *IcoUpsert {
	u.SetExcluded(ico.FieldNumToken)
	return u
}

// SetNumSub sets the "num_sub" field.
func (u *IcoUpsert) SetNumSub(v int32) *IcoUpsert {
	u.Set(ico.FieldNumSub, v)
	return u
}

// UpdateNumSub sets the "num_sub" field to the value that was provided on create.
func (u *IcoUpsert) UpdateNumSub() *IcoUpsert {
	u.SetExcluded(ico.FieldNumSub)
	return u
}

// AddNumSub adds v to the "num_sub" field.
func (u *IcoUpsert) AddNumSub(v int32) *IcoUpsert {
	u.Add(ico.FieldNumSub, v)
	return u
}

// SetPriceGap sets the "price_gap" field.
func (u *IcoUpsert) SetPriceGap(v string) *IcoUpsert {
	u.Set(ico.FieldPriceGap, v)
	return u
}

// UpdatePriceGap sets the "price_gap" field to the value that was provided on create.
func (u *IcoUpsert) UpdatePriceGap() *IcoUpsert {
	u.SetExcluded(ico.FieldPriceGap)
	return u
}

// SetEndedAt sets the "ended_at" field.
func (u *IcoUpsert) SetEndedAt(v time.Time) *IcoUpsert {
	u.Set(ico.FieldEndedAt, v)
	return u
}

// UpdateEndedAt sets the "ended_at" field to the value that was provided on create.
func (u *IcoUpsert) UpdateEndedAt() *IcoUpsert {
	u.SetExcluded(ico.FieldEndedAt)
	return u
}

// ClearEndedAt clears the value of the "ended_at" field.
func (u *IcoUpsert) ClearEndedAt() *IcoUpsert {
	u.SetNull(ico.FieldEndedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Ico.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ico.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IcoUpsertOne) UpdateNewValues() *IcoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(ico.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(ico.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ico.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IcoUpsertOne) Ignore() *IcoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IcoUpsertOne) DoNothing() *IcoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IcoCreate.OnConflict
// documentation for more info.
func (u *IcoUpsertOne) Update(set func(*IcoUpsert)) *IcoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IcoUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IcoUpsertOne) SetUpdatedAt(v time.Time) *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IcoUpsertOne) UpdateUpdatedAt() *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetRoundID sets the "round_id" field.
func (u *IcoUpsertOne) SetRoundID(v int32) *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.SetRoundID(v)
	})
}

// AddRoundID adds v to the "round_id" field.
func (u *IcoUpsertOne) AddRoundID(v int32) *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.AddRoundID(v)
	})
}

// UpdateRoundID sets the "round_id" field to the value that was provided on create.
func (u *IcoUpsertOne) UpdateRoundID() *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.UpdateRoundID()
	})
}

// SetRoundName sets the "round_name" field.
func (u *IcoUpsertOne) SetRoundName(v string) *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.SetRoundName(v)
	})
}

// UpdateRoundName sets the "round_name" field to the value that was provided on create.
func (u *IcoUpsertOne) UpdateRoundName() *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.UpdateRoundName()
	})
}

// SetPrice sets the "price" field.
func (u *IcoUpsertOne) SetPrice(v string) *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *IcoUpsertOne) UpdatePrice() *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.UpdatePrice()
	})
}

// SetNumToken sets the "num_token" field.
func (u *IcoUpsertOne) SetNumToken(v string) *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.SetNumToken(v)
	})
}

// UpdateNumToken sets the "num_token" field to the value that was provided on create.
func (u *IcoUpsertOne) UpdateNumToken() *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.UpdateNumToken()
	})
}

// SetNumSub sets the "num_sub" field.
func (u *IcoUpsertOne) SetNumSub(v int32) *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.SetNumSub(v)
	})
}

// AddNumSub adds v to the "num_sub" field.
func (u *IcoUpsertOne) AddNumSub(v int32) *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.AddNumSub(v)
	})
}

// UpdateNumSub sets the "num_sub" field to the value that was provided on create.
func (u *IcoUpsertOne) UpdateNumSub() *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.UpdateNumSub()
	})
}

// SetPriceGap sets the "price_gap" field.
func (u *IcoUpsertOne) SetPriceGap(v string) *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.SetPriceGap(v)
	})
}

// UpdatePriceGap sets the "price_gap" field to the value that was provided on create.
func (u *IcoUpsertOne) UpdatePriceGap() *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.UpdatePriceGap()
	})
}

// SetEndedAt sets the "ended_at" field.
func (u *IcoUpsertOne) SetEndedAt(v time.Time) *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.SetEndedAt(v)
	})
}

// UpdateEndedAt sets the "ended_at" field to the value that was provided on create.
func (u *IcoUpsertOne) UpdateEndedAt() *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.UpdateEndedAt()
	})
}

// ClearEndedAt clears the value of the "ended_at" field.
func (u *IcoUpsertOne) ClearEndedAt() *IcoUpsertOne {
	return u.Update(func(s *IcoUpsert) {
		s.ClearEndedAt()
	})
}

// Exec executes the query.
func (u *IcoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IcoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IcoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IcoUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IcoUpsertOne.ID is not supported by MySQL driver. Use IcoUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IcoUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IcoCreateBulk is the builder for creating many Ico entities in bulk.
type IcoCreateBulk struct {
	config
	err      error
	builders []*IcoCreate
	conflict []sql.ConflictOption
}

// Save creates the Ico entities in the database.
func (icb *IcoCreateBulk) Save(ctx context.Context) ([]*Ico, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Ico, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IcoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IcoCreateBulk) SaveX(ctx context.Context) []*Ico {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IcoCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IcoCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ico.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IcoUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (icb *IcoCreateBulk) OnConflict(opts ...sql.ConflictOption) *IcoUpsertBulk {
	icb.conflict = opts
	return &IcoUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ico.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *IcoCreateBulk) OnConflictColumns(columns ...string) *IcoUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &IcoUpsertBulk{
		create: icb,
	}
}

// IcoUpsertBulk is the builder for "upsert"-ing
// a bulk of Ico nodes.
type IcoUpsertBulk struct {
	create *IcoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Ico.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ico.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IcoUpsertBulk) UpdateNewValues() *IcoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(ico.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(ico.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ico.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IcoUpsertBulk) Ignore() *IcoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IcoUpsertBulk) DoNothing() *IcoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IcoCreateBulk.OnConflict
// documentation for more info.
func (u *IcoUpsertBulk) Update(set func(*IcoUpsert)) *IcoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IcoUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IcoUpsertBulk) SetUpdatedAt(v time.Time) *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IcoUpsertBulk) UpdateUpdatedAt() *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetRoundID sets the "round_id" field.
func (u *IcoUpsertBulk) SetRoundID(v int32) *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.SetRoundID(v)
	})
}

// AddRoundID adds v to the "round_id" field.
func (u *IcoUpsertBulk) AddRoundID(v int32) *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.AddRoundID(v)
	})
}

// UpdateRoundID sets the "round_id" field to the value that was provided on create.
func (u *IcoUpsertBulk) UpdateRoundID() *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.UpdateRoundID()
	})
}

// SetRoundName sets the "round_name" field.
func (u *IcoUpsertBulk) SetRoundName(v string) *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.SetRoundName(v)
	})
}

// UpdateRoundName sets the "round_name" field to the value that was provided on create.
func (u *IcoUpsertBulk) UpdateRoundName() *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.UpdateRoundName()
	})
}

// SetPrice sets the "price" field.
func (u *IcoUpsertBulk) SetPrice(v string) *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *IcoUpsertBulk) UpdatePrice() *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.UpdatePrice()
	})
}

// SetNumToken sets the "num_token" field.
func (u *IcoUpsertBulk) SetNumToken(v string) *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.SetNumToken(v)
	})
}

// UpdateNumToken sets the "num_token" field to the value that was provided on create.
func (u *IcoUpsertBulk) UpdateNumToken() *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.UpdateNumToken()
	})
}

// SetNumSub sets the "num_sub" field.
func (u *IcoUpsertBulk) SetNumSub(v int32) *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.SetNumSub(v)
	})
}

// AddNumSub adds v to the "num_sub" field.
func (u *IcoUpsertBulk) AddNumSub(v int32) *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.AddNumSub(v)
	})
}

// UpdateNumSub sets the "num_sub" field to the value that was provided on create.
func (u *IcoUpsertBulk) UpdateNumSub() *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.UpdateNumSub()
	})
}

// SetPriceGap sets the "price_gap" field.
func (u *IcoUpsertBulk) SetPriceGap(v string) *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.SetPriceGap(v)
	})
}

// UpdatePriceGap sets the "price_gap" field to the value that was provided on create.
func (u *IcoUpsertBulk) UpdatePriceGap() *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.UpdatePriceGap()
	})
}

// SetEndedAt sets the "ended_at" field.
func (u *IcoUpsertBulk) SetEndedAt(v time.Time) *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.SetEndedAt(v)
	})
}

// UpdateEndedAt sets the "ended_at" field to the value that was provided on create.
func (u *IcoUpsertBulk) UpdateEndedAt() *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.UpdateEndedAt()
	})
}

// ClearEndedAt clears the value of the "ended_at" field.
func (u *IcoUpsertBulk) ClearEndedAt() *IcoUpsertBulk {
	return u.Update(func(s *IcoUpsert) {
		s.ClearEndedAt()
	})
}

// Exec executes the query.
func (u *IcoUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IcoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IcoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IcoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
