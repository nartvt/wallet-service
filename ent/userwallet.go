// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/indikay/wallet-service/ent/userwallet"
	"github.com/rs/xid"
)

// UserWallet is the model entity for the UserWallet schema.
type UserWallet struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance      string `json:"balance,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserWallet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userwallet.FieldIsActive:
			values[i] = new(sql.NullBool)
		case userwallet.FieldUserID, userwallet.FieldType, userwallet.FieldSymbol, userwallet.FieldBalance:
			values[i] = new(sql.NullString)
		case userwallet.FieldCreatedAt, userwallet.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case userwallet.FieldID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserWallet fields.
func (uw *UserWallet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userwallet.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				uw.ID = *value
			}
		case userwallet.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uw.CreatedAt = value.Time
			}
		case userwallet.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uw.UpdatedAt = value.Time
			}
		case userwallet.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uw.UserID = value.String
			}
		case userwallet.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				uw.Type = value.String
			}
		case userwallet.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				uw.Symbol = value.String
			}
		case userwallet.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				uw.IsActive = value.Bool
			}
		case userwallet.FieldBalance:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				uw.Balance = value.String
			}
		default:
			uw.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserWallet.
// This includes values selected through modifiers, order, etc.
func (uw *UserWallet) Value(name string) (ent.Value, error) {
	return uw.selectValues.Get(name)
}

// Update returns a builder for updating this UserWallet.
// Note that you need to call UserWallet.Unwrap() before calling this method if this UserWallet
// was returned from a transaction, and the transaction was committed or rolled back.
func (uw *UserWallet) Update() *UserWalletUpdateOne {
	return NewUserWalletClient(uw.config).UpdateOne(uw)
}

// Unwrap unwraps the UserWallet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uw *UserWallet) Unwrap() *UserWallet {
	_tx, ok := uw.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserWallet is not a transactional entity")
	}
	uw.config.driver = _tx.drv
	return uw
}

// String implements the fmt.Stringer.
func (uw *UserWallet) String() string {
	var builder strings.Builder
	builder.WriteString("UserWallet(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uw.ID))
	builder.WriteString("created_at=")
	builder.WriteString(uw.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(uw.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(uw.UserID)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(uw.Type)
	builder.WriteString(", ")
	builder.WriteString("symbol=")
	builder.WriteString(uw.Symbol)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", uw.IsActive))
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(uw.Balance)
	builder.WriteByte(')')
	return builder.String()
}

// UserWallets is a parsable slice of UserWallet.
type UserWallets []*UserWallet
