// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/indikay/wallet-service/ent/predicate"
	"github.com/indikay/wallet-service/ent/userwallet"
	"github.com/rs/xid"
)

// UserWalletQuery is the builder for querying UserWallet entities.
type UserWalletQuery struct {
	config
	ctx        *QueryContext
	order      []userwallet.OrderOption
	inters     []Interceptor
	predicates []predicate.UserWallet
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserWalletQuery builder.
func (uwq *UserWalletQuery) Where(ps ...predicate.UserWallet) *UserWalletQuery {
	uwq.predicates = append(uwq.predicates, ps...)
	return uwq
}

// Limit the number of records to be returned by this query.
func (uwq *UserWalletQuery) Limit(limit int) *UserWalletQuery {
	uwq.ctx.Limit = &limit
	return uwq
}

// Offset to start from.
func (uwq *UserWalletQuery) Offset(offset int) *UserWalletQuery {
	uwq.ctx.Offset = &offset
	return uwq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uwq *UserWalletQuery) Unique(unique bool) *UserWalletQuery {
	uwq.ctx.Unique = &unique
	return uwq
}

// Order specifies how the records should be ordered.
func (uwq *UserWalletQuery) Order(o ...userwallet.OrderOption) *UserWalletQuery {
	uwq.order = append(uwq.order, o...)
	return uwq
}

// First returns the first UserWallet entity from the query.
// Returns a *NotFoundError when no UserWallet was found.
func (uwq *UserWalletQuery) First(ctx context.Context) (*UserWallet, error) {
	nodes, err := uwq.Limit(1).All(setContextOp(ctx, uwq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{userwallet.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uwq *UserWalletQuery) FirstX(ctx context.Context) *UserWallet {
	node, err := uwq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserWallet ID from the query.
// Returns a *NotFoundError when no UserWallet ID was found.
func (uwq *UserWalletQuery) FirstID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = uwq.Limit(1).IDs(setContextOp(ctx, uwq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{userwallet.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uwq *UserWalletQuery) FirstIDX(ctx context.Context) xid.ID {
	id, err := uwq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserWallet entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserWallet entity is found.
// Returns a *NotFoundError when no UserWallet entities are found.
func (uwq *UserWalletQuery) Only(ctx context.Context) (*UserWallet, error) {
	nodes, err := uwq.Limit(2).All(setContextOp(ctx, uwq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{userwallet.Label}
	default:
		return nil, &NotSingularError{userwallet.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uwq *UserWalletQuery) OnlyX(ctx context.Context) *UserWallet {
	node, err := uwq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserWallet ID in the query.
// Returns a *NotSingularError when more than one UserWallet ID is found.
// Returns a *NotFoundError when no entities are found.
func (uwq *UserWalletQuery) OnlyID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = uwq.Limit(2).IDs(setContextOp(ctx, uwq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{userwallet.Label}
	default:
		err = &NotSingularError{userwallet.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uwq *UserWalletQuery) OnlyIDX(ctx context.Context) xid.ID {
	id, err := uwq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserWallets.
func (uwq *UserWalletQuery) All(ctx context.Context) ([]*UserWallet, error) {
	ctx = setContextOp(ctx, uwq.ctx, "All")
	if err := uwq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserWallet, *UserWalletQuery]()
	return withInterceptors[[]*UserWallet](ctx, uwq, qr, uwq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uwq *UserWalletQuery) AllX(ctx context.Context) []*UserWallet {
	nodes, err := uwq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserWallet IDs.
func (uwq *UserWalletQuery) IDs(ctx context.Context) (ids []xid.ID, err error) {
	if uwq.ctx.Unique == nil && uwq.path != nil {
		uwq.Unique(true)
	}
	ctx = setContextOp(ctx, uwq.ctx, "IDs")
	if err = uwq.Select(userwallet.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uwq *UserWalletQuery) IDsX(ctx context.Context) []xid.ID {
	ids, err := uwq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uwq *UserWalletQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uwq.ctx, "Count")
	if err := uwq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uwq, querierCount[*UserWalletQuery](), uwq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uwq *UserWalletQuery) CountX(ctx context.Context) int {
	count, err := uwq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uwq *UserWalletQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uwq.ctx, "Exist")
	switch _, err := uwq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uwq *UserWalletQuery) ExistX(ctx context.Context) bool {
	exist, err := uwq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserWalletQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uwq *UserWalletQuery) Clone() *UserWalletQuery {
	if uwq == nil {
		return nil
	}
	return &UserWalletQuery{
		config:     uwq.config,
		ctx:        uwq.ctx.Clone(),
		order:      append([]userwallet.OrderOption{}, uwq.order...),
		inters:     append([]Interceptor{}, uwq.inters...),
		predicates: append([]predicate.UserWallet{}, uwq.predicates...),
		// clone intermediate query.
		sql:  uwq.sql.Clone(),
		path: uwq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserWallet.Query().
//		GroupBy(userwallet.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uwq *UserWalletQuery) GroupBy(field string, fields ...string) *UserWalletGroupBy {
	uwq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserWalletGroupBy{build: uwq}
	grbuild.flds = &uwq.ctx.Fields
	grbuild.label = userwallet.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.UserWallet.Query().
//		Select(userwallet.FieldCreatedAt).
//		Scan(ctx, &v)
func (uwq *UserWalletQuery) Select(fields ...string) *UserWalletSelect {
	uwq.ctx.Fields = append(uwq.ctx.Fields, fields...)
	sbuild := &UserWalletSelect{UserWalletQuery: uwq}
	sbuild.label = userwallet.Label
	sbuild.flds, sbuild.scan = &uwq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserWalletSelect configured with the given aggregations.
func (uwq *UserWalletQuery) Aggregate(fns ...AggregateFunc) *UserWalletSelect {
	return uwq.Select().Aggregate(fns...)
}

func (uwq *UserWalletQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uwq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uwq); err != nil {
				return err
			}
		}
	}
	for _, f := range uwq.ctx.Fields {
		if !userwallet.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uwq.path != nil {
		prev, err := uwq.path(ctx)
		if err != nil {
			return err
		}
		uwq.sql = prev
	}
	return nil
}

func (uwq *UserWalletQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserWallet, error) {
	var (
		nodes = []*UserWallet{}
		_spec = uwq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserWallet).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserWallet{config: uwq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(uwq.modifiers) > 0 {
		_spec.Modifiers = uwq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uwq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (uwq *UserWalletQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uwq.querySpec()
	if len(uwq.modifiers) > 0 {
		_spec.Modifiers = uwq.modifiers
	}
	_spec.Node.Columns = uwq.ctx.Fields
	if len(uwq.ctx.Fields) > 0 {
		_spec.Unique = uwq.ctx.Unique != nil && *uwq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uwq.driver, _spec)
}

func (uwq *UserWalletQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(userwallet.Table, userwallet.Columns, sqlgraph.NewFieldSpec(userwallet.FieldID, field.TypeString))
	_spec.From = uwq.sql
	if unique := uwq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uwq.path != nil {
		_spec.Unique = true
	}
	if fields := uwq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userwallet.FieldID)
		for i := range fields {
			if fields[i] != userwallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uwq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uwq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uwq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uwq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uwq *UserWalletQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uwq.driver.Dialect())
	t1 := builder.Table(userwallet.Table)
	columns := uwq.ctx.Fields
	if len(columns) == 0 {
		columns = userwallet.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uwq.sql != nil {
		selector = uwq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uwq.ctx.Unique != nil && *uwq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range uwq.modifiers {
		m(selector)
	}
	for _, p := range uwq.predicates {
		p(selector)
	}
	for _, p := range uwq.order {
		p(selector)
	}
	if offset := uwq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uwq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (uwq *UserWalletQuery) Modify(modifiers ...func(s *sql.Selector)) *UserWalletSelect {
	uwq.modifiers = append(uwq.modifiers, modifiers...)
	return uwq.Select()
}

// UserWalletGroupBy is the group-by builder for UserWallet entities.
type UserWalletGroupBy struct {
	selector
	build *UserWalletQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (uwgb *UserWalletGroupBy) Aggregate(fns ...AggregateFunc) *UserWalletGroupBy {
	uwgb.fns = append(uwgb.fns, fns...)
	return uwgb
}

// Scan applies the selector query and scans the result into the given value.
func (uwgb *UserWalletGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uwgb.build.ctx, "GroupBy")
	if err := uwgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserWalletQuery, *UserWalletGroupBy](ctx, uwgb.build, uwgb, uwgb.build.inters, v)
}

func (uwgb *UserWalletGroupBy) sqlScan(ctx context.Context, root *UserWalletQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(uwgb.fns))
	for _, fn := range uwgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*uwgb.flds)+len(uwgb.fns))
		for _, f := range *uwgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*uwgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uwgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserWalletSelect is the builder for selecting fields of UserWallet entities.
type UserWalletSelect struct {
	*UserWalletQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (uws *UserWalletSelect) Aggregate(fns ...AggregateFunc) *UserWalletSelect {
	uws.fns = append(uws.fns, fns...)
	return uws
}

// Scan applies the selector query and scans the result into the given value.
func (uws *UserWalletSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uws.ctx, "Select")
	if err := uws.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserWalletQuery, *UserWalletSelect](ctx, uws.UserWalletQuery, uws, uws.inters, v)
}

func (uws *UserWalletSelect) sqlScan(ctx context.Context, root *UserWalletQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(uws.fns))
	for _, fn := range uws.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*uws.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uws.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (uws *UserWalletSelect) Modify(modifiers ...func(s *sql.Selector)) *UserWalletSelect {
	uws.modifiers = append(uws.modifiers, modifiers...)
	return uws
}
