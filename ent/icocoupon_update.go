// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/indikay/wallet-service/ent/icocoupon"
	"github.com/indikay/wallet-service/ent/predicate"
)

// IcoCouponUpdate is the builder for updating IcoCoupon entities.
type IcoCouponUpdate struct {
	config
	hooks     []Hook
	mutation  *IcoCouponMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IcoCouponUpdate builder.
func (icu *IcoCouponUpdate) Where(ps ...predicate.IcoCoupon) *IcoCouponUpdate {
	icu.mutation.Where(ps...)
	return icu
}

// SetUpdatedAt sets the "updated_at" field.
func (icu *IcoCouponUpdate) SetUpdatedAt(t time.Time) *IcoCouponUpdate {
	icu.mutation.SetUpdatedAt(t)
	return icu
}

// SetUserID sets the "user_id" field.
func (icu *IcoCouponUpdate) SetUserID(s string) *IcoCouponUpdate {
	icu.mutation.SetUserID(s)
	return icu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (icu *IcoCouponUpdate) SetNillableUserID(s *string) *IcoCouponUpdate {
	if s != nil {
		icu.SetUserID(*s)
	}
	return icu
}

// SetCoupon sets the "coupon" field.
func (icu *IcoCouponUpdate) SetCoupon(s string) *IcoCouponUpdate {
	icu.mutation.SetCoupon(s)
	return icu
}

// SetNillableCoupon sets the "coupon" field if the given value is not nil.
func (icu *IcoCouponUpdate) SetNillableCoupon(s *string) *IcoCouponUpdate {
	if s != nil {
		icu.SetCoupon(*s)
	}
	return icu
}

// SetReward sets the "reward" field.
func (icu *IcoCouponUpdate) SetReward(s string) *IcoCouponUpdate {
	icu.mutation.SetReward(s)
	return icu
}

// SetNillableReward sets the "reward" field if the given value is not nil.
func (icu *IcoCouponUpdate) SetNillableReward(s *string) *IcoCouponUpdate {
	if s != nil {
		icu.SetReward(*s)
	}
	return icu
}

// SetCashback sets the "cashback" field.
func (icu *IcoCouponUpdate) SetCashback(s string) *IcoCouponUpdate {
	icu.mutation.SetCashback(s)
	return icu
}

// SetNillableCashback sets the "cashback" field if the given value is not nil.
func (icu *IcoCouponUpdate) SetNillableCashback(s *string) *IcoCouponUpdate {
	if s != nil {
		icu.SetCashback(*s)
	}
	return icu
}

// SetDeletedAt sets the "deleted_at" field.
func (icu *IcoCouponUpdate) SetDeletedAt(t time.Time) *IcoCouponUpdate {
	icu.mutation.SetDeletedAt(t)
	return icu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (icu *IcoCouponUpdate) SetNillableDeletedAt(t *time.Time) *IcoCouponUpdate {
	if t != nil {
		icu.SetDeletedAt(*t)
	}
	return icu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (icu *IcoCouponUpdate) ClearDeletedAt() *IcoCouponUpdate {
	icu.mutation.ClearDeletedAt()
	return icu
}

// Mutation returns the IcoCouponMutation object of the builder.
func (icu *IcoCouponUpdate) Mutation() *IcoCouponMutation {
	return icu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (icu *IcoCouponUpdate) Save(ctx context.Context) (int, error) {
	icu.defaults()
	return withHooks(ctx, icu.sqlSave, icu.mutation, icu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (icu *IcoCouponUpdate) SaveX(ctx context.Context) int {
	affected, err := icu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (icu *IcoCouponUpdate) Exec(ctx context.Context) error {
	_, err := icu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icu *IcoCouponUpdate) ExecX(ctx context.Context) {
	if err := icu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (icu *IcoCouponUpdate) defaults() {
	if _, ok := icu.mutation.UpdatedAt(); !ok {
		v := icocoupon.UpdateDefaultUpdatedAt()
		icu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (icu *IcoCouponUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IcoCouponUpdate {
	icu.modifiers = append(icu.modifiers, modifiers...)
	return icu
}

func (icu *IcoCouponUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(icocoupon.Table, icocoupon.Columns, sqlgraph.NewFieldSpec(icocoupon.FieldID, field.TypeString))
	if ps := icu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := icu.mutation.UpdatedAt(); ok {
		_spec.SetField(icocoupon.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := icu.mutation.UserID(); ok {
		_spec.SetField(icocoupon.FieldUserID, field.TypeString, value)
	}
	if value, ok := icu.mutation.Coupon(); ok {
		_spec.SetField(icocoupon.FieldCoupon, field.TypeString, value)
	}
	if value, ok := icu.mutation.Reward(); ok {
		_spec.SetField(icocoupon.FieldReward, field.TypeString, value)
	}
	if value, ok := icu.mutation.Cashback(); ok {
		_spec.SetField(icocoupon.FieldCashback, field.TypeString, value)
	}
	if value, ok := icu.mutation.DeletedAt(); ok {
		_spec.SetField(icocoupon.FieldDeletedAt, field.TypeTime, value)
	}
	if icu.mutation.DeletedAtCleared() {
		_spec.ClearField(icocoupon.FieldDeletedAt, field.TypeTime)
	}
	_spec.AddModifiers(icu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, icu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{icocoupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	icu.mutation.done = true
	return n, nil
}

// IcoCouponUpdateOne is the builder for updating a single IcoCoupon entity.
type IcoCouponUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IcoCouponMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (icuo *IcoCouponUpdateOne) SetUpdatedAt(t time.Time) *IcoCouponUpdateOne {
	icuo.mutation.SetUpdatedAt(t)
	return icuo
}

// SetUserID sets the "user_id" field.
func (icuo *IcoCouponUpdateOne) SetUserID(s string) *IcoCouponUpdateOne {
	icuo.mutation.SetUserID(s)
	return icuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (icuo *IcoCouponUpdateOne) SetNillableUserID(s *string) *IcoCouponUpdateOne {
	if s != nil {
		icuo.SetUserID(*s)
	}
	return icuo
}

// SetCoupon sets the "coupon" field.
func (icuo *IcoCouponUpdateOne) SetCoupon(s string) *IcoCouponUpdateOne {
	icuo.mutation.SetCoupon(s)
	return icuo
}

// SetNillableCoupon sets the "coupon" field if the given value is not nil.
func (icuo *IcoCouponUpdateOne) SetNillableCoupon(s *string) *IcoCouponUpdateOne {
	if s != nil {
		icuo.SetCoupon(*s)
	}
	return icuo
}

// SetReward sets the "reward" field.
func (icuo *IcoCouponUpdateOne) SetReward(s string) *IcoCouponUpdateOne {
	icuo.mutation.SetReward(s)
	return icuo
}

// SetNillableReward sets the "reward" field if the given value is not nil.
func (icuo *IcoCouponUpdateOne) SetNillableReward(s *string) *IcoCouponUpdateOne {
	if s != nil {
		icuo.SetReward(*s)
	}
	return icuo
}

// SetCashback sets the "cashback" field.
func (icuo *IcoCouponUpdateOne) SetCashback(s string) *IcoCouponUpdateOne {
	icuo.mutation.SetCashback(s)
	return icuo
}

// SetNillableCashback sets the "cashback" field if the given value is not nil.
func (icuo *IcoCouponUpdateOne) SetNillableCashback(s *string) *IcoCouponUpdateOne {
	if s != nil {
		icuo.SetCashback(*s)
	}
	return icuo
}

// SetDeletedAt sets the "deleted_at" field.
func (icuo *IcoCouponUpdateOne) SetDeletedAt(t time.Time) *IcoCouponUpdateOne {
	icuo.mutation.SetDeletedAt(t)
	return icuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (icuo *IcoCouponUpdateOne) SetNillableDeletedAt(t *time.Time) *IcoCouponUpdateOne {
	if t != nil {
		icuo.SetDeletedAt(*t)
	}
	return icuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (icuo *IcoCouponUpdateOne) ClearDeletedAt() *IcoCouponUpdateOne {
	icuo.mutation.ClearDeletedAt()
	return icuo
}

// Mutation returns the IcoCouponMutation object of the builder.
func (icuo *IcoCouponUpdateOne) Mutation() *IcoCouponMutation {
	return icuo.mutation
}

// Where appends a list predicates to the IcoCouponUpdate builder.
func (icuo *IcoCouponUpdateOne) Where(ps ...predicate.IcoCoupon) *IcoCouponUpdateOne {
	icuo.mutation.Where(ps...)
	return icuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (icuo *IcoCouponUpdateOne) Select(field string, fields ...string) *IcoCouponUpdateOne {
	icuo.fields = append([]string{field}, fields...)
	return icuo
}

// Save executes the query and returns the updated IcoCoupon entity.
func (icuo *IcoCouponUpdateOne) Save(ctx context.Context) (*IcoCoupon, error) {
	icuo.defaults()
	return withHooks(ctx, icuo.sqlSave, icuo.mutation, icuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (icuo *IcoCouponUpdateOne) SaveX(ctx context.Context) *IcoCoupon {
	node, err := icuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (icuo *IcoCouponUpdateOne) Exec(ctx context.Context) error {
	_, err := icuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icuo *IcoCouponUpdateOne) ExecX(ctx context.Context) {
	if err := icuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (icuo *IcoCouponUpdateOne) defaults() {
	if _, ok := icuo.mutation.UpdatedAt(); !ok {
		v := icocoupon.UpdateDefaultUpdatedAt()
		icuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (icuo *IcoCouponUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IcoCouponUpdateOne {
	icuo.modifiers = append(icuo.modifiers, modifiers...)
	return icuo
}

func (icuo *IcoCouponUpdateOne) sqlSave(ctx context.Context) (_node *IcoCoupon, err error) {
	_spec := sqlgraph.NewUpdateSpec(icocoupon.Table, icocoupon.Columns, sqlgraph.NewFieldSpec(icocoupon.FieldID, field.TypeString))
	id, ok := icuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IcoCoupon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := icuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, icocoupon.FieldID)
		for _, f := range fields {
			if !icocoupon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != icocoupon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := icuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := icuo.mutation.UpdatedAt(); ok {
		_spec.SetField(icocoupon.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := icuo.mutation.UserID(); ok {
		_spec.SetField(icocoupon.FieldUserID, field.TypeString, value)
	}
	if value, ok := icuo.mutation.Coupon(); ok {
		_spec.SetField(icocoupon.FieldCoupon, field.TypeString, value)
	}
	if value, ok := icuo.mutation.Reward(); ok {
		_spec.SetField(icocoupon.FieldReward, field.TypeString, value)
	}
	if value, ok := icuo.mutation.Cashback(); ok {
		_spec.SetField(icocoupon.FieldCashback, field.TypeString, value)
	}
	if value, ok := icuo.mutation.DeletedAt(); ok {
		_spec.SetField(icocoupon.FieldDeletedAt, field.TypeTime, value)
	}
	if icuo.mutation.DeletedAtCleared() {
		_spec.ClearField(icocoupon.FieldDeletedAt, field.TypeTime)
	}
	_spec.AddModifiers(icuo.modifiers...)
	_node = &IcoCoupon{config: icuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, icuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{icocoupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	icuo.mutation.done = true
	return _node, nil
}
