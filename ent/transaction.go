// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/indikay/wallet-service/ent/transaction"
	"github.com/rs/xid"
)

// Transaction is the model entity for the Transaction schema.
type Transaction struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// TransType holds the value of the "trans_type" field.
	TransType string `json:"trans_type,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// SrcSymbol holds the value of the "src_symbol" field.
	SrcSymbol string `json:"src_symbol,omitempty"`
	// SrcAmount holds the value of the "src_amount" field.
	SrcAmount string `json:"src_amount,omitempty"`
	// Destination holds the value of the "destination" field.
	Destination string `json:"destination,omitempty"`
	// DestSymbol holds the value of the "dest_symbol" field.
	DestSymbol string `json:"dest_symbol,omitempty"`
	// DestAmount holds the value of the "dest_amount" field.
	DestAmount string `json:"dest_amount,omitempty"`
	// Rate holds the value of the "rate" field.
	Rate string `json:"rate,omitempty"`
	// SourceService holds the value of the "source_service" field.
	SourceService string `json:"source_service,omitempty"`
	// SourceID holds the value of the "source_id" field.
	SourceID string `json:"source_id,omitempty"`
	// Status holds the value of the "status" field.
	Status       string `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transaction.FieldTransType, transaction.FieldSource, transaction.FieldSrcSymbol, transaction.FieldSrcAmount, transaction.FieldDestination, transaction.FieldDestSymbol, transaction.FieldDestAmount, transaction.FieldRate, transaction.FieldSourceService, transaction.FieldSourceID, transaction.FieldStatus:
			values[i] = new(sql.NullString)
		case transaction.FieldCreatedAt, transaction.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case transaction.FieldID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transaction fields.
func (t *Transaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case transaction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case transaction.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case transaction.FieldTransType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trans_type", values[i])
			} else if value.Valid {
				t.TransType = value.String
			}
		case transaction.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				t.Source = value.String
			}
		case transaction.FieldSrcSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field src_symbol", values[i])
			} else if value.Valid {
				t.SrcSymbol = value.String
			}
		case transaction.FieldSrcAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field src_amount", values[i])
			} else if value.Valid {
				t.SrcAmount = value.String
			}
		case transaction.FieldDestination:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field destination", values[i])
			} else if value.Valid {
				t.Destination = value.String
			}
		case transaction.FieldDestSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dest_symbol", values[i])
			} else if value.Valid {
				t.DestSymbol = value.String
			}
		case transaction.FieldDestAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dest_amount", values[i])
			} else if value.Valid {
				t.DestAmount = value.String
			}
		case transaction.FieldRate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rate", values[i])
			} else if value.Valid {
				t.Rate = value.String
			}
		case transaction.FieldSourceService:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_service", values[i])
			} else if value.Valid {
				t.SourceService = value.String
			}
		case transaction.FieldSourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_id", values[i])
			} else if value.Valid {
				t.SourceID = value.String
			}
		case transaction.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = value.String
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Transaction.
// This includes values selected through modifiers, order, etc.
func (t *Transaction) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Transaction.
// Note that you need to call Transaction.Unwrap() before calling this method if this Transaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transaction) Update() *TransactionUpdateOne {
	return NewTransactionClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Transaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transaction) Unwrap() *Transaction {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transaction is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transaction) String() string {
	var builder strings.Builder
	builder.WriteString("Transaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("trans_type=")
	builder.WriteString(t.TransType)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(t.Source)
	builder.WriteString(", ")
	builder.WriteString("src_symbol=")
	builder.WriteString(t.SrcSymbol)
	builder.WriteString(", ")
	builder.WriteString("src_amount=")
	builder.WriteString(t.SrcAmount)
	builder.WriteString(", ")
	builder.WriteString("destination=")
	builder.WriteString(t.Destination)
	builder.WriteString(", ")
	builder.WriteString("dest_symbol=")
	builder.WriteString(t.DestSymbol)
	builder.WriteString(", ")
	builder.WriteString("dest_amount=")
	builder.WriteString(t.DestAmount)
	builder.WriteString(", ")
	builder.WriteString("rate=")
	builder.WriteString(t.Rate)
	builder.WriteString(", ")
	builder.WriteString("source_service=")
	builder.WriteString(t.SourceService)
	builder.WriteString(", ")
	builder.WriteString("source_id=")
	builder.WriteString(t.SourceID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(t.Status)
	builder.WriteByte(')')
	return builder.String()
}

// Transactions is a parsable slice of Transaction.
type Transactions []*Transaction
