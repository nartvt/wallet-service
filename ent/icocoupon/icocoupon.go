// Code generated by ent, DO NOT EDIT.

package icocoupon

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the icocoupon type in the database.
	Label = "ico_coupon"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCoupon holds the string denoting the coupon field in the database.
	FieldCoupon = "coupon"
	// FieldReward holds the string denoting the reward field in the database.
	FieldReward = "reward"
	// FieldCashback holds the string denoting the cashback field in the database.
	FieldCashback = "cashback"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// Table holds the table name of the icocoupon in the database.
	Table = "ico_coupons"
)

// Columns holds all SQL columns for icocoupon fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUserID,
	FieldCoupon,
	FieldReward,
	FieldCashback,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the IcoCoupon queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCoupon orders the results by the coupon field.
func ByCoupon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoupon, opts...).ToFunc()
}

// ByReward orders the results by the reward field.
func ByReward(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReward, opts...).ToFunc()
}

// ByCashback orders the results by the cashback field.
func ByCashback(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCashback, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}
