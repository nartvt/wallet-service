// Code generated by ent, DO NOT EDIT.

package icocoupon

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/indikay/wallet-service/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEQ(FieldUserID, v))
}

// Coupon applies equality check predicate on the "coupon" field. It's identical to CouponEQ.
func Coupon(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEQ(FieldCoupon, v))
}

// Reward applies equality check predicate on the "reward" field. It's identical to RewardEQ.
func Reward(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEQ(FieldReward, v))
}

// Cashback applies equality check predicate on the "cashback" field. It's identical to CashbackEQ.
func Cashback(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEQ(FieldCashback, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEQ(FieldDeletedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldContainsFold(FieldUserID, v))
}

// CouponEQ applies the EQ predicate on the "coupon" field.
func CouponEQ(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEQ(FieldCoupon, v))
}

// CouponNEQ applies the NEQ predicate on the "coupon" field.
func CouponNEQ(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldNEQ(FieldCoupon, v))
}

// CouponIn applies the In predicate on the "coupon" field.
func CouponIn(vs ...string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldIn(FieldCoupon, vs...))
}

// CouponNotIn applies the NotIn predicate on the "coupon" field.
func CouponNotIn(vs ...string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldNotIn(FieldCoupon, vs...))
}

// CouponGT applies the GT predicate on the "coupon" field.
func CouponGT(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldGT(FieldCoupon, v))
}

// CouponGTE applies the GTE predicate on the "coupon" field.
func CouponGTE(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldGTE(FieldCoupon, v))
}

// CouponLT applies the LT predicate on the "coupon" field.
func CouponLT(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldLT(FieldCoupon, v))
}

// CouponLTE applies the LTE predicate on the "coupon" field.
func CouponLTE(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldLTE(FieldCoupon, v))
}

// CouponContains applies the Contains predicate on the "coupon" field.
func CouponContains(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldContains(FieldCoupon, v))
}

// CouponHasPrefix applies the HasPrefix predicate on the "coupon" field.
func CouponHasPrefix(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldHasPrefix(FieldCoupon, v))
}

// CouponHasSuffix applies the HasSuffix predicate on the "coupon" field.
func CouponHasSuffix(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldHasSuffix(FieldCoupon, v))
}

// CouponEqualFold applies the EqualFold predicate on the "coupon" field.
func CouponEqualFold(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEqualFold(FieldCoupon, v))
}

// CouponContainsFold applies the ContainsFold predicate on the "coupon" field.
func CouponContainsFold(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldContainsFold(FieldCoupon, v))
}

// RewardEQ applies the EQ predicate on the "reward" field.
func RewardEQ(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEQ(FieldReward, v))
}

// RewardNEQ applies the NEQ predicate on the "reward" field.
func RewardNEQ(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldNEQ(FieldReward, v))
}

// RewardIn applies the In predicate on the "reward" field.
func RewardIn(vs ...string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldIn(FieldReward, vs...))
}

// RewardNotIn applies the NotIn predicate on the "reward" field.
func RewardNotIn(vs ...string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldNotIn(FieldReward, vs...))
}

// RewardGT applies the GT predicate on the "reward" field.
func RewardGT(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldGT(FieldReward, v))
}

// RewardGTE applies the GTE predicate on the "reward" field.
func RewardGTE(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldGTE(FieldReward, v))
}

// RewardLT applies the LT predicate on the "reward" field.
func RewardLT(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldLT(FieldReward, v))
}

// RewardLTE applies the LTE predicate on the "reward" field.
func RewardLTE(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldLTE(FieldReward, v))
}

// RewardContains applies the Contains predicate on the "reward" field.
func RewardContains(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldContains(FieldReward, v))
}

// RewardHasPrefix applies the HasPrefix predicate on the "reward" field.
func RewardHasPrefix(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldHasPrefix(FieldReward, v))
}

// RewardHasSuffix applies the HasSuffix predicate on the "reward" field.
func RewardHasSuffix(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldHasSuffix(FieldReward, v))
}

// RewardEqualFold applies the EqualFold predicate on the "reward" field.
func RewardEqualFold(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEqualFold(FieldReward, v))
}

// RewardContainsFold applies the ContainsFold predicate on the "reward" field.
func RewardContainsFold(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldContainsFold(FieldReward, v))
}

// CashbackEQ applies the EQ predicate on the "cashback" field.
func CashbackEQ(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEQ(FieldCashback, v))
}

// CashbackNEQ applies the NEQ predicate on the "cashback" field.
func CashbackNEQ(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldNEQ(FieldCashback, v))
}

// CashbackIn applies the In predicate on the "cashback" field.
func CashbackIn(vs ...string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldIn(FieldCashback, vs...))
}

// CashbackNotIn applies the NotIn predicate on the "cashback" field.
func CashbackNotIn(vs ...string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldNotIn(FieldCashback, vs...))
}

// CashbackGT applies the GT predicate on the "cashback" field.
func CashbackGT(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldGT(FieldCashback, v))
}

// CashbackGTE applies the GTE predicate on the "cashback" field.
func CashbackGTE(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldGTE(FieldCashback, v))
}

// CashbackLT applies the LT predicate on the "cashback" field.
func CashbackLT(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldLT(FieldCashback, v))
}

// CashbackLTE applies the LTE predicate on the "cashback" field.
func CashbackLTE(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldLTE(FieldCashback, v))
}

// CashbackContains applies the Contains predicate on the "cashback" field.
func CashbackContains(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldContains(FieldCashback, v))
}

// CashbackHasPrefix applies the HasPrefix predicate on the "cashback" field.
func CashbackHasPrefix(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldHasPrefix(FieldCashback, v))
}

// CashbackHasSuffix applies the HasSuffix predicate on the "cashback" field.
func CashbackHasSuffix(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldHasSuffix(FieldCashback, v))
}

// CashbackEqualFold applies the EqualFold predicate on the "cashback" field.
func CashbackEqualFold(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEqualFold(FieldCashback, v))
}

// CashbackContainsFold applies the ContainsFold predicate on the "cashback" field.
func CashbackContainsFold(v string) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldContainsFold(FieldCashback, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.FieldNotNull(FieldDeletedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IcoCoupon) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IcoCoupon) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IcoCoupon) predicate.IcoCoupon {
	return predicate.IcoCoupon(sql.NotPredicates(p))
}
