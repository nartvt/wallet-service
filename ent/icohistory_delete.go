// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/indikay/wallet-service/ent/icohistory"
	"github.com/indikay/wallet-service/ent/predicate"
)

// IcoHistoryDelete is the builder for deleting a IcoHistory entity.
type IcoHistoryDelete struct {
	config
	hooks    []Hook
	mutation *IcoHistoryMutation
}

// Where appends a list predicates to the IcoHistoryDelete builder.
func (ihd *IcoHistoryDelete) Where(ps ...predicate.IcoHistory) *IcoHistoryDelete {
	ihd.mutation.Where(ps...)
	return ihd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ihd *IcoHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ihd.sqlExec, ihd.mutation, ihd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ihd *IcoHistoryDelete) ExecX(ctx context.Context) int {
	n, err := ihd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ihd *IcoHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(icohistory.Table, sqlgraph.NewFieldSpec(icohistory.FieldID, field.TypeString))
	if ps := ihd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ihd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ihd.mutation.done = true
	return affected, err
}

// IcoHistoryDeleteOne is the builder for deleting a single IcoHistory entity.
type IcoHistoryDeleteOne struct {
	ihd *IcoHistoryDelete
}

// Where appends a list predicates to the IcoHistoryDelete builder.
func (ihdo *IcoHistoryDeleteOne) Where(ps ...predicate.IcoHistory) *IcoHistoryDeleteOne {
	ihdo.ihd.mutation.Where(ps...)
	return ihdo
}

// Exec executes the deletion query.
func (ihdo *IcoHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := ihdo.ihd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{icohistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ihdo *IcoHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := ihdo.Exec(ctx); err != nil {
		panic(err)
	}
}
