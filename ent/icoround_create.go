// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/indikay/wallet-service/ent/icoround"
	"github.com/rs/xid"
)

// IcoRoundCreate is the builder for creating a IcoRound entity.
type IcoRoundCreate struct {
	config
	mutation *IcoRoundMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (irc *IcoRoundCreate) SetCreatedAt(t time.Time) *IcoRoundCreate {
	irc.mutation.SetCreatedAt(t)
	return irc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (irc *IcoRoundCreate) SetNillableCreatedAt(t *time.Time) *IcoRoundCreate {
	if t != nil {
		irc.SetCreatedAt(*t)
	}
	return irc
}

// SetUpdatedAt sets the "updated_at" field.
func (irc *IcoRoundCreate) SetUpdatedAt(t time.Time) *IcoRoundCreate {
	irc.mutation.SetUpdatedAt(t)
	return irc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (irc *IcoRoundCreate) SetNillableUpdatedAt(t *time.Time) *IcoRoundCreate {
	if t != nil {
		irc.SetUpdatedAt(*t)
	}
	return irc
}

// SetRoundID sets the "round_id" field.
func (irc *IcoRoundCreate) SetRoundID(i int32) *IcoRoundCreate {
	irc.mutation.SetRoundID(i)
	return irc
}

// SetSubRound sets the "sub_round" field.
func (irc *IcoRoundCreate) SetSubRound(i int32) *IcoRoundCreate {
	irc.mutation.SetSubRound(i)
	return irc
}

// SetPrice sets the "price" field.
func (irc *IcoRoundCreate) SetPrice(s string) *IcoRoundCreate {
	irc.mutation.SetPrice(s)
	return irc
}

// SetNumToken sets the "num_token" field.
func (irc *IcoRoundCreate) SetNumToken(s string) *IcoRoundCreate {
	irc.mutation.SetNumToken(s)
	return irc
}

// SetBoughtToken sets the "bought_token" field.
func (irc *IcoRoundCreate) SetBoughtToken(s string) *IcoRoundCreate {
	irc.mutation.SetBoughtToken(s)
	return irc
}

// SetStartAt sets the "start_at" field.
func (irc *IcoRoundCreate) SetStartAt(t time.Time) *IcoRoundCreate {
	irc.mutation.SetStartAt(t)
	return irc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (irc *IcoRoundCreate) SetNillableStartAt(t *time.Time) *IcoRoundCreate {
	if t != nil {
		irc.SetStartAt(*t)
	}
	return irc
}

// SetEndAt sets the "end_at" field.
func (irc *IcoRoundCreate) SetEndAt(t time.Time) *IcoRoundCreate {
	irc.mutation.SetEndAt(t)
	return irc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (irc *IcoRoundCreate) SetNillableEndAt(t *time.Time) *IcoRoundCreate {
	if t != nil {
		irc.SetEndAt(*t)
	}
	return irc
}

// SetIsClose sets the "is_close" field.
func (irc *IcoRoundCreate) SetIsClose(b bool) *IcoRoundCreate {
	irc.mutation.SetIsClose(b)
	return irc
}

// SetNillableIsClose sets the "is_close" field if the given value is not nil.
func (irc *IcoRoundCreate) SetNillableIsClose(b *bool) *IcoRoundCreate {
	if b != nil {
		irc.SetIsClose(*b)
	}
	return irc
}

// SetID sets the "id" field.
func (irc *IcoRoundCreate) SetID(x xid.ID) *IcoRoundCreate {
	irc.mutation.SetID(x)
	return irc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (irc *IcoRoundCreate) SetNillableID(x *xid.ID) *IcoRoundCreate {
	if x != nil {
		irc.SetID(*x)
	}
	return irc
}

// Mutation returns the IcoRoundMutation object of the builder.
func (irc *IcoRoundCreate) Mutation() *IcoRoundMutation {
	return irc.mutation
}

// Save creates the IcoRound in the database.
func (irc *IcoRoundCreate) Save(ctx context.Context) (*IcoRound, error) {
	irc.defaults()
	return withHooks(ctx, irc.sqlSave, irc.mutation, irc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (irc *IcoRoundCreate) SaveX(ctx context.Context) *IcoRound {
	v, err := irc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (irc *IcoRoundCreate) Exec(ctx context.Context) error {
	_, err := irc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (irc *IcoRoundCreate) ExecX(ctx context.Context) {
	if err := irc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (irc *IcoRoundCreate) defaults() {
	if _, ok := irc.mutation.CreatedAt(); !ok {
		v := icoround.DefaultCreatedAt()
		irc.mutation.SetCreatedAt(v)
	}
	if _, ok := irc.mutation.UpdatedAt(); !ok {
		v := icoround.DefaultUpdatedAt()
		irc.mutation.SetUpdatedAt(v)
	}
	if _, ok := irc.mutation.IsClose(); !ok {
		v := icoround.DefaultIsClose
		irc.mutation.SetIsClose(v)
	}
	if _, ok := irc.mutation.ID(); !ok {
		v := icoround.DefaultID()
		irc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (irc *IcoRoundCreate) check() error {
	if _, ok := irc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IcoRound.created_at"`)}
	}
	if _, ok := irc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "IcoRound.updated_at"`)}
	}
	if _, ok := irc.mutation.RoundID(); !ok {
		return &ValidationError{Name: "round_id", err: errors.New(`ent: missing required field "IcoRound.round_id"`)}
	}
	if _, ok := irc.mutation.SubRound(); !ok {
		return &ValidationError{Name: "sub_round", err: errors.New(`ent: missing required field "IcoRound.sub_round"`)}
	}
	if _, ok := irc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "IcoRound.price"`)}
	}
	if _, ok := irc.mutation.NumToken(); !ok {
		return &ValidationError{Name: "num_token", err: errors.New(`ent: missing required field "IcoRound.num_token"`)}
	}
	if _, ok := irc.mutation.BoughtToken(); !ok {
		return &ValidationError{Name: "bought_token", err: errors.New(`ent: missing required field "IcoRound.bought_token"`)}
	}
	if _, ok := irc.mutation.IsClose(); !ok {
		return &ValidationError{Name: "is_close", err: errors.New(`ent: missing required field "IcoRound.is_close"`)}
	}
	return nil
}

func (irc *IcoRoundCreate) sqlSave(ctx context.Context) (*IcoRound, error) {
	if err := irc.check(); err != nil {
		return nil, err
	}
	_node, _spec := irc.createSpec()
	if err := sqlgraph.CreateNode(ctx, irc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	irc.mutation.id = &_node.ID
	irc.mutation.done = true
	return _node, nil
}

func (irc *IcoRoundCreate) createSpec() (*IcoRound, *sqlgraph.CreateSpec) {
	var (
		_node = &IcoRound{config: irc.config}
		_spec = sqlgraph.NewCreateSpec(icoround.Table, sqlgraph.NewFieldSpec(icoround.FieldID, field.TypeString))
	)
	_spec.OnConflict = irc.conflict
	if id, ok := irc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := irc.mutation.CreatedAt(); ok {
		_spec.SetField(icoround.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := irc.mutation.UpdatedAt(); ok {
		_spec.SetField(icoround.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := irc.mutation.RoundID(); ok {
		_spec.SetField(icoround.FieldRoundID, field.TypeInt32, value)
		_node.RoundID = value
	}
	if value, ok := irc.mutation.SubRound(); ok {
		_spec.SetField(icoround.FieldSubRound, field.TypeInt32, value)
		_node.SubRound = value
	}
	if value, ok := irc.mutation.Price(); ok {
		_spec.SetField(icoround.FieldPrice, field.TypeString, value)
		_node.Price = value
	}
	if value, ok := irc.mutation.NumToken(); ok {
		_spec.SetField(icoround.FieldNumToken, field.TypeString, value)
		_node.NumToken = value
	}
	if value, ok := irc.mutation.BoughtToken(); ok {
		_spec.SetField(icoround.FieldBoughtToken, field.TypeString, value)
		_node.BoughtToken = value
	}
	if value, ok := irc.mutation.StartAt(); ok {
		_spec.SetField(icoround.FieldStartAt, field.TypeTime, value)
		_node.StartAt = &value
	}
	if value, ok := irc.mutation.EndAt(); ok {
		_spec.SetField(icoround.FieldEndAt, field.TypeTime, value)
		_node.EndAt = &value
	}
	if value, ok := irc.mutation.IsClose(); ok {
		_spec.SetField(icoround.FieldIsClose, field.TypeBool, value)
		_node.IsClose = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IcoRound.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IcoRoundUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (irc *IcoRoundCreate) OnConflict(opts ...sql.ConflictOption) *IcoRoundUpsertOne {
	irc.conflict = opts
	return &IcoRoundUpsertOne{
		create: irc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IcoRound.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (irc *IcoRoundCreate) OnConflictColumns(columns ...string) *IcoRoundUpsertOne {
	irc.conflict = append(irc.conflict, sql.ConflictColumns(columns...))
	return &IcoRoundUpsertOne{
		create: irc,
	}
}

type (
	// IcoRoundUpsertOne is the builder for "upsert"-ing
	//  one IcoRound node.
	IcoRoundUpsertOne struct {
		create *IcoRoundCreate
	}

	// IcoRoundUpsert is the "OnConflict" setter.
	IcoRoundUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *IcoRoundUpsert) SetUpdatedAt(v time.Time) *IcoRoundUpsert {
	u.Set(icoround.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IcoRoundUpsert) UpdateUpdatedAt() *IcoRoundUpsert {
	u.SetExcluded(icoround.FieldUpdatedAt)
	return u
}

// SetRoundID sets the "round_id" field.
func (u *IcoRoundUpsert) SetRoundID(v int32) *IcoRoundUpsert {
	u.Set(icoround.FieldRoundID, v)
	return u
}

// UpdateRoundID sets the "round_id" field to the value that was provided on create.
func (u *IcoRoundUpsert) UpdateRoundID() *IcoRoundUpsert {
	u.SetExcluded(icoround.FieldRoundID)
	return u
}

// AddRoundID adds v to the "round_id" field.
func (u *IcoRoundUpsert) AddRoundID(v int32) *IcoRoundUpsert {
	u.Add(icoround.FieldRoundID, v)
	return u
}

// SetSubRound sets the "sub_round" field.
func (u *IcoRoundUpsert) SetSubRound(v int32) *IcoRoundUpsert {
	u.Set(icoround.FieldSubRound, v)
	return u
}

// UpdateSubRound sets the "sub_round" field to the value that was provided on create.
func (u *IcoRoundUpsert) UpdateSubRound() *IcoRoundUpsert {
	u.SetExcluded(icoround.FieldSubRound)
	return u
}

// AddSubRound adds v to the "sub_round" field.
func (u *IcoRoundUpsert) AddSubRound(v int32) *IcoRoundUpsert {
	u.Add(icoround.FieldSubRound, v)
	return u
}

// SetPrice sets the "price" field.
func (u *IcoRoundUpsert) SetPrice(v string) *IcoRoundUpsert {
	u.Set(icoround.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *IcoRoundUpsert) UpdatePrice() *IcoRoundUpsert {
	u.SetExcluded(icoround.FieldPrice)
	return u
}

// SetNumToken sets the "num_token" field.
func (u *IcoRoundUpsert) SetNumToken(v string) *IcoRoundUpsert {
	u.Set(icoround.FieldNumToken, v)
	return u
}

// UpdateNumToken sets the "num_token" field to the value that was provided on create.
func (u *IcoRoundUpsert) UpdateNumToken() *IcoRoundUpsert {
	u.SetExcluded(icoround.FieldNumToken)
	return u
}

// SetBoughtToken sets the "bought_token" field.
func (u *IcoRoundUpsert) SetBoughtToken(v string) *IcoRoundUpsert {
	u.Set(icoround.FieldBoughtToken, v)
	return u
}

// UpdateBoughtToken sets the "bought_token" field to the value that was provided on create.
func (u *IcoRoundUpsert) UpdateBoughtToken() *IcoRoundUpsert {
	u.SetExcluded(icoround.FieldBoughtToken)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *IcoRoundUpsert) SetStartAt(v time.Time) *IcoRoundUpsert {
	u.Set(icoround.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *IcoRoundUpsert) UpdateStartAt() *IcoRoundUpsert {
	u.SetExcluded(icoround.FieldStartAt)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *IcoRoundUpsert) ClearStartAt() *IcoRoundUpsert {
	u.SetNull(icoround.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *IcoRoundUpsert) SetEndAt(v time.Time) *IcoRoundUpsert {
	u.Set(icoround.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *IcoRoundUpsert) UpdateEndAt() *IcoRoundUpsert {
	u.SetExcluded(icoround.FieldEndAt)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *IcoRoundUpsert) ClearEndAt() *IcoRoundUpsert {
	u.SetNull(icoround.FieldEndAt)
	return u
}

// SetIsClose sets the "is_close" field.
func (u *IcoRoundUpsert) SetIsClose(v bool) *IcoRoundUpsert {
	u.Set(icoround.FieldIsClose, v)
	return u
}

// UpdateIsClose sets the "is_close" field to the value that was provided on create.
func (u *IcoRoundUpsert) UpdateIsClose() *IcoRoundUpsert {
	u.SetExcluded(icoround.FieldIsClose)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IcoRound.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(icoround.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IcoRoundUpsertOne) UpdateNewValues() *IcoRoundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(icoround.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(icoround.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IcoRound.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IcoRoundUpsertOne) Ignore() *IcoRoundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IcoRoundUpsertOne) DoNothing() *IcoRoundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IcoRoundCreate.OnConflict
// documentation for more info.
func (u *IcoRoundUpsertOne) Update(set func(*IcoRoundUpsert)) *IcoRoundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IcoRoundUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IcoRoundUpsertOne) SetUpdatedAt(v time.Time) *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IcoRoundUpsertOne) UpdateUpdatedAt() *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetRoundID sets the "round_id" field.
func (u *IcoRoundUpsertOne) SetRoundID(v int32) *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.SetRoundID(v)
	})
}

// AddRoundID adds v to the "round_id" field.
func (u *IcoRoundUpsertOne) AddRoundID(v int32) *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.AddRoundID(v)
	})
}

// UpdateRoundID sets the "round_id" field to the value that was provided on create.
func (u *IcoRoundUpsertOne) UpdateRoundID() *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.UpdateRoundID()
	})
}

// SetSubRound sets the "sub_round" field.
func (u *IcoRoundUpsertOne) SetSubRound(v int32) *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.SetSubRound(v)
	})
}

// AddSubRound adds v to the "sub_round" field.
func (u *IcoRoundUpsertOne) AddSubRound(v int32) *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.AddSubRound(v)
	})
}

// UpdateSubRound sets the "sub_round" field to the value that was provided on create.
func (u *IcoRoundUpsertOne) UpdateSubRound() *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.UpdateSubRound()
	})
}

// SetPrice sets the "price" field.
func (u *IcoRoundUpsertOne) SetPrice(v string) *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *IcoRoundUpsertOne) UpdatePrice() *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.UpdatePrice()
	})
}

// SetNumToken sets the "num_token" field.
func (u *IcoRoundUpsertOne) SetNumToken(v string) *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.SetNumToken(v)
	})
}

// UpdateNumToken sets the "num_token" field to the value that was provided on create.
func (u *IcoRoundUpsertOne) UpdateNumToken() *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.UpdateNumToken()
	})
}

// SetBoughtToken sets the "bought_token" field.
func (u *IcoRoundUpsertOne) SetBoughtToken(v string) *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.SetBoughtToken(v)
	})
}

// UpdateBoughtToken sets the "bought_token" field to the value that was provided on create.
func (u *IcoRoundUpsertOne) UpdateBoughtToken() *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.UpdateBoughtToken()
	})
}

// SetStartAt sets the "start_at" field.
func (u *IcoRoundUpsertOne) SetStartAt(v time.Time) *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *IcoRoundUpsertOne) UpdateStartAt() *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *IcoRoundUpsertOne) ClearStartAt() *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *IcoRoundUpsertOne) SetEndAt(v time.Time) *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *IcoRoundUpsertOne) UpdateEndAt() *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *IcoRoundUpsertOne) ClearEndAt() *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.ClearEndAt()
	})
}

// SetIsClose sets the "is_close" field.
func (u *IcoRoundUpsertOne) SetIsClose(v bool) *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.SetIsClose(v)
	})
}

// UpdateIsClose sets the "is_close" field to the value that was provided on create.
func (u *IcoRoundUpsertOne) UpdateIsClose() *IcoRoundUpsertOne {
	return u.Update(func(s *IcoRoundUpsert) {
		s.UpdateIsClose()
	})
}

// Exec executes the query.
func (u *IcoRoundUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IcoRoundCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IcoRoundUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IcoRoundUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IcoRoundUpsertOne.ID is not supported by MySQL driver. Use IcoRoundUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IcoRoundUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IcoRoundCreateBulk is the builder for creating many IcoRound entities in bulk.
type IcoRoundCreateBulk struct {
	config
	err      error
	builders []*IcoRoundCreate
	conflict []sql.ConflictOption
}

// Save creates the IcoRound entities in the database.
func (ircb *IcoRoundCreateBulk) Save(ctx context.Context) ([]*IcoRound, error) {
	if ircb.err != nil {
		return nil, ircb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ircb.builders))
	nodes := make([]*IcoRound, len(ircb.builders))
	mutators := make([]Mutator, len(ircb.builders))
	for i := range ircb.builders {
		func(i int, root context.Context) {
			builder := ircb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IcoRoundMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ircb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ircb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ircb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ircb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ircb *IcoRoundCreateBulk) SaveX(ctx context.Context) []*IcoRound {
	v, err := ircb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ircb *IcoRoundCreateBulk) Exec(ctx context.Context) error {
	_, err := ircb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ircb *IcoRoundCreateBulk) ExecX(ctx context.Context) {
	if err := ircb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IcoRound.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IcoRoundUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ircb *IcoRoundCreateBulk) OnConflict(opts ...sql.ConflictOption) *IcoRoundUpsertBulk {
	ircb.conflict = opts
	return &IcoRoundUpsertBulk{
		create: ircb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IcoRound.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ircb *IcoRoundCreateBulk) OnConflictColumns(columns ...string) *IcoRoundUpsertBulk {
	ircb.conflict = append(ircb.conflict, sql.ConflictColumns(columns...))
	return &IcoRoundUpsertBulk{
		create: ircb,
	}
}

// IcoRoundUpsertBulk is the builder for "upsert"-ing
// a bulk of IcoRound nodes.
type IcoRoundUpsertBulk struct {
	create *IcoRoundCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IcoRound.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(icoround.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IcoRoundUpsertBulk) UpdateNewValues() *IcoRoundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(icoround.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(icoround.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IcoRound.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IcoRoundUpsertBulk) Ignore() *IcoRoundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IcoRoundUpsertBulk) DoNothing() *IcoRoundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IcoRoundCreateBulk.OnConflict
// documentation for more info.
func (u *IcoRoundUpsertBulk) Update(set func(*IcoRoundUpsert)) *IcoRoundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IcoRoundUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IcoRoundUpsertBulk) SetUpdatedAt(v time.Time) *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IcoRoundUpsertBulk) UpdateUpdatedAt() *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetRoundID sets the "round_id" field.
func (u *IcoRoundUpsertBulk) SetRoundID(v int32) *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.SetRoundID(v)
	})
}

// AddRoundID adds v to the "round_id" field.
func (u *IcoRoundUpsertBulk) AddRoundID(v int32) *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.AddRoundID(v)
	})
}

// UpdateRoundID sets the "round_id" field to the value that was provided on create.
func (u *IcoRoundUpsertBulk) UpdateRoundID() *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.UpdateRoundID()
	})
}

// SetSubRound sets the "sub_round" field.
func (u *IcoRoundUpsertBulk) SetSubRound(v int32) *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.SetSubRound(v)
	})
}

// AddSubRound adds v to the "sub_round" field.
func (u *IcoRoundUpsertBulk) AddSubRound(v int32) *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.AddSubRound(v)
	})
}

// UpdateSubRound sets the "sub_round" field to the value that was provided on create.
func (u *IcoRoundUpsertBulk) UpdateSubRound() *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.UpdateSubRound()
	})
}

// SetPrice sets the "price" field.
func (u *IcoRoundUpsertBulk) SetPrice(v string) *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *IcoRoundUpsertBulk) UpdatePrice() *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.UpdatePrice()
	})
}

// SetNumToken sets the "num_token" field.
func (u *IcoRoundUpsertBulk) SetNumToken(v string) *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.SetNumToken(v)
	})
}

// UpdateNumToken sets the "num_token" field to the value that was provided on create.
func (u *IcoRoundUpsertBulk) UpdateNumToken() *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.UpdateNumToken()
	})
}

// SetBoughtToken sets the "bought_token" field.
func (u *IcoRoundUpsertBulk) SetBoughtToken(v string) *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.SetBoughtToken(v)
	})
}

// UpdateBoughtToken sets the "bought_token" field to the value that was provided on create.
func (u *IcoRoundUpsertBulk) UpdateBoughtToken() *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.UpdateBoughtToken()
	})
}

// SetStartAt sets the "start_at" field.
func (u *IcoRoundUpsertBulk) SetStartAt(v time.Time) *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *IcoRoundUpsertBulk) UpdateStartAt() *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *IcoRoundUpsertBulk) ClearStartAt() *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *IcoRoundUpsertBulk) SetEndAt(v time.Time) *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *IcoRoundUpsertBulk) UpdateEndAt() *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *IcoRoundUpsertBulk) ClearEndAt() *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.ClearEndAt()
	})
}

// SetIsClose sets the "is_close" field.
func (u *IcoRoundUpsertBulk) SetIsClose(v bool) *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.SetIsClose(v)
	})
}

// UpdateIsClose sets the "is_close" field to the value that was provided on create.
func (u *IcoRoundUpsertBulk) UpdateIsClose() *IcoRoundUpsertBulk {
	return u.Update(func(s *IcoRoundUpsert) {
		s.UpdateIsClose()
	})
}

// Exec executes the query.
func (u *IcoRoundUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IcoRoundCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IcoRoundCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IcoRoundUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
