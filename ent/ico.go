// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/indikay/wallet-service/ent/ico"
	"github.com/rs/xid"
)

// Ico is the model entity for the Ico schema.
type Ico struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// RoundID holds the value of the "round_id" field.
	RoundID int32 `json:"round_id,omitempty"`
	// RoundName holds the value of the "round_name" field.
	RoundName string `json:"round_name,omitempty"`
	// Price holds the value of the "price" field.
	Price string `json:"price,omitempty"`
	// NumToken holds the value of the "num_token" field.
	NumToken string `json:"num_token,omitempty"`
	// NumSub holds the value of the "num_sub" field.
	NumSub int32 `json:"num_sub,omitempty"`
	// PriceGap holds the value of the "price_gap" field.
	PriceGap string `json:"price_gap,omitempty"`
	// EndedAt holds the value of the "ended_at" field.
	EndedAt      *time.Time `json:"ended_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ico) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ico.FieldRoundID, ico.FieldNumSub:
			values[i] = new(sql.NullInt64)
		case ico.FieldRoundName, ico.FieldPrice, ico.FieldNumToken, ico.FieldPriceGap:
			values[i] = new(sql.NullString)
		case ico.FieldCreatedAt, ico.FieldUpdatedAt, ico.FieldEndedAt:
			values[i] = new(sql.NullTime)
		case ico.FieldID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ico fields.
func (i *Ico) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case ico.FieldID:
			if value, ok := values[j].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case ico.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case ico.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case ico.FieldRoundID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field round_id", values[j])
			} else if value.Valid {
				i.RoundID = int32(value.Int64)
			}
		case ico.FieldRoundName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field round_name", values[j])
			} else if value.Valid {
				i.RoundName = value.String
			}
		case ico.FieldPrice:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[j])
			} else if value.Valid {
				i.Price = value.String
			}
		case ico.FieldNumToken:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field num_token", values[j])
			} else if value.Valid {
				i.NumToken = value.String
			}
		case ico.FieldNumSub:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num_sub", values[j])
			} else if value.Valid {
				i.NumSub = int32(value.Int64)
			}
		case ico.FieldPriceGap:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price_gap", values[j])
			} else if value.Valid {
				i.PriceGap = value.String
			}
		case ico.FieldEndedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ended_at", values[j])
			} else if value.Valid {
				i.EndedAt = new(time.Time)
				*i.EndedAt = value.Time
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ico.
// This includes values selected through modifiers, order, etc.
func (i *Ico) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// Update returns a builder for updating this Ico.
// Note that you need to call Ico.Unwrap() before calling this method if this Ico
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Ico) Update() *IcoUpdateOne {
	return NewIcoClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Ico entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Ico) Unwrap() *Ico {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ico is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Ico) String() string {
	var builder strings.Builder
	builder.WriteString("Ico(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("round_id=")
	builder.WriteString(fmt.Sprintf("%v", i.RoundID))
	builder.WriteString(", ")
	builder.WriteString("round_name=")
	builder.WriteString(i.RoundName)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(i.Price)
	builder.WriteString(", ")
	builder.WriteString("num_token=")
	builder.WriteString(i.NumToken)
	builder.WriteString(", ")
	builder.WriteString("num_sub=")
	builder.WriteString(fmt.Sprintf("%v", i.NumSub))
	builder.WriteString(", ")
	builder.WriteString("price_gap=")
	builder.WriteString(i.PriceGap)
	builder.WriteString(", ")
	if v := i.EndedAt; v != nil {
		builder.WriteString("ended_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Icos is a parsable slice of Ico.
type Icos []*Ico
