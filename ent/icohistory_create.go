// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/indikay/wallet-service/ent/icohistory"
	"github.com/rs/xid"
)

// IcoHistoryCreate is the builder for creating a IcoHistory entity.
type IcoHistoryCreate struct {
	config
	mutation *IcoHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ihc *IcoHistoryCreate) SetCreatedAt(t time.Time) *IcoHistoryCreate {
	ihc.mutation.SetCreatedAt(t)
	return ihc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ihc *IcoHistoryCreate) SetNillableCreatedAt(t *time.Time) *IcoHistoryCreate {
	if t != nil {
		ihc.SetCreatedAt(*t)
	}
	return ihc
}

// SetUpdatedAt sets the "updated_at" field.
func (ihc *IcoHistoryCreate) SetUpdatedAt(t time.Time) *IcoHistoryCreate {
	ihc.mutation.SetUpdatedAt(t)
	return ihc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ihc *IcoHistoryCreate) SetNillableUpdatedAt(t *time.Time) *IcoHistoryCreate {
	if t != nil {
		ihc.SetUpdatedAt(*t)
	}
	return ihc
}

// SetRoundID sets the "round_id" field.
func (ihc *IcoHistoryCreate) SetRoundID(i int32) *IcoHistoryCreate {
	ihc.mutation.SetRoundID(i)
	return ihc
}

// SetUserID sets the "user_id" field.
func (ihc *IcoHistoryCreate) SetUserID(s string) *IcoHistoryCreate {
	ihc.mutation.SetUserID(s)
	return ihc
}

// SetPrice sets the "price" field.
func (ihc *IcoHistoryCreate) SetPrice(s string) *IcoHistoryCreate {
	ihc.mutation.SetPrice(s)
	return ihc
}

// SetNumToken sets the "num_token" field.
func (ihc *IcoHistoryCreate) SetNumToken(s string) *IcoHistoryCreate {
	ihc.mutation.SetNumToken(s)
	return ihc
}

// SetSubRound sets the "sub_round" field.
func (ihc *IcoHistoryCreate) SetSubRound(i int32) *IcoHistoryCreate {
	ihc.mutation.SetSubRound(i)
	return ihc
}

// SetType sets the "type" field.
func (ihc *IcoHistoryCreate) SetType(s string) *IcoHistoryCreate {
	ihc.mutation.SetType(s)
	return ihc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ihc *IcoHistoryCreate) SetNillableType(s *string) *IcoHistoryCreate {
	if s != nil {
		ihc.SetType(*s)
	}
	return ihc
}

// SetID sets the "id" field.
func (ihc *IcoHistoryCreate) SetID(x xid.ID) *IcoHistoryCreate {
	ihc.mutation.SetID(x)
	return ihc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ihc *IcoHistoryCreate) SetNillableID(x *xid.ID) *IcoHistoryCreate {
	if x != nil {
		ihc.SetID(*x)
	}
	return ihc
}

// Mutation returns the IcoHistoryMutation object of the builder.
func (ihc *IcoHistoryCreate) Mutation() *IcoHistoryMutation {
	return ihc.mutation
}

// Save creates the IcoHistory in the database.
func (ihc *IcoHistoryCreate) Save(ctx context.Context) (*IcoHistory, error) {
	ihc.defaults()
	return withHooks(ctx, ihc.sqlSave, ihc.mutation, ihc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ihc *IcoHistoryCreate) SaveX(ctx context.Context) *IcoHistory {
	v, err := ihc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ihc *IcoHistoryCreate) Exec(ctx context.Context) error {
	_, err := ihc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ihc *IcoHistoryCreate) ExecX(ctx context.Context) {
	if err := ihc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ihc *IcoHistoryCreate) defaults() {
	if _, ok := ihc.mutation.CreatedAt(); !ok {
		v := icohistory.DefaultCreatedAt()
		ihc.mutation.SetCreatedAt(v)
	}
	if _, ok := ihc.mutation.UpdatedAt(); !ok {
		v := icohistory.DefaultUpdatedAt()
		ihc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ihc.mutation.ID(); !ok {
		v := icohistory.DefaultID()
		ihc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ihc *IcoHistoryCreate) check() error {
	if _, ok := ihc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IcoHistory.created_at"`)}
	}
	if _, ok := ihc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "IcoHistory.updated_at"`)}
	}
	if _, ok := ihc.mutation.RoundID(); !ok {
		return &ValidationError{Name: "round_id", err: errors.New(`ent: missing required field "IcoHistory.round_id"`)}
	}
	if _, ok := ihc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "IcoHistory.user_id"`)}
	}
	if _, ok := ihc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "IcoHistory.price"`)}
	}
	if _, ok := ihc.mutation.NumToken(); !ok {
		return &ValidationError{Name: "num_token", err: errors.New(`ent: missing required field "IcoHistory.num_token"`)}
	}
	if _, ok := ihc.mutation.SubRound(); !ok {
		return &ValidationError{Name: "sub_round", err: errors.New(`ent: missing required field "IcoHistory.sub_round"`)}
	}
	return nil
}

func (ihc *IcoHistoryCreate) sqlSave(ctx context.Context) (*IcoHistory, error) {
	if err := ihc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ihc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ihc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ihc.mutation.id = &_node.ID
	ihc.mutation.done = true
	return _node, nil
}

func (ihc *IcoHistoryCreate) createSpec() (*IcoHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &IcoHistory{config: ihc.config}
		_spec = sqlgraph.NewCreateSpec(icohistory.Table, sqlgraph.NewFieldSpec(icohistory.FieldID, field.TypeString))
	)
	_spec.OnConflict = ihc.conflict
	if id, ok := ihc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ihc.mutation.CreatedAt(); ok {
		_spec.SetField(icohistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ihc.mutation.UpdatedAt(); ok {
		_spec.SetField(icohistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ihc.mutation.RoundID(); ok {
		_spec.SetField(icohistory.FieldRoundID, field.TypeInt32, value)
		_node.RoundID = value
	}
	if value, ok := ihc.mutation.UserID(); ok {
		_spec.SetField(icohistory.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := ihc.mutation.Price(); ok {
		_spec.SetField(icohistory.FieldPrice, field.TypeString, value)
		_node.Price = value
	}
	if value, ok := ihc.mutation.NumToken(); ok {
		_spec.SetField(icohistory.FieldNumToken, field.TypeString, value)
		_node.NumToken = value
	}
	if value, ok := ihc.mutation.SubRound(); ok {
		_spec.SetField(icohistory.FieldSubRound, field.TypeInt32, value)
		_node.SubRound = value
	}
	if value, ok := ihc.mutation.GetType(); ok {
		_spec.SetField(icohistory.FieldType, field.TypeString, value)
		_node.Type = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IcoHistory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IcoHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ihc *IcoHistoryCreate) OnConflict(opts ...sql.ConflictOption) *IcoHistoryUpsertOne {
	ihc.conflict = opts
	return &IcoHistoryUpsertOne{
		create: ihc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IcoHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ihc *IcoHistoryCreate) OnConflictColumns(columns ...string) *IcoHistoryUpsertOne {
	ihc.conflict = append(ihc.conflict, sql.ConflictColumns(columns...))
	return &IcoHistoryUpsertOne{
		create: ihc,
	}
}

type (
	// IcoHistoryUpsertOne is the builder for "upsert"-ing
	//  one IcoHistory node.
	IcoHistoryUpsertOne struct {
		create *IcoHistoryCreate
	}

	// IcoHistoryUpsert is the "OnConflict" setter.
	IcoHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *IcoHistoryUpsert) SetUpdatedAt(v time.Time) *IcoHistoryUpsert {
	u.Set(icohistory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IcoHistoryUpsert) UpdateUpdatedAt() *IcoHistoryUpsert {
	u.SetExcluded(icohistory.FieldUpdatedAt)
	return u
}

// SetRoundID sets the "round_id" field.
func (u *IcoHistoryUpsert) SetRoundID(v int32) *IcoHistoryUpsert {
	u.Set(icohistory.FieldRoundID, v)
	return u
}

// UpdateRoundID sets the "round_id" field to the value that was provided on create.
func (u *IcoHistoryUpsert) UpdateRoundID() *IcoHistoryUpsert {
	u.SetExcluded(icohistory.FieldRoundID)
	return u
}

// AddRoundID adds v to the "round_id" field.
func (u *IcoHistoryUpsert) AddRoundID(v int32) *IcoHistoryUpsert {
	u.Add(icohistory.FieldRoundID, v)
	return u
}

// SetUserID sets the "user_id" field.
func (u *IcoHistoryUpsert) SetUserID(v string) *IcoHistoryUpsert {
	u.Set(icohistory.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IcoHistoryUpsert) UpdateUserID() *IcoHistoryUpsert {
	u.SetExcluded(icohistory.FieldUserID)
	return u
}

// SetPrice sets the "price" field.
func (u *IcoHistoryUpsert) SetPrice(v string) *IcoHistoryUpsert {
	u.Set(icohistory.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *IcoHistoryUpsert) UpdatePrice() *IcoHistoryUpsert {
	u.SetExcluded(icohistory.FieldPrice)
	return u
}

// SetNumToken sets the "num_token" field.
func (u *IcoHistoryUpsert) SetNumToken(v string) *IcoHistoryUpsert {
	u.Set(icohistory.FieldNumToken, v)
	return u
}

// UpdateNumToken sets the "num_token" field to the value that was provided on create.
func (u *IcoHistoryUpsert) UpdateNumToken() *IcoHistoryUpsert {
	u.SetExcluded(icohistory.FieldNumToken)
	return u
}

// SetSubRound sets the "sub_round" field.
func (u *IcoHistoryUpsert) SetSubRound(v int32) *IcoHistoryUpsert {
	u.Set(icohistory.FieldSubRound, v)
	return u
}

// UpdateSubRound sets the "sub_round" field to the value that was provided on create.
func (u *IcoHistoryUpsert) UpdateSubRound() *IcoHistoryUpsert {
	u.SetExcluded(icohistory.FieldSubRound)
	return u
}

// AddSubRound adds v to the "sub_round" field.
func (u *IcoHistoryUpsert) AddSubRound(v int32) *IcoHistoryUpsert {
	u.Add(icohistory.FieldSubRound, v)
	return u
}

// SetType sets the "type" field.
func (u *IcoHistoryUpsert) SetType(v string) *IcoHistoryUpsert {
	u.Set(icohistory.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IcoHistoryUpsert) UpdateType() *IcoHistoryUpsert {
	u.SetExcluded(icohistory.FieldType)
	return u
}

// ClearType clears the value of the "type" field.
func (u *IcoHistoryUpsert) ClearType() *IcoHistoryUpsert {
	u.SetNull(icohistory.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IcoHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(icohistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IcoHistoryUpsertOne) UpdateNewValues() *IcoHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(icohistory.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(icohistory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IcoHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IcoHistoryUpsertOne) Ignore() *IcoHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IcoHistoryUpsertOne) DoNothing() *IcoHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IcoHistoryCreate.OnConflict
// documentation for more info.
func (u *IcoHistoryUpsertOne) Update(set func(*IcoHistoryUpsert)) *IcoHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IcoHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IcoHistoryUpsertOne) SetUpdatedAt(v time.Time) *IcoHistoryUpsertOne {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IcoHistoryUpsertOne) UpdateUpdatedAt() *IcoHistoryUpsertOne {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetRoundID sets the "round_id" field.
func (u *IcoHistoryUpsertOne) SetRoundID(v int32) *IcoHistoryUpsertOne {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.SetRoundID(v)
	})
}

// AddRoundID adds v to the "round_id" field.
func (u *IcoHistoryUpsertOne) AddRoundID(v int32) *IcoHistoryUpsertOne {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.AddRoundID(v)
	})
}

// UpdateRoundID sets the "round_id" field to the value that was provided on create.
func (u *IcoHistoryUpsertOne) UpdateRoundID() *IcoHistoryUpsertOne {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.UpdateRoundID()
	})
}

// SetUserID sets the "user_id" field.
func (u *IcoHistoryUpsertOne) SetUserID(v string) *IcoHistoryUpsertOne {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IcoHistoryUpsertOne) UpdateUserID() *IcoHistoryUpsertOne {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.UpdateUserID()
	})
}

// SetPrice sets the "price" field.
func (u *IcoHistoryUpsertOne) SetPrice(v string) *IcoHistoryUpsertOne {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *IcoHistoryUpsertOne) UpdatePrice() *IcoHistoryUpsertOne {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.UpdatePrice()
	})
}

// SetNumToken sets the "num_token" field.
func (u *IcoHistoryUpsertOne) SetNumToken(v string) *IcoHistoryUpsertOne {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.SetNumToken(v)
	})
}

// UpdateNumToken sets the "num_token" field to the value that was provided on create.
func (u *IcoHistoryUpsertOne) UpdateNumToken() *IcoHistoryUpsertOne {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.UpdateNumToken()
	})
}

// SetSubRound sets the "sub_round" field.
func (u *IcoHistoryUpsertOne) SetSubRound(v int32) *IcoHistoryUpsertOne {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.SetSubRound(v)
	})
}

// AddSubRound adds v to the "sub_round" field.
func (u *IcoHistoryUpsertOne) AddSubRound(v int32) *IcoHistoryUpsertOne {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.AddSubRound(v)
	})
}

// UpdateSubRound sets the "sub_round" field to the value that was provided on create.
func (u *IcoHistoryUpsertOne) UpdateSubRound() *IcoHistoryUpsertOne {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.UpdateSubRound()
	})
}

// SetType sets the "type" field.
func (u *IcoHistoryUpsertOne) SetType(v string) *IcoHistoryUpsertOne {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IcoHistoryUpsertOne) UpdateType() *IcoHistoryUpsertOne {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *IcoHistoryUpsertOne) ClearType() *IcoHistoryUpsertOne {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.ClearType()
	})
}

// Exec executes the query.
func (u *IcoHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IcoHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IcoHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IcoHistoryUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IcoHistoryUpsertOne.ID is not supported by MySQL driver. Use IcoHistoryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IcoHistoryUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IcoHistoryCreateBulk is the builder for creating many IcoHistory entities in bulk.
type IcoHistoryCreateBulk struct {
	config
	err      error
	builders []*IcoHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the IcoHistory entities in the database.
func (ihcb *IcoHistoryCreateBulk) Save(ctx context.Context) ([]*IcoHistory, error) {
	if ihcb.err != nil {
		return nil, ihcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ihcb.builders))
	nodes := make([]*IcoHistory, len(ihcb.builders))
	mutators := make([]Mutator, len(ihcb.builders))
	for i := range ihcb.builders {
		func(i int, root context.Context) {
			builder := ihcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IcoHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ihcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ihcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ihcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ihcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ihcb *IcoHistoryCreateBulk) SaveX(ctx context.Context) []*IcoHistory {
	v, err := ihcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ihcb *IcoHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ihcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ihcb *IcoHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := ihcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IcoHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IcoHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ihcb *IcoHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *IcoHistoryUpsertBulk {
	ihcb.conflict = opts
	return &IcoHistoryUpsertBulk{
		create: ihcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IcoHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ihcb *IcoHistoryCreateBulk) OnConflictColumns(columns ...string) *IcoHistoryUpsertBulk {
	ihcb.conflict = append(ihcb.conflict, sql.ConflictColumns(columns...))
	return &IcoHistoryUpsertBulk{
		create: ihcb,
	}
}

// IcoHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of IcoHistory nodes.
type IcoHistoryUpsertBulk struct {
	create *IcoHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IcoHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(icohistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IcoHistoryUpsertBulk) UpdateNewValues() *IcoHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(icohistory.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(icohistory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IcoHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IcoHistoryUpsertBulk) Ignore() *IcoHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IcoHistoryUpsertBulk) DoNothing() *IcoHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IcoHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *IcoHistoryUpsertBulk) Update(set func(*IcoHistoryUpsert)) *IcoHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IcoHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IcoHistoryUpsertBulk) SetUpdatedAt(v time.Time) *IcoHistoryUpsertBulk {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IcoHistoryUpsertBulk) UpdateUpdatedAt() *IcoHistoryUpsertBulk {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetRoundID sets the "round_id" field.
func (u *IcoHistoryUpsertBulk) SetRoundID(v int32) *IcoHistoryUpsertBulk {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.SetRoundID(v)
	})
}

// AddRoundID adds v to the "round_id" field.
func (u *IcoHistoryUpsertBulk) AddRoundID(v int32) *IcoHistoryUpsertBulk {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.AddRoundID(v)
	})
}

// UpdateRoundID sets the "round_id" field to the value that was provided on create.
func (u *IcoHistoryUpsertBulk) UpdateRoundID() *IcoHistoryUpsertBulk {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.UpdateRoundID()
	})
}

// SetUserID sets the "user_id" field.
func (u *IcoHistoryUpsertBulk) SetUserID(v string) *IcoHistoryUpsertBulk {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IcoHistoryUpsertBulk) UpdateUserID() *IcoHistoryUpsertBulk {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.UpdateUserID()
	})
}

// SetPrice sets the "price" field.
func (u *IcoHistoryUpsertBulk) SetPrice(v string) *IcoHistoryUpsertBulk {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *IcoHistoryUpsertBulk) UpdatePrice() *IcoHistoryUpsertBulk {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.UpdatePrice()
	})
}

// SetNumToken sets the "num_token" field.
func (u *IcoHistoryUpsertBulk) SetNumToken(v string) *IcoHistoryUpsertBulk {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.SetNumToken(v)
	})
}

// UpdateNumToken sets the "num_token" field to the value that was provided on create.
func (u *IcoHistoryUpsertBulk) UpdateNumToken() *IcoHistoryUpsertBulk {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.UpdateNumToken()
	})
}

// SetSubRound sets the "sub_round" field.
func (u *IcoHistoryUpsertBulk) SetSubRound(v int32) *IcoHistoryUpsertBulk {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.SetSubRound(v)
	})
}

// AddSubRound adds v to the "sub_round" field.
func (u *IcoHistoryUpsertBulk) AddSubRound(v int32) *IcoHistoryUpsertBulk {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.AddSubRound(v)
	})
}

// UpdateSubRound sets the "sub_round" field to the value that was provided on create.
func (u *IcoHistoryUpsertBulk) UpdateSubRound() *IcoHistoryUpsertBulk {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.UpdateSubRound()
	})
}

// SetType sets the "type" field.
func (u *IcoHistoryUpsertBulk) SetType(v string) *IcoHistoryUpsertBulk {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *IcoHistoryUpsertBulk) UpdateType() *IcoHistoryUpsertBulk {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *IcoHistoryUpsertBulk) ClearType() *IcoHistoryUpsertBulk {
	return u.Update(func(s *IcoHistoryUpsert) {
		s.ClearType()
	})
}

// Exec executes the query.
func (u *IcoHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IcoHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IcoHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IcoHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
