// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/indikay/wallet-service/ent/icocoupon"
	"github.com/rs/xid"
)

// IcoCoupon is the model entity for the IcoCoupon schema.
type IcoCoupon struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Coupon holds the value of the "coupon" field.
	Coupon string `json:"coupon,omitempty"`
	// Reward holds the value of the "reward" field.
	Reward string `json:"reward,omitempty"`
	// Cashback holds the value of the "cashback" field.
	Cashback string `json:"cashback,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt    *time.Time `json:"deleted_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IcoCoupon) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case icocoupon.FieldUserID, icocoupon.FieldCoupon, icocoupon.FieldReward, icocoupon.FieldCashback:
			values[i] = new(sql.NullString)
		case icocoupon.FieldCreatedAt, icocoupon.FieldUpdatedAt, icocoupon.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case icocoupon.FieldID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IcoCoupon fields.
func (ic *IcoCoupon) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case icocoupon.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ic.ID = *value
			}
		case icocoupon.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ic.CreatedAt = value.Time
			}
		case icocoupon.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ic.UpdatedAt = value.Time
			}
		case icocoupon.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ic.UserID = value.String
			}
		case icocoupon.FieldCoupon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coupon", values[i])
			} else if value.Valid {
				ic.Coupon = value.String
			}
		case icocoupon.FieldReward:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reward", values[i])
			} else if value.Valid {
				ic.Reward = value.String
			}
		case icocoupon.FieldCashback:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cashback", values[i])
			} else if value.Valid {
				ic.Cashback = value.String
			}
		case icocoupon.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ic.DeletedAt = new(time.Time)
				*ic.DeletedAt = value.Time
			}
		default:
			ic.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IcoCoupon.
// This includes values selected through modifiers, order, etc.
func (ic *IcoCoupon) Value(name string) (ent.Value, error) {
	return ic.selectValues.Get(name)
}

// Update returns a builder for updating this IcoCoupon.
// Note that you need to call IcoCoupon.Unwrap() before calling this method if this IcoCoupon
// was returned from a transaction, and the transaction was committed or rolled back.
func (ic *IcoCoupon) Update() *IcoCouponUpdateOne {
	return NewIcoCouponClient(ic.config).UpdateOne(ic)
}

// Unwrap unwraps the IcoCoupon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ic *IcoCoupon) Unwrap() *IcoCoupon {
	_tx, ok := ic.config.driver.(*txDriver)
	if !ok {
		panic("ent: IcoCoupon is not a transactional entity")
	}
	ic.config.driver = _tx.drv
	return ic
}

// String implements the fmt.Stringer.
func (ic *IcoCoupon) String() string {
	var builder strings.Builder
	builder.WriteString("IcoCoupon(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ic.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ic.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ic.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(ic.UserID)
	builder.WriteString(", ")
	builder.WriteString("coupon=")
	builder.WriteString(ic.Coupon)
	builder.WriteString(", ")
	builder.WriteString("reward=")
	builder.WriteString(ic.Reward)
	builder.WriteString(", ")
	builder.WriteString("cashback=")
	builder.WriteString(ic.Cashback)
	builder.WriteString(", ")
	if v := ic.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// IcoCoupons is a parsable slice of IcoCoupon.
type IcoCoupons []*IcoCoupon
