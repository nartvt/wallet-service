// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/indikay/wallet-service/ent/currencyrate"
	"github.com/indikay/wallet-service/ent/predicate"
)

// CurrencyRateUpdate is the builder for updating CurrencyRate entities.
type CurrencyRateUpdate struct {
	config
	hooks     []Hook
	mutation  *CurrencyRateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CurrencyRateUpdate builder.
func (cru *CurrencyRateUpdate) Where(ps ...predicate.CurrencyRate) *CurrencyRateUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetUpdatedAt sets the "updated_at" field.
func (cru *CurrencyRateUpdate) SetUpdatedAt(t time.Time) *CurrencyRateUpdate {
	cru.mutation.SetUpdatedAt(t)
	return cru
}

// SetSymbol sets the "symbol" field.
func (cru *CurrencyRateUpdate) SetSymbol(s string) *CurrencyRateUpdate {
	cru.mutation.SetSymbol(s)
	return cru
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (cru *CurrencyRateUpdate) SetNillableSymbol(s *string) *CurrencyRateUpdate {
	if s != nil {
		cru.SetSymbol(*s)
	}
	return cru
}

// SetRate sets the "rate" field.
func (cru *CurrencyRateUpdate) SetRate(s string) *CurrencyRateUpdate {
	cru.mutation.SetRate(s)
	return cru
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (cru *CurrencyRateUpdate) SetNillableRate(s *string) *CurrencyRateUpdate {
	if s != nil {
		cru.SetRate(*s)
	}
	return cru
}

// SetExpiredAt sets the "expired_at" field.
func (cru *CurrencyRateUpdate) SetExpiredAt(t time.Time) *CurrencyRateUpdate {
	cru.mutation.SetExpiredAt(t)
	return cru
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (cru *CurrencyRateUpdate) SetNillableExpiredAt(t *time.Time) *CurrencyRateUpdate {
	if t != nil {
		cru.SetExpiredAt(*t)
	}
	return cru
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (cru *CurrencyRateUpdate) ClearExpiredAt() *CurrencyRateUpdate {
	cru.mutation.ClearExpiredAt()
	return cru
}

// Mutation returns the CurrencyRateMutation object of the builder.
func (cru *CurrencyRateUpdate) Mutation() *CurrencyRateMutation {
	return cru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *CurrencyRateUpdate) Save(ctx context.Context) (int, error) {
	cru.defaults()
	return withHooks(ctx, cru.sqlSave, cru.mutation, cru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cru *CurrencyRateUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *CurrencyRateUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *CurrencyRateUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cru *CurrencyRateUpdate) defaults() {
	if _, ok := cru.mutation.UpdatedAt(); !ok {
		v := currencyrate.UpdateDefaultUpdatedAt()
		cru.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cru *CurrencyRateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CurrencyRateUpdate {
	cru.modifiers = append(cru.modifiers, modifiers...)
	return cru
}

func (cru *CurrencyRateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(currencyrate.Table, currencyrate.Columns, sqlgraph.NewFieldSpec(currencyrate.FieldID, field.TypeInt))
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.UpdatedAt(); ok {
		_spec.SetField(currencyrate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cru.mutation.Symbol(); ok {
		_spec.SetField(currencyrate.FieldSymbol, field.TypeString, value)
	}
	if value, ok := cru.mutation.Rate(); ok {
		_spec.SetField(currencyrate.FieldRate, field.TypeString, value)
	}
	if value, ok := cru.mutation.ExpiredAt(); ok {
		_spec.SetField(currencyrate.FieldExpiredAt, field.TypeTime, value)
	}
	if cru.mutation.ExpiredAtCleared() {
		_spec.ClearField(currencyrate.FieldExpiredAt, field.TypeTime)
	}
	_spec.AddModifiers(cru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{currencyrate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cru.mutation.done = true
	return n, nil
}

// CurrencyRateUpdateOne is the builder for updating a single CurrencyRate entity.
type CurrencyRateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CurrencyRateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cruo *CurrencyRateUpdateOne) SetUpdatedAt(t time.Time) *CurrencyRateUpdateOne {
	cruo.mutation.SetUpdatedAt(t)
	return cruo
}

// SetSymbol sets the "symbol" field.
func (cruo *CurrencyRateUpdateOne) SetSymbol(s string) *CurrencyRateUpdateOne {
	cruo.mutation.SetSymbol(s)
	return cruo
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (cruo *CurrencyRateUpdateOne) SetNillableSymbol(s *string) *CurrencyRateUpdateOne {
	if s != nil {
		cruo.SetSymbol(*s)
	}
	return cruo
}

// SetRate sets the "rate" field.
func (cruo *CurrencyRateUpdateOne) SetRate(s string) *CurrencyRateUpdateOne {
	cruo.mutation.SetRate(s)
	return cruo
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (cruo *CurrencyRateUpdateOne) SetNillableRate(s *string) *CurrencyRateUpdateOne {
	if s != nil {
		cruo.SetRate(*s)
	}
	return cruo
}

// SetExpiredAt sets the "expired_at" field.
func (cruo *CurrencyRateUpdateOne) SetExpiredAt(t time.Time) *CurrencyRateUpdateOne {
	cruo.mutation.SetExpiredAt(t)
	return cruo
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (cruo *CurrencyRateUpdateOne) SetNillableExpiredAt(t *time.Time) *CurrencyRateUpdateOne {
	if t != nil {
		cruo.SetExpiredAt(*t)
	}
	return cruo
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (cruo *CurrencyRateUpdateOne) ClearExpiredAt() *CurrencyRateUpdateOne {
	cruo.mutation.ClearExpiredAt()
	return cruo
}

// Mutation returns the CurrencyRateMutation object of the builder.
func (cruo *CurrencyRateUpdateOne) Mutation() *CurrencyRateMutation {
	return cruo.mutation
}

// Where appends a list predicates to the CurrencyRateUpdate builder.
func (cruo *CurrencyRateUpdateOne) Where(ps ...predicate.CurrencyRate) *CurrencyRateUpdateOne {
	cruo.mutation.Where(ps...)
	return cruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *CurrencyRateUpdateOne) Select(field string, fields ...string) *CurrencyRateUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated CurrencyRate entity.
func (cruo *CurrencyRateUpdateOne) Save(ctx context.Context) (*CurrencyRate, error) {
	cruo.defaults()
	return withHooks(ctx, cruo.sqlSave, cruo.mutation, cruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *CurrencyRateUpdateOne) SaveX(ctx context.Context) *CurrencyRate {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *CurrencyRateUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *CurrencyRateUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cruo *CurrencyRateUpdateOne) defaults() {
	if _, ok := cruo.mutation.UpdatedAt(); !ok {
		v := currencyrate.UpdateDefaultUpdatedAt()
		cruo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cruo *CurrencyRateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CurrencyRateUpdateOne {
	cruo.modifiers = append(cruo.modifiers, modifiers...)
	return cruo
}

func (cruo *CurrencyRateUpdateOne) sqlSave(ctx context.Context) (_node *CurrencyRate, err error) {
	_spec := sqlgraph.NewUpdateSpec(currencyrate.Table, currencyrate.Columns, sqlgraph.NewFieldSpec(currencyrate.FieldID, field.TypeInt))
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CurrencyRate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, currencyrate.FieldID)
		for _, f := range fields {
			if !currencyrate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != currencyrate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.UpdatedAt(); ok {
		_spec.SetField(currencyrate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cruo.mutation.Symbol(); ok {
		_spec.SetField(currencyrate.FieldSymbol, field.TypeString, value)
	}
	if value, ok := cruo.mutation.Rate(); ok {
		_spec.SetField(currencyrate.FieldRate, field.TypeString, value)
	}
	if value, ok := cruo.mutation.ExpiredAt(); ok {
		_spec.SetField(currencyrate.FieldExpiredAt, field.TypeTime, value)
	}
	if cruo.mutation.ExpiredAtCleared() {
		_spec.ClearField(currencyrate.FieldExpiredAt, field.TypeTime)
	}
	_spec.AddModifiers(cruo.modifiers...)
	_node = &CurrencyRate{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{currencyrate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cruo.mutation.done = true
	return _node, nil
}
