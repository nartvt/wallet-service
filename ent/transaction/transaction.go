// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the transaction type in the database.
	Label = "transaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTransType holds the string denoting the trans_type field in the database.
	FieldTransType = "trans_type"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldSrcSymbol holds the string denoting the src_symbol field in the database.
	FieldSrcSymbol = "src_symbol"
	// FieldSrcAmount holds the string denoting the src_amount field in the database.
	FieldSrcAmount = "src_amount"
	// FieldDestination holds the string denoting the destination field in the database.
	FieldDestination = "destination"
	// FieldDestSymbol holds the string denoting the dest_symbol field in the database.
	FieldDestSymbol = "dest_symbol"
	// FieldDestAmount holds the string denoting the dest_amount field in the database.
	FieldDestAmount = "dest_amount"
	// FieldRate holds the string denoting the rate field in the database.
	FieldRate = "rate"
	// FieldSourceService holds the string denoting the source_service field in the database.
	FieldSourceService = "source_service"
	// FieldSourceID holds the string denoting the source_id field in the database.
	FieldSourceID = "source_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// Table holds the table name of the transaction in the database.
	Table = "transactions"
)

// Columns holds all SQL columns for transaction fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTransType,
	FieldSource,
	FieldSrcSymbol,
	FieldSrcAmount,
	FieldDestination,
	FieldDestSymbol,
	FieldDestAmount,
	FieldRate,
	FieldSourceService,
	FieldSourceID,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the Transaction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTransType orders the results by the trans_type field.
func ByTransType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransType, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// BySrcSymbol orders the results by the src_symbol field.
func BySrcSymbol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSrcSymbol, opts...).ToFunc()
}

// BySrcAmount orders the results by the src_amount field.
func BySrcAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSrcAmount, opts...).ToFunc()
}

// ByDestination orders the results by the destination field.
func ByDestination(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestination, opts...).ToFunc()
}

// ByDestSymbol orders the results by the dest_symbol field.
func ByDestSymbol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestSymbol, opts...).ToFunc()
}

// ByDestAmount orders the results by the dest_amount field.
func ByDestAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestAmount, opts...).ToFunc()
}

// ByRate orders the results by the rate field.
func ByRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRate, opts...).ToFunc()
}

// BySourceService orders the results by the source_service field.
func BySourceService(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceService, opts...).ToFunc()
}

// BySourceID orders the results by the source_id field.
func BySourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}
