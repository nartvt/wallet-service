// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/indikay/wallet-service/ent/icohistory"
	"github.com/rs/xid"
)

// IcoHistory is the model entity for the IcoHistory schema.
type IcoHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// RoundID holds the value of the "round_id" field.
	RoundID int32 `json:"round_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Price holds the value of the "price" field.
	Price string `json:"price,omitempty"`
	// NumToken holds the value of the "num_token" field.
	NumToken string `json:"num_token,omitempty"`
	// SubRound holds the value of the "sub_round" field.
	SubRound int32 `json:"sub_round,omitempty"`
	// Type holds the value of the "type" field.
	Type         string `json:"type,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IcoHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case icohistory.FieldRoundID, icohistory.FieldSubRound:
			values[i] = new(sql.NullInt64)
		case icohistory.FieldUserID, icohistory.FieldPrice, icohistory.FieldNumToken, icohistory.FieldType:
			values[i] = new(sql.NullString)
		case icohistory.FieldCreatedAt, icohistory.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case icohistory.FieldID:
			values[i] = new(xid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IcoHistory fields.
func (ih *IcoHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case icohistory.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ih.ID = *value
			}
		case icohistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ih.CreatedAt = value.Time
			}
		case icohistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ih.UpdatedAt = value.Time
			}
		case icohistory.FieldRoundID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field round_id", values[i])
			} else if value.Valid {
				ih.RoundID = int32(value.Int64)
			}
		case icohistory.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ih.UserID = value.String
			}
		case icohistory.FieldPrice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				ih.Price = value.String
			}
		case icohistory.FieldNumToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field num_token", values[i])
			} else if value.Valid {
				ih.NumToken = value.String
			}
		case icohistory.FieldSubRound:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sub_round", values[i])
			} else if value.Valid {
				ih.SubRound = int32(value.Int64)
			}
		case icohistory.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ih.Type = value.String
			}
		default:
			ih.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IcoHistory.
// This includes values selected through modifiers, order, etc.
func (ih *IcoHistory) Value(name string) (ent.Value, error) {
	return ih.selectValues.Get(name)
}

// Update returns a builder for updating this IcoHistory.
// Note that you need to call IcoHistory.Unwrap() before calling this method if this IcoHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ih *IcoHistory) Update() *IcoHistoryUpdateOne {
	return NewIcoHistoryClient(ih.config).UpdateOne(ih)
}

// Unwrap unwraps the IcoHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ih *IcoHistory) Unwrap() *IcoHistory {
	_tx, ok := ih.config.driver.(*txDriver)
	if !ok {
		panic("ent: IcoHistory is not a transactional entity")
	}
	ih.config.driver = _tx.drv
	return ih
}

// String implements the fmt.Stringer.
func (ih *IcoHistory) String() string {
	var builder strings.Builder
	builder.WriteString("IcoHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ih.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ih.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ih.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("round_id=")
	builder.WriteString(fmt.Sprintf("%v", ih.RoundID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(ih.UserID)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(ih.Price)
	builder.WriteString(", ")
	builder.WriteString("num_token=")
	builder.WriteString(ih.NumToken)
	builder.WriteString(", ")
	builder.WriteString("sub_round=")
	builder.WriteString(fmt.Sprintf("%v", ih.SubRound))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(ih.Type)
	builder.WriteByte(')')
	return builder.String()
}

// IcoHistories is a parsable slice of IcoHistory.
type IcoHistories []*IcoHistory
