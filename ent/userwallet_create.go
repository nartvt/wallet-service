// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/indikay/wallet-service/ent/userwallet"
	"github.com/rs/xid"
)

// UserWalletCreate is the builder for creating a UserWallet entity.
type UserWalletCreate struct {
	config
	mutation *UserWalletMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (uwc *UserWalletCreate) SetCreatedAt(t time.Time) *UserWalletCreate {
	uwc.mutation.SetCreatedAt(t)
	return uwc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uwc *UserWalletCreate) SetNillableCreatedAt(t *time.Time) *UserWalletCreate {
	if t != nil {
		uwc.SetCreatedAt(*t)
	}
	return uwc
}

// SetUpdatedAt sets the "updated_at" field.
func (uwc *UserWalletCreate) SetUpdatedAt(t time.Time) *UserWalletCreate {
	uwc.mutation.SetUpdatedAt(t)
	return uwc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uwc *UserWalletCreate) SetNillableUpdatedAt(t *time.Time) *UserWalletCreate {
	if t != nil {
		uwc.SetUpdatedAt(*t)
	}
	return uwc
}

// SetUserID sets the "user_id" field.
func (uwc *UserWalletCreate) SetUserID(s string) *UserWalletCreate {
	uwc.mutation.SetUserID(s)
	return uwc
}

// SetType sets the "type" field.
func (uwc *UserWalletCreate) SetType(s string) *UserWalletCreate {
	uwc.mutation.SetType(s)
	return uwc
}

// SetSymbol sets the "symbol" field.
func (uwc *UserWalletCreate) SetSymbol(s string) *UserWalletCreate {
	uwc.mutation.SetSymbol(s)
	return uwc
}

// SetIsActive sets the "is_active" field.
func (uwc *UserWalletCreate) SetIsActive(b bool) *UserWalletCreate {
	uwc.mutation.SetIsActive(b)
	return uwc
}

// SetBalance sets the "balance" field.
func (uwc *UserWalletCreate) SetBalance(s string) *UserWalletCreate {
	uwc.mutation.SetBalance(s)
	return uwc
}

// SetID sets the "id" field.
func (uwc *UserWalletCreate) SetID(x xid.ID) *UserWalletCreate {
	uwc.mutation.SetID(x)
	return uwc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uwc *UserWalletCreate) SetNillableID(x *xid.ID) *UserWalletCreate {
	if x != nil {
		uwc.SetID(*x)
	}
	return uwc
}

// Mutation returns the UserWalletMutation object of the builder.
func (uwc *UserWalletCreate) Mutation() *UserWalletMutation {
	return uwc.mutation
}

// Save creates the UserWallet in the database.
func (uwc *UserWalletCreate) Save(ctx context.Context) (*UserWallet, error) {
	uwc.defaults()
	return withHooks(ctx, uwc.sqlSave, uwc.mutation, uwc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uwc *UserWalletCreate) SaveX(ctx context.Context) *UserWallet {
	v, err := uwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uwc *UserWalletCreate) Exec(ctx context.Context) error {
	_, err := uwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwc *UserWalletCreate) ExecX(ctx context.Context) {
	if err := uwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uwc *UserWalletCreate) defaults() {
	if _, ok := uwc.mutation.CreatedAt(); !ok {
		v := userwallet.DefaultCreatedAt()
		uwc.mutation.SetCreatedAt(v)
	}
	if _, ok := uwc.mutation.UpdatedAt(); !ok {
		v := userwallet.DefaultUpdatedAt()
		uwc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uwc.mutation.ID(); !ok {
		v := userwallet.DefaultID()
		uwc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uwc *UserWalletCreate) check() error {
	if _, ok := uwc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserWallet.created_at"`)}
	}
	if _, ok := uwc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserWallet.updated_at"`)}
	}
	if _, ok := uwc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserWallet.user_id"`)}
	}
	if _, ok := uwc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "UserWallet.type"`)}
	}
	if _, ok := uwc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "UserWallet.symbol"`)}
	}
	if _, ok := uwc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "UserWallet.is_active"`)}
	}
	if _, ok := uwc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "UserWallet.balance"`)}
	}
	return nil
}

func (uwc *UserWalletCreate) sqlSave(ctx context.Context) (*UserWallet, error) {
	if err := uwc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uwc.mutation.id = &_node.ID
	uwc.mutation.done = true
	return _node, nil
}

func (uwc *UserWalletCreate) createSpec() (*UserWallet, *sqlgraph.CreateSpec) {
	var (
		_node = &UserWallet{config: uwc.config}
		_spec = sqlgraph.NewCreateSpec(userwallet.Table, sqlgraph.NewFieldSpec(userwallet.FieldID, field.TypeString))
	)
	_spec.OnConflict = uwc.conflict
	if id, ok := uwc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uwc.mutation.CreatedAt(); ok {
		_spec.SetField(userwallet.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uwc.mutation.UpdatedAt(); ok {
		_spec.SetField(userwallet.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uwc.mutation.UserID(); ok {
		_spec.SetField(userwallet.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := uwc.mutation.GetType(); ok {
		_spec.SetField(userwallet.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := uwc.mutation.Symbol(); ok {
		_spec.SetField(userwallet.FieldSymbol, field.TypeString, value)
		_node.Symbol = value
	}
	if value, ok := uwc.mutation.IsActive(); ok {
		_spec.SetField(userwallet.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := uwc.mutation.Balance(); ok {
		_spec.SetField(userwallet.FieldBalance, field.TypeString, value)
		_node.Balance = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserWallet.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserWalletUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (uwc *UserWalletCreate) OnConflict(opts ...sql.ConflictOption) *UserWalletUpsertOne {
	uwc.conflict = opts
	return &UserWalletUpsertOne{
		create: uwc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserWallet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uwc *UserWalletCreate) OnConflictColumns(columns ...string) *UserWalletUpsertOne {
	uwc.conflict = append(uwc.conflict, sql.ConflictColumns(columns...))
	return &UserWalletUpsertOne{
		create: uwc,
	}
}

type (
	// UserWalletUpsertOne is the builder for "upsert"-ing
	//  one UserWallet node.
	UserWalletUpsertOne struct {
		create *UserWalletCreate
	}

	// UserWalletUpsert is the "OnConflict" setter.
	UserWalletUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *UserWalletUpsert) SetUpdatedAt(v time.Time) *UserWalletUpsert {
	u.Set(userwallet.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserWalletUpsert) UpdateUpdatedAt() *UserWalletUpsert {
	u.SetExcluded(userwallet.FieldUpdatedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserWalletUpsert) SetUserID(v string) *UserWalletUpsert {
	u.Set(userwallet.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserWalletUpsert) UpdateUserID() *UserWalletUpsert {
	u.SetExcluded(userwallet.FieldUserID)
	return u
}

// SetType sets the "type" field.
func (u *UserWalletUpsert) SetType(v string) *UserWalletUpsert {
	u.Set(userwallet.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *UserWalletUpsert) UpdateType() *UserWalletUpsert {
	u.SetExcluded(userwallet.FieldType)
	return u
}

// SetSymbol sets the "symbol" field.
func (u *UserWalletUpsert) SetSymbol(v string) *UserWalletUpsert {
	u.Set(userwallet.FieldSymbol, v)
	return u
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *UserWalletUpsert) UpdateSymbol() *UserWalletUpsert {
	u.SetExcluded(userwallet.FieldSymbol)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *UserWalletUpsert) SetIsActive(v bool) *UserWalletUpsert {
	u.Set(userwallet.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *UserWalletUpsert) UpdateIsActive() *UserWalletUpsert {
	u.SetExcluded(userwallet.FieldIsActive)
	return u
}

// SetBalance sets the "balance" field.
func (u *UserWalletUpsert) SetBalance(v string) *UserWalletUpsert {
	u.Set(userwallet.FieldBalance, v)
	return u
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *UserWalletUpsert) UpdateBalance() *UserWalletUpsert {
	u.SetExcluded(userwallet.FieldBalance)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserWallet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userwallet.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserWalletUpsertOne) UpdateNewValues() *UserWalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(userwallet.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(userwallet.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserWallet.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserWalletUpsertOne) Ignore() *UserWalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserWalletUpsertOne) DoNothing() *UserWalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserWalletCreate.OnConflict
// documentation for more info.
func (u *UserWalletUpsertOne) Update(set func(*UserWalletUpsert)) *UserWalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserWalletUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserWalletUpsertOne) SetUpdatedAt(v time.Time) *UserWalletUpsertOne {
	return u.Update(func(s *UserWalletUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserWalletUpsertOne) UpdateUpdatedAt() *UserWalletUpsertOne {
	return u.Update(func(s *UserWalletUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserWalletUpsertOne) SetUserID(v string) *UserWalletUpsertOne {
	return u.Update(func(s *UserWalletUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserWalletUpsertOne) UpdateUserID() *UserWalletUpsertOne {
	return u.Update(func(s *UserWalletUpsert) {
		s.UpdateUserID()
	})
}

// SetType sets the "type" field.
func (u *UserWalletUpsertOne) SetType(v string) *UserWalletUpsertOne {
	return u.Update(func(s *UserWalletUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *UserWalletUpsertOne) UpdateType() *UserWalletUpsertOne {
	return u.Update(func(s *UserWalletUpsert) {
		s.UpdateType()
	})
}

// SetSymbol sets the "symbol" field.
func (u *UserWalletUpsertOne) SetSymbol(v string) *UserWalletUpsertOne {
	return u.Update(func(s *UserWalletUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *UserWalletUpsertOne) UpdateSymbol() *UserWalletUpsertOne {
	return u.Update(func(s *UserWalletUpsert) {
		s.UpdateSymbol()
	})
}

// SetIsActive sets the "is_active" field.
func (u *UserWalletUpsertOne) SetIsActive(v bool) *UserWalletUpsertOne {
	return u.Update(func(s *UserWalletUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *UserWalletUpsertOne) UpdateIsActive() *UserWalletUpsertOne {
	return u.Update(func(s *UserWalletUpsert) {
		s.UpdateIsActive()
	})
}

// SetBalance sets the "balance" field.
func (u *UserWalletUpsertOne) SetBalance(v string) *UserWalletUpsertOne {
	return u.Update(func(s *UserWalletUpsert) {
		s.SetBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *UserWalletUpsertOne) UpdateBalance() *UserWalletUpsertOne {
	return u.Update(func(s *UserWalletUpsert) {
		s.UpdateBalance()
	})
}

// Exec executes the query.
func (u *UserWalletUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserWalletCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserWalletUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserWalletUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserWalletUpsertOne.ID is not supported by MySQL driver. Use UserWalletUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserWalletUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserWalletCreateBulk is the builder for creating many UserWallet entities in bulk.
type UserWalletCreateBulk struct {
	config
	err      error
	builders []*UserWalletCreate
	conflict []sql.ConflictOption
}

// Save creates the UserWallet entities in the database.
func (uwcb *UserWalletCreateBulk) Save(ctx context.Context) ([]*UserWallet, error) {
	if uwcb.err != nil {
		return nil, uwcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uwcb.builders))
	nodes := make([]*UserWallet, len(uwcb.builders))
	mutators := make([]Mutator, len(uwcb.builders))
	for i := range uwcb.builders {
		func(i int, root context.Context) {
			builder := uwcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserWalletMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uwcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uwcb *UserWalletCreateBulk) SaveX(ctx context.Context) []*UserWallet {
	v, err := uwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uwcb *UserWalletCreateBulk) Exec(ctx context.Context) error {
	_, err := uwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwcb *UserWalletCreateBulk) ExecX(ctx context.Context) {
	if err := uwcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserWallet.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserWalletUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (uwcb *UserWalletCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserWalletUpsertBulk {
	uwcb.conflict = opts
	return &UserWalletUpsertBulk{
		create: uwcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserWallet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uwcb *UserWalletCreateBulk) OnConflictColumns(columns ...string) *UserWalletUpsertBulk {
	uwcb.conflict = append(uwcb.conflict, sql.ConflictColumns(columns...))
	return &UserWalletUpsertBulk{
		create: uwcb,
	}
}

// UserWalletUpsertBulk is the builder for "upsert"-ing
// a bulk of UserWallet nodes.
type UserWalletUpsertBulk struct {
	create *UserWalletCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserWallet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(userwallet.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserWalletUpsertBulk) UpdateNewValues() *UserWalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(userwallet.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(userwallet.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserWallet.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserWalletUpsertBulk) Ignore() *UserWalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserWalletUpsertBulk) DoNothing() *UserWalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserWalletCreateBulk.OnConflict
// documentation for more info.
func (u *UserWalletUpsertBulk) Update(set func(*UserWalletUpsert)) *UserWalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserWalletUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserWalletUpsertBulk) SetUpdatedAt(v time.Time) *UserWalletUpsertBulk {
	return u.Update(func(s *UserWalletUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserWalletUpsertBulk) UpdateUpdatedAt() *UserWalletUpsertBulk {
	return u.Update(func(s *UserWalletUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserWalletUpsertBulk) SetUserID(v string) *UserWalletUpsertBulk {
	return u.Update(func(s *UserWalletUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserWalletUpsertBulk) UpdateUserID() *UserWalletUpsertBulk {
	return u.Update(func(s *UserWalletUpsert) {
		s.UpdateUserID()
	})
}

// SetType sets the "type" field.
func (u *UserWalletUpsertBulk) SetType(v string) *UserWalletUpsertBulk {
	return u.Update(func(s *UserWalletUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *UserWalletUpsertBulk) UpdateType() *UserWalletUpsertBulk {
	return u.Update(func(s *UserWalletUpsert) {
		s.UpdateType()
	})
}

// SetSymbol sets the "symbol" field.
func (u *UserWalletUpsertBulk) SetSymbol(v string) *UserWalletUpsertBulk {
	return u.Update(func(s *UserWalletUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *UserWalletUpsertBulk) UpdateSymbol() *UserWalletUpsertBulk {
	return u.Update(func(s *UserWalletUpsert) {
		s.UpdateSymbol()
	})
}

// SetIsActive sets the "is_active" field.
func (u *UserWalletUpsertBulk) SetIsActive(v bool) *UserWalletUpsertBulk {
	return u.Update(func(s *UserWalletUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *UserWalletUpsertBulk) UpdateIsActive() *UserWalletUpsertBulk {
	return u.Update(func(s *UserWalletUpsert) {
		s.UpdateIsActive()
	})
}

// SetBalance sets the "balance" field.
func (u *UserWalletUpsertBulk) SetBalance(v string) *UserWalletUpsertBulk {
	return u.Update(func(s *UserWalletUpsert) {
		s.SetBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *UserWalletUpsertBulk) UpdateBalance() *UserWalletUpsertBulk {
	return u.Update(func(s *UserWalletUpsert) {
		s.UpdateBalance()
	})
}

// Exec executes the query.
func (u *UserWalletUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserWalletCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserWalletCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserWalletUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
