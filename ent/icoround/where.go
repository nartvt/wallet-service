// Code generated by ent, DO NOT EDIT.

package icoround

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/indikay/wallet-service/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldUpdatedAt, v))
}

// RoundID applies equality check predicate on the "round_id" field. It's identical to RoundIDEQ.
func RoundID(v int32) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldRoundID, v))
}

// SubRound applies equality check predicate on the "sub_round" field. It's identical to SubRoundEQ.
func SubRound(v int32) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldSubRound, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldPrice, v))
}

// NumToken applies equality check predicate on the "num_token" field. It's identical to NumTokenEQ.
func NumToken(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldNumToken, v))
}

// BoughtToken applies equality check predicate on the "bought_token" field. It's identical to BoughtTokenEQ.
func BoughtToken(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldBoughtToken, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldStartAt, v))
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldEndAt, v))
}

// IsClose applies equality check predicate on the "is_close" field. It's identical to IsCloseEQ.
func IsClose(v bool) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldIsClose, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLTE(FieldUpdatedAt, v))
}

// RoundIDEQ applies the EQ predicate on the "round_id" field.
func RoundIDEQ(v int32) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldRoundID, v))
}

// RoundIDNEQ applies the NEQ predicate on the "round_id" field.
func RoundIDNEQ(v int32) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNEQ(FieldRoundID, v))
}

// RoundIDIn applies the In predicate on the "round_id" field.
func RoundIDIn(vs ...int32) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldIn(FieldRoundID, vs...))
}

// RoundIDNotIn applies the NotIn predicate on the "round_id" field.
func RoundIDNotIn(vs ...int32) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNotIn(FieldRoundID, vs...))
}

// RoundIDGT applies the GT predicate on the "round_id" field.
func RoundIDGT(v int32) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGT(FieldRoundID, v))
}

// RoundIDGTE applies the GTE predicate on the "round_id" field.
func RoundIDGTE(v int32) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGTE(FieldRoundID, v))
}

// RoundIDLT applies the LT predicate on the "round_id" field.
func RoundIDLT(v int32) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLT(FieldRoundID, v))
}

// RoundIDLTE applies the LTE predicate on the "round_id" field.
func RoundIDLTE(v int32) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLTE(FieldRoundID, v))
}

// SubRoundEQ applies the EQ predicate on the "sub_round" field.
func SubRoundEQ(v int32) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldSubRound, v))
}

// SubRoundNEQ applies the NEQ predicate on the "sub_round" field.
func SubRoundNEQ(v int32) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNEQ(FieldSubRound, v))
}

// SubRoundIn applies the In predicate on the "sub_round" field.
func SubRoundIn(vs ...int32) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldIn(FieldSubRound, vs...))
}

// SubRoundNotIn applies the NotIn predicate on the "sub_round" field.
func SubRoundNotIn(vs ...int32) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNotIn(FieldSubRound, vs...))
}

// SubRoundGT applies the GT predicate on the "sub_round" field.
func SubRoundGT(v int32) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGT(FieldSubRound, v))
}

// SubRoundGTE applies the GTE predicate on the "sub_round" field.
func SubRoundGTE(v int32) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGTE(FieldSubRound, v))
}

// SubRoundLT applies the LT predicate on the "sub_round" field.
func SubRoundLT(v int32) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLT(FieldSubRound, v))
}

// SubRoundLTE applies the LTE predicate on the "sub_round" field.
func SubRoundLTE(v int32) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLTE(FieldSubRound, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLTE(FieldPrice, v))
}

// PriceContains applies the Contains predicate on the "price" field.
func PriceContains(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldContains(FieldPrice, v))
}

// PriceHasPrefix applies the HasPrefix predicate on the "price" field.
func PriceHasPrefix(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldHasPrefix(FieldPrice, v))
}

// PriceHasSuffix applies the HasSuffix predicate on the "price" field.
func PriceHasSuffix(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldHasSuffix(FieldPrice, v))
}

// PriceEqualFold applies the EqualFold predicate on the "price" field.
func PriceEqualFold(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEqualFold(FieldPrice, v))
}

// PriceContainsFold applies the ContainsFold predicate on the "price" field.
func PriceContainsFold(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldContainsFold(FieldPrice, v))
}

// NumTokenEQ applies the EQ predicate on the "num_token" field.
func NumTokenEQ(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldNumToken, v))
}

// NumTokenNEQ applies the NEQ predicate on the "num_token" field.
func NumTokenNEQ(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNEQ(FieldNumToken, v))
}

// NumTokenIn applies the In predicate on the "num_token" field.
func NumTokenIn(vs ...string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldIn(FieldNumToken, vs...))
}

// NumTokenNotIn applies the NotIn predicate on the "num_token" field.
func NumTokenNotIn(vs ...string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNotIn(FieldNumToken, vs...))
}

// NumTokenGT applies the GT predicate on the "num_token" field.
func NumTokenGT(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGT(FieldNumToken, v))
}

// NumTokenGTE applies the GTE predicate on the "num_token" field.
func NumTokenGTE(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGTE(FieldNumToken, v))
}

// NumTokenLT applies the LT predicate on the "num_token" field.
func NumTokenLT(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLT(FieldNumToken, v))
}

// NumTokenLTE applies the LTE predicate on the "num_token" field.
func NumTokenLTE(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLTE(FieldNumToken, v))
}

// NumTokenContains applies the Contains predicate on the "num_token" field.
func NumTokenContains(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldContains(FieldNumToken, v))
}

// NumTokenHasPrefix applies the HasPrefix predicate on the "num_token" field.
func NumTokenHasPrefix(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldHasPrefix(FieldNumToken, v))
}

// NumTokenHasSuffix applies the HasSuffix predicate on the "num_token" field.
func NumTokenHasSuffix(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldHasSuffix(FieldNumToken, v))
}

// NumTokenEqualFold applies the EqualFold predicate on the "num_token" field.
func NumTokenEqualFold(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEqualFold(FieldNumToken, v))
}

// NumTokenContainsFold applies the ContainsFold predicate on the "num_token" field.
func NumTokenContainsFold(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldContainsFold(FieldNumToken, v))
}

// BoughtTokenEQ applies the EQ predicate on the "bought_token" field.
func BoughtTokenEQ(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldBoughtToken, v))
}

// BoughtTokenNEQ applies the NEQ predicate on the "bought_token" field.
func BoughtTokenNEQ(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNEQ(FieldBoughtToken, v))
}

// BoughtTokenIn applies the In predicate on the "bought_token" field.
func BoughtTokenIn(vs ...string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldIn(FieldBoughtToken, vs...))
}

// BoughtTokenNotIn applies the NotIn predicate on the "bought_token" field.
func BoughtTokenNotIn(vs ...string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNotIn(FieldBoughtToken, vs...))
}

// BoughtTokenGT applies the GT predicate on the "bought_token" field.
func BoughtTokenGT(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGT(FieldBoughtToken, v))
}

// BoughtTokenGTE applies the GTE predicate on the "bought_token" field.
func BoughtTokenGTE(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGTE(FieldBoughtToken, v))
}

// BoughtTokenLT applies the LT predicate on the "bought_token" field.
func BoughtTokenLT(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLT(FieldBoughtToken, v))
}

// BoughtTokenLTE applies the LTE predicate on the "bought_token" field.
func BoughtTokenLTE(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLTE(FieldBoughtToken, v))
}

// BoughtTokenContains applies the Contains predicate on the "bought_token" field.
func BoughtTokenContains(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldContains(FieldBoughtToken, v))
}

// BoughtTokenHasPrefix applies the HasPrefix predicate on the "bought_token" field.
func BoughtTokenHasPrefix(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldHasPrefix(FieldBoughtToken, v))
}

// BoughtTokenHasSuffix applies the HasSuffix predicate on the "bought_token" field.
func BoughtTokenHasSuffix(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldHasSuffix(FieldBoughtToken, v))
}

// BoughtTokenEqualFold applies the EqualFold predicate on the "bought_token" field.
func BoughtTokenEqualFold(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEqualFold(FieldBoughtToken, v))
}

// BoughtTokenContainsFold applies the ContainsFold predicate on the "bought_token" field.
func BoughtTokenContainsFold(v string) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldContainsFold(FieldBoughtToken, v))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLTE(FieldStartAt, v))
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.IcoRound {
	return predicate.IcoRound(sql.FieldIsNull(FieldStartAt))
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNotNull(FieldStartAt))
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldEndAt, v))
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNEQ(FieldEndAt, v))
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldIn(FieldEndAt, vs...))
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNotIn(FieldEndAt, vs...))
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGT(FieldEndAt, v))
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldGTE(FieldEndAt, v))
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLT(FieldEndAt, v))
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v time.Time) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldLTE(FieldEndAt, v))
}

// EndAtIsNil applies the IsNil predicate on the "end_at" field.
func EndAtIsNil() predicate.IcoRound {
	return predicate.IcoRound(sql.FieldIsNull(FieldEndAt))
}

// EndAtNotNil applies the NotNil predicate on the "end_at" field.
func EndAtNotNil() predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNotNull(FieldEndAt))
}

// IsCloseEQ applies the EQ predicate on the "is_close" field.
func IsCloseEQ(v bool) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldEQ(FieldIsClose, v))
}

// IsCloseNEQ applies the NEQ predicate on the "is_close" field.
func IsCloseNEQ(v bool) predicate.IcoRound {
	return predicate.IcoRound(sql.FieldNEQ(FieldIsClose, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IcoRound) predicate.IcoRound {
	return predicate.IcoRound(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IcoRound) predicate.IcoRound {
	return predicate.IcoRound(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IcoRound) predicate.IcoRound {
	return predicate.IcoRound(sql.NotPredicates(p))
}
