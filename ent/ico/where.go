// Code generated by ent, DO NOT EDIT.

package ico

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/indikay/wallet-service/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Ico {
	return predicate.Ico(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Ico {
	return predicate.Ico(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Ico {
	return predicate.Ico(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Ico {
	return predicate.Ico(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Ico {
	return predicate.Ico(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Ico {
	return predicate.Ico(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Ico {
	return predicate.Ico(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldUpdatedAt, v))
}

// RoundID applies equality check predicate on the "round_id" field. It's identical to RoundIDEQ.
func RoundID(v int32) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldRoundID, v))
}

// RoundName applies equality check predicate on the "round_name" field. It's identical to RoundNameEQ.
func RoundName(v string) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldRoundName, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v string) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldPrice, v))
}

// NumToken applies equality check predicate on the "num_token" field. It's identical to NumTokenEQ.
func NumToken(v string) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldNumToken, v))
}

// NumSub applies equality check predicate on the "num_sub" field. It's identical to NumSubEQ.
func NumSub(v int32) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldNumSub, v))
}

// PriceGap applies equality check predicate on the "price_gap" field. It's identical to PriceGapEQ.
func PriceGap(v string) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldPriceGap, v))
}

// EndedAt applies equality check predicate on the "ended_at" field. It's identical to EndedAtEQ.
func EndedAt(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldEndedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldLTE(FieldUpdatedAt, v))
}

// RoundIDEQ applies the EQ predicate on the "round_id" field.
func RoundIDEQ(v int32) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldRoundID, v))
}

// RoundIDNEQ applies the NEQ predicate on the "round_id" field.
func RoundIDNEQ(v int32) predicate.Ico {
	return predicate.Ico(sql.FieldNEQ(FieldRoundID, v))
}

// RoundIDIn applies the In predicate on the "round_id" field.
func RoundIDIn(vs ...int32) predicate.Ico {
	return predicate.Ico(sql.FieldIn(FieldRoundID, vs...))
}

// RoundIDNotIn applies the NotIn predicate on the "round_id" field.
func RoundIDNotIn(vs ...int32) predicate.Ico {
	return predicate.Ico(sql.FieldNotIn(FieldRoundID, vs...))
}

// RoundIDGT applies the GT predicate on the "round_id" field.
func RoundIDGT(v int32) predicate.Ico {
	return predicate.Ico(sql.FieldGT(FieldRoundID, v))
}

// RoundIDGTE applies the GTE predicate on the "round_id" field.
func RoundIDGTE(v int32) predicate.Ico {
	return predicate.Ico(sql.FieldGTE(FieldRoundID, v))
}

// RoundIDLT applies the LT predicate on the "round_id" field.
func RoundIDLT(v int32) predicate.Ico {
	return predicate.Ico(sql.FieldLT(FieldRoundID, v))
}

// RoundIDLTE applies the LTE predicate on the "round_id" field.
func RoundIDLTE(v int32) predicate.Ico {
	return predicate.Ico(sql.FieldLTE(FieldRoundID, v))
}

// RoundNameEQ applies the EQ predicate on the "round_name" field.
func RoundNameEQ(v string) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldRoundName, v))
}

// RoundNameNEQ applies the NEQ predicate on the "round_name" field.
func RoundNameNEQ(v string) predicate.Ico {
	return predicate.Ico(sql.FieldNEQ(FieldRoundName, v))
}

// RoundNameIn applies the In predicate on the "round_name" field.
func RoundNameIn(vs ...string) predicate.Ico {
	return predicate.Ico(sql.FieldIn(FieldRoundName, vs...))
}

// RoundNameNotIn applies the NotIn predicate on the "round_name" field.
func RoundNameNotIn(vs ...string) predicate.Ico {
	return predicate.Ico(sql.FieldNotIn(FieldRoundName, vs...))
}

// RoundNameGT applies the GT predicate on the "round_name" field.
func RoundNameGT(v string) predicate.Ico {
	return predicate.Ico(sql.FieldGT(FieldRoundName, v))
}

// RoundNameGTE applies the GTE predicate on the "round_name" field.
func RoundNameGTE(v string) predicate.Ico {
	return predicate.Ico(sql.FieldGTE(FieldRoundName, v))
}

// RoundNameLT applies the LT predicate on the "round_name" field.
func RoundNameLT(v string) predicate.Ico {
	return predicate.Ico(sql.FieldLT(FieldRoundName, v))
}

// RoundNameLTE applies the LTE predicate on the "round_name" field.
func RoundNameLTE(v string) predicate.Ico {
	return predicate.Ico(sql.FieldLTE(FieldRoundName, v))
}

// RoundNameContains applies the Contains predicate on the "round_name" field.
func RoundNameContains(v string) predicate.Ico {
	return predicate.Ico(sql.FieldContains(FieldRoundName, v))
}

// RoundNameHasPrefix applies the HasPrefix predicate on the "round_name" field.
func RoundNameHasPrefix(v string) predicate.Ico {
	return predicate.Ico(sql.FieldHasPrefix(FieldRoundName, v))
}

// RoundNameHasSuffix applies the HasSuffix predicate on the "round_name" field.
func RoundNameHasSuffix(v string) predicate.Ico {
	return predicate.Ico(sql.FieldHasSuffix(FieldRoundName, v))
}

// RoundNameEqualFold applies the EqualFold predicate on the "round_name" field.
func RoundNameEqualFold(v string) predicate.Ico {
	return predicate.Ico(sql.FieldEqualFold(FieldRoundName, v))
}

// RoundNameContainsFold applies the ContainsFold predicate on the "round_name" field.
func RoundNameContainsFold(v string) predicate.Ico {
	return predicate.Ico(sql.FieldContainsFold(FieldRoundName, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v string) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v string) predicate.Ico {
	return predicate.Ico(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...string) predicate.Ico {
	return predicate.Ico(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...string) predicate.Ico {
	return predicate.Ico(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v string) predicate.Ico {
	return predicate.Ico(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v string) predicate.Ico {
	return predicate.Ico(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v string) predicate.Ico {
	return predicate.Ico(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v string) predicate.Ico {
	return predicate.Ico(sql.FieldLTE(FieldPrice, v))
}

// PriceContains applies the Contains predicate on the "price" field.
func PriceContains(v string) predicate.Ico {
	return predicate.Ico(sql.FieldContains(FieldPrice, v))
}

// PriceHasPrefix applies the HasPrefix predicate on the "price" field.
func PriceHasPrefix(v string) predicate.Ico {
	return predicate.Ico(sql.FieldHasPrefix(FieldPrice, v))
}

// PriceHasSuffix applies the HasSuffix predicate on the "price" field.
func PriceHasSuffix(v string) predicate.Ico {
	return predicate.Ico(sql.FieldHasSuffix(FieldPrice, v))
}

// PriceEqualFold applies the EqualFold predicate on the "price" field.
func PriceEqualFold(v string) predicate.Ico {
	return predicate.Ico(sql.FieldEqualFold(FieldPrice, v))
}

// PriceContainsFold applies the ContainsFold predicate on the "price" field.
func PriceContainsFold(v string) predicate.Ico {
	return predicate.Ico(sql.FieldContainsFold(FieldPrice, v))
}

// NumTokenEQ applies the EQ predicate on the "num_token" field.
func NumTokenEQ(v string) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldNumToken, v))
}

// NumTokenNEQ applies the NEQ predicate on the "num_token" field.
func NumTokenNEQ(v string) predicate.Ico {
	return predicate.Ico(sql.FieldNEQ(FieldNumToken, v))
}

// NumTokenIn applies the In predicate on the "num_token" field.
func NumTokenIn(vs ...string) predicate.Ico {
	return predicate.Ico(sql.FieldIn(FieldNumToken, vs...))
}

// NumTokenNotIn applies the NotIn predicate on the "num_token" field.
func NumTokenNotIn(vs ...string) predicate.Ico {
	return predicate.Ico(sql.FieldNotIn(FieldNumToken, vs...))
}

// NumTokenGT applies the GT predicate on the "num_token" field.
func NumTokenGT(v string) predicate.Ico {
	return predicate.Ico(sql.FieldGT(FieldNumToken, v))
}

// NumTokenGTE applies the GTE predicate on the "num_token" field.
func NumTokenGTE(v string) predicate.Ico {
	return predicate.Ico(sql.FieldGTE(FieldNumToken, v))
}

// NumTokenLT applies the LT predicate on the "num_token" field.
func NumTokenLT(v string) predicate.Ico {
	return predicate.Ico(sql.FieldLT(FieldNumToken, v))
}

// NumTokenLTE applies the LTE predicate on the "num_token" field.
func NumTokenLTE(v string) predicate.Ico {
	return predicate.Ico(sql.FieldLTE(FieldNumToken, v))
}

// NumTokenContains applies the Contains predicate on the "num_token" field.
func NumTokenContains(v string) predicate.Ico {
	return predicate.Ico(sql.FieldContains(FieldNumToken, v))
}

// NumTokenHasPrefix applies the HasPrefix predicate on the "num_token" field.
func NumTokenHasPrefix(v string) predicate.Ico {
	return predicate.Ico(sql.FieldHasPrefix(FieldNumToken, v))
}

// NumTokenHasSuffix applies the HasSuffix predicate on the "num_token" field.
func NumTokenHasSuffix(v string) predicate.Ico {
	return predicate.Ico(sql.FieldHasSuffix(FieldNumToken, v))
}

// NumTokenEqualFold applies the EqualFold predicate on the "num_token" field.
func NumTokenEqualFold(v string) predicate.Ico {
	return predicate.Ico(sql.FieldEqualFold(FieldNumToken, v))
}

// NumTokenContainsFold applies the ContainsFold predicate on the "num_token" field.
func NumTokenContainsFold(v string) predicate.Ico {
	return predicate.Ico(sql.FieldContainsFold(FieldNumToken, v))
}

// NumSubEQ applies the EQ predicate on the "num_sub" field.
func NumSubEQ(v int32) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldNumSub, v))
}

// NumSubNEQ applies the NEQ predicate on the "num_sub" field.
func NumSubNEQ(v int32) predicate.Ico {
	return predicate.Ico(sql.FieldNEQ(FieldNumSub, v))
}

// NumSubIn applies the In predicate on the "num_sub" field.
func NumSubIn(vs ...int32) predicate.Ico {
	return predicate.Ico(sql.FieldIn(FieldNumSub, vs...))
}

// NumSubNotIn applies the NotIn predicate on the "num_sub" field.
func NumSubNotIn(vs ...int32) predicate.Ico {
	return predicate.Ico(sql.FieldNotIn(FieldNumSub, vs...))
}

// NumSubGT applies the GT predicate on the "num_sub" field.
func NumSubGT(v int32) predicate.Ico {
	return predicate.Ico(sql.FieldGT(FieldNumSub, v))
}

// NumSubGTE applies the GTE predicate on the "num_sub" field.
func NumSubGTE(v int32) predicate.Ico {
	return predicate.Ico(sql.FieldGTE(FieldNumSub, v))
}

// NumSubLT applies the LT predicate on the "num_sub" field.
func NumSubLT(v int32) predicate.Ico {
	return predicate.Ico(sql.FieldLT(FieldNumSub, v))
}

// NumSubLTE applies the LTE predicate on the "num_sub" field.
func NumSubLTE(v int32) predicate.Ico {
	return predicate.Ico(sql.FieldLTE(FieldNumSub, v))
}

// PriceGapEQ applies the EQ predicate on the "price_gap" field.
func PriceGapEQ(v string) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldPriceGap, v))
}

// PriceGapNEQ applies the NEQ predicate on the "price_gap" field.
func PriceGapNEQ(v string) predicate.Ico {
	return predicate.Ico(sql.FieldNEQ(FieldPriceGap, v))
}

// PriceGapIn applies the In predicate on the "price_gap" field.
func PriceGapIn(vs ...string) predicate.Ico {
	return predicate.Ico(sql.FieldIn(FieldPriceGap, vs...))
}

// PriceGapNotIn applies the NotIn predicate on the "price_gap" field.
func PriceGapNotIn(vs ...string) predicate.Ico {
	return predicate.Ico(sql.FieldNotIn(FieldPriceGap, vs...))
}

// PriceGapGT applies the GT predicate on the "price_gap" field.
func PriceGapGT(v string) predicate.Ico {
	return predicate.Ico(sql.FieldGT(FieldPriceGap, v))
}

// PriceGapGTE applies the GTE predicate on the "price_gap" field.
func PriceGapGTE(v string) predicate.Ico {
	return predicate.Ico(sql.FieldGTE(FieldPriceGap, v))
}

// PriceGapLT applies the LT predicate on the "price_gap" field.
func PriceGapLT(v string) predicate.Ico {
	return predicate.Ico(sql.FieldLT(FieldPriceGap, v))
}

// PriceGapLTE applies the LTE predicate on the "price_gap" field.
func PriceGapLTE(v string) predicate.Ico {
	return predicate.Ico(sql.FieldLTE(FieldPriceGap, v))
}

// PriceGapContains applies the Contains predicate on the "price_gap" field.
func PriceGapContains(v string) predicate.Ico {
	return predicate.Ico(sql.FieldContains(FieldPriceGap, v))
}

// PriceGapHasPrefix applies the HasPrefix predicate on the "price_gap" field.
func PriceGapHasPrefix(v string) predicate.Ico {
	return predicate.Ico(sql.FieldHasPrefix(FieldPriceGap, v))
}

// PriceGapHasSuffix applies the HasSuffix predicate on the "price_gap" field.
func PriceGapHasSuffix(v string) predicate.Ico {
	return predicate.Ico(sql.FieldHasSuffix(FieldPriceGap, v))
}

// PriceGapEqualFold applies the EqualFold predicate on the "price_gap" field.
func PriceGapEqualFold(v string) predicate.Ico {
	return predicate.Ico(sql.FieldEqualFold(FieldPriceGap, v))
}

// PriceGapContainsFold applies the ContainsFold predicate on the "price_gap" field.
func PriceGapContainsFold(v string) predicate.Ico {
	return predicate.Ico(sql.FieldContainsFold(FieldPriceGap, v))
}

// EndedAtEQ applies the EQ predicate on the "ended_at" field.
func EndedAtEQ(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldEQ(FieldEndedAt, v))
}

// EndedAtNEQ applies the NEQ predicate on the "ended_at" field.
func EndedAtNEQ(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldNEQ(FieldEndedAt, v))
}

// EndedAtIn applies the In predicate on the "ended_at" field.
func EndedAtIn(vs ...time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldIn(FieldEndedAt, vs...))
}

// EndedAtNotIn applies the NotIn predicate on the "ended_at" field.
func EndedAtNotIn(vs ...time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldNotIn(FieldEndedAt, vs...))
}

// EndedAtGT applies the GT predicate on the "ended_at" field.
func EndedAtGT(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldGT(FieldEndedAt, v))
}

// EndedAtGTE applies the GTE predicate on the "ended_at" field.
func EndedAtGTE(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldGTE(FieldEndedAt, v))
}

// EndedAtLT applies the LT predicate on the "ended_at" field.
func EndedAtLT(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldLT(FieldEndedAt, v))
}

// EndedAtLTE applies the LTE predicate on the "ended_at" field.
func EndedAtLTE(v time.Time) predicate.Ico {
	return predicate.Ico(sql.FieldLTE(FieldEndedAt, v))
}

// EndedAtIsNil applies the IsNil predicate on the "ended_at" field.
func EndedAtIsNil() predicate.Ico {
	return predicate.Ico(sql.FieldIsNull(FieldEndedAt))
}

// EndedAtNotNil applies the NotNil predicate on the "ended_at" field.
func EndedAtNotNil() predicate.Ico {
	return predicate.Ico(sql.FieldNotNull(FieldEndedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ico) predicate.Ico {
	return predicate.Ico(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ico) predicate.Ico {
	return predicate.Ico(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ico) predicate.Ico {
	return predicate.Ico(sql.NotPredicates(p))
}
