// Code generated by ent, DO NOT EDIT.

package currencyrate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/indikay/wallet-service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEQ(FieldUpdatedAt, v))
}

// Symbol applies equality check predicate on the "symbol" field. It's identical to SymbolEQ.
func Symbol(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEQ(FieldSymbol, v))
}

// Rate applies equality check predicate on the "rate" field. It's identical to RateEQ.
func Rate(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEQ(FieldRate, v))
}

// ExpiredAt applies equality check predicate on the "expired_at" field. It's identical to ExpiredAtEQ.
func ExpiredAt(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEQ(FieldExpiredAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldLTE(FieldUpdatedAt, v))
}

// SymbolEQ applies the EQ predicate on the "symbol" field.
func SymbolEQ(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEQ(FieldSymbol, v))
}

// SymbolNEQ applies the NEQ predicate on the "symbol" field.
func SymbolNEQ(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNEQ(FieldSymbol, v))
}

// SymbolIn applies the In predicate on the "symbol" field.
func SymbolIn(vs ...string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldIn(FieldSymbol, vs...))
}

// SymbolNotIn applies the NotIn predicate on the "symbol" field.
func SymbolNotIn(vs ...string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNotIn(FieldSymbol, vs...))
}

// SymbolGT applies the GT predicate on the "symbol" field.
func SymbolGT(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldGT(FieldSymbol, v))
}

// SymbolGTE applies the GTE predicate on the "symbol" field.
func SymbolGTE(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldGTE(FieldSymbol, v))
}

// SymbolLT applies the LT predicate on the "symbol" field.
func SymbolLT(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldLT(FieldSymbol, v))
}

// SymbolLTE applies the LTE predicate on the "symbol" field.
func SymbolLTE(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldLTE(FieldSymbol, v))
}

// SymbolContains applies the Contains predicate on the "symbol" field.
func SymbolContains(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldContains(FieldSymbol, v))
}

// SymbolHasPrefix applies the HasPrefix predicate on the "symbol" field.
func SymbolHasPrefix(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldHasPrefix(FieldSymbol, v))
}

// SymbolHasSuffix applies the HasSuffix predicate on the "symbol" field.
func SymbolHasSuffix(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldHasSuffix(FieldSymbol, v))
}

// SymbolEqualFold applies the EqualFold predicate on the "symbol" field.
func SymbolEqualFold(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEqualFold(FieldSymbol, v))
}

// SymbolContainsFold applies the ContainsFold predicate on the "symbol" field.
func SymbolContainsFold(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldContainsFold(FieldSymbol, v))
}

// RateEQ applies the EQ predicate on the "rate" field.
func RateEQ(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEQ(FieldRate, v))
}

// RateNEQ applies the NEQ predicate on the "rate" field.
func RateNEQ(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNEQ(FieldRate, v))
}

// RateIn applies the In predicate on the "rate" field.
func RateIn(vs ...string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldIn(FieldRate, vs...))
}

// RateNotIn applies the NotIn predicate on the "rate" field.
func RateNotIn(vs ...string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNotIn(FieldRate, vs...))
}

// RateGT applies the GT predicate on the "rate" field.
func RateGT(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldGT(FieldRate, v))
}

// RateGTE applies the GTE predicate on the "rate" field.
func RateGTE(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldGTE(FieldRate, v))
}

// RateLT applies the LT predicate on the "rate" field.
func RateLT(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldLT(FieldRate, v))
}

// RateLTE applies the LTE predicate on the "rate" field.
func RateLTE(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldLTE(FieldRate, v))
}

// RateContains applies the Contains predicate on the "rate" field.
func RateContains(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldContains(FieldRate, v))
}

// RateHasPrefix applies the HasPrefix predicate on the "rate" field.
func RateHasPrefix(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldHasPrefix(FieldRate, v))
}

// RateHasSuffix applies the HasSuffix predicate on the "rate" field.
func RateHasSuffix(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldHasSuffix(FieldRate, v))
}

// RateEqualFold applies the EqualFold predicate on the "rate" field.
func RateEqualFold(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEqualFold(FieldRate, v))
}

// RateContainsFold applies the ContainsFold predicate on the "rate" field.
func RateContainsFold(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldContainsFold(FieldRate, v))
}

// ExpiredAtEQ applies the EQ predicate on the "expired_at" field.
func ExpiredAtEQ(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEQ(FieldExpiredAt, v))
}

// ExpiredAtNEQ applies the NEQ predicate on the "expired_at" field.
func ExpiredAtNEQ(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNEQ(FieldExpiredAt, v))
}

// ExpiredAtIn applies the In predicate on the "expired_at" field.
func ExpiredAtIn(vs ...time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldIn(FieldExpiredAt, vs...))
}

// ExpiredAtNotIn applies the NotIn predicate on the "expired_at" field.
func ExpiredAtNotIn(vs ...time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNotIn(FieldExpiredAt, vs...))
}

// ExpiredAtGT applies the GT predicate on the "expired_at" field.
func ExpiredAtGT(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldGT(FieldExpiredAt, v))
}

// ExpiredAtGTE applies the GTE predicate on the "expired_at" field.
func ExpiredAtGTE(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldGTE(FieldExpiredAt, v))
}

// ExpiredAtLT applies the LT predicate on the "expired_at" field.
func ExpiredAtLT(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldLT(FieldExpiredAt, v))
}

// ExpiredAtLTE applies the LTE predicate on the "expired_at" field.
func ExpiredAtLTE(v time.Time) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldLTE(FieldExpiredAt, v))
}

// ExpiredAtIsNil applies the IsNil predicate on the "expired_at" field.
func ExpiredAtIsNil() predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldIsNull(FieldExpiredAt))
}

// ExpiredAtNotNil applies the NotNil predicate on the "expired_at" field.
func ExpiredAtNotNil() predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNotNull(FieldExpiredAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CurrencyRate) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CurrencyRate) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CurrencyRate) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.NotPredicates(p))
}
