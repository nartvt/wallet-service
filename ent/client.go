// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/indikay/wallet-service/ent/migrate"
	"github.com/rs/xid"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/indikay/wallet-service/ent/currencyrate"
	"github.com/indikay/wallet-service/ent/ico"
	"github.com/indikay/wallet-service/ent/icocoupon"
	"github.com/indikay/wallet-service/ent/icohistory"
	"github.com/indikay/wallet-service/ent/icoround"
	"github.com/indikay/wallet-service/ent/transaction"
	"github.com/indikay/wallet-service/ent/userwallet"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CurrencyRate is the client for interacting with the CurrencyRate builders.
	CurrencyRate *CurrencyRateClient
	// Ico is the client for interacting with the Ico builders.
	Ico *IcoClient
	// IcoCoupon is the client for interacting with the IcoCoupon builders.
	IcoCoupon *IcoCouponClient
	// IcoHistory is the client for interacting with the IcoHistory builders.
	IcoHistory *IcoHistoryClient
	// IcoRound is the client for interacting with the IcoRound builders.
	IcoRound *IcoRoundClient
	// Transaction is the client for interacting with the Transaction builders.
	Transaction *TransactionClient
	// UserWallet is the client for interacting with the UserWallet builders.
	UserWallet *UserWalletClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CurrencyRate = NewCurrencyRateClient(c.config)
	c.Ico = NewIcoClient(c.config)
	c.IcoCoupon = NewIcoCouponClient(c.config)
	c.IcoHistory = NewIcoHistoryClient(c.config)
	c.IcoRound = NewIcoRoundClient(c.config)
	c.Transaction = NewTransactionClient(c.config)
	c.UserWallet = NewUserWalletClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		CurrencyRate: NewCurrencyRateClient(cfg),
		Ico:          NewIcoClient(cfg),
		IcoCoupon:    NewIcoCouponClient(cfg),
		IcoHistory:   NewIcoHistoryClient(cfg),
		IcoRound:     NewIcoRoundClient(cfg),
		Transaction:  NewTransactionClient(cfg),
		UserWallet:   NewUserWalletClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		CurrencyRate: NewCurrencyRateClient(cfg),
		Ico:          NewIcoClient(cfg),
		IcoCoupon:    NewIcoCouponClient(cfg),
		IcoHistory:   NewIcoHistoryClient(cfg),
		IcoRound:     NewIcoRoundClient(cfg),
		Transaction:  NewTransactionClient(cfg),
		UserWallet:   NewUserWalletClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CurrencyRate.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.CurrencyRate, c.Ico, c.IcoCoupon, c.IcoHistory, c.IcoRound, c.Transaction,
		c.UserWallet,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.CurrencyRate, c.Ico, c.IcoCoupon, c.IcoHistory, c.IcoRound, c.Transaction,
		c.UserWallet,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CurrencyRateMutation:
		return c.CurrencyRate.mutate(ctx, m)
	case *IcoMutation:
		return c.Ico.mutate(ctx, m)
	case *IcoCouponMutation:
		return c.IcoCoupon.mutate(ctx, m)
	case *IcoHistoryMutation:
		return c.IcoHistory.mutate(ctx, m)
	case *IcoRoundMutation:
		return c.IcoRound.mutate(ctx, m)
	case *TransactionMutation:
		return c.Transaction.mutate(ctx, m)
	case *UserWalletMutation:
		return c.UserWallet.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CurrencyRateClient is a client for the CurrencyRate schema.
type CurrencyRateClient struct {
	config
}

// NewCurrencyRateClient returns a client for the CurrencyRate from the given config.
func NewCurrencyRateClient(c config) *CurrencyRateClient {
	return &CurrencyRateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `currencyrate.Hooks(f(g(h())))`.
func (c *CurrencyRateClient) Use(hooks ...Hook) {
	c.hooks.CurrencyRate = append(c.hooks.CurrencyRate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `currencyrate.Intercept(f(g(h())))`.
func (c *CurrencyRateClient) Intercept(interceptors ...Interceptor) {
	c.inters.CurrencyRate = append(c.inters.CurrencyRate, interceptors...)
}

// Create returns a builder for creating a CurrencyRate entity.
func (c *CurrencyRateClient) Create() *CurrencyRateCreate {
	mutation := newCurrencyRateMutation(c.config, OpCreate)
	return &CurrencyRateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CurrencyRate entities.
func (c *CurrencyRateClient) CreateBulk(builders ...*CurrencyRateCreate) *CurrencyRateCreateBulk {
	return &CurrencyRateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CurrencyRateClient) MapCreateBulk(slice any, setFunc func(*CurrencyRateCreate, int)) *CurrencyRateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CurrencyRateCreateBulk{err: fmt.Errorf("calling to CurrencyRateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CurrencyRateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CurrencyRateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CurrencyRate.
func (c *CurrencyRateClient) Update() *CurrencyRateUpdate {
	mutation := newCurrencyRateMutation(c.config, OpUpdate)
	return &CurrencyRateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CurrencyRateClient) UpdateOne(cr *CurrencyRate) *CurrencyRateUpdateOne {
	mutation := newCurrencyRateMutation(c.config, OpUpdateOne, withCurrencyRate(cr))
	return &CurrencyRateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CurrencyRateClient) UpdateOneID(id int) *CurrencyRateUpdateOne {
	mutation := newCurrencyRateMutation(c.config, OpUpdateOne, withCurrencyRateID(id))
	return &CurrencyRateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CurrencyRate.
func (c *CurrencyRateClient) Delete() *CurrencyRateDelete {
	mutation := newCurrencyRateMutation(c.config, OpDelete)
	return &CurrencyRateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CurrencyRateClient) DeleteOne(cr *CurrencyRate) *CurrencyRateDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CurrencyRateClient) DeleteOneID(id int) *CurrencyRateDeleteOne {
	builder := c.Delete().Where(currencyrate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CurrencyRateDeleteOne{builder}
}

// Query returns a query builder for CurrencyRate.
func (c *CurrencyRateClient) Query() *CurrencyRateQuery {
	return &CurrencyRateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCurrencyRate},
		inters: c.Interceptors(),
	}
}

// Get returns a CurrencyRate entity by its id.
func (c *CurrencyRateClient) Get(ctx context.Context, id int) (*CurrencyRate, error) {
	return c.Query().Where(currencyrate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CurrencyRateClient) GetX(ctx context.Context, id int) *CurrencyRate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CurrencyRateClient) Hooks() []Hook {
	return c.hooks.CurrencyRate
}

// Interceptors returns the client interceptors.
func (c *CurrencyRateClient) Interceptors() []Interceptor {
	return c.inters.CurrencyRate
}

func (c *CurrencyRateClient) mutate(ctx context.Context, m *CurrencyRateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CurrencyRateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CurrencyRateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CurrencyRateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CurrencyRateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CurrencyRate mutation op: %q", m.Op())
	}
}

// IcoClient is a client for the Ico schema.
type IcoClient struct {
	config
}

// NewIcoClient returns a client for the Ico from the given config.
func NewIcoClient(c config) *IcoClient {
	return &IcoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ico.Hooks(f(g(h())))`.
func (c *IcoClient) Use(hooks ...Hook) {
	c.hooks.Ico = append(c.hooks.Ico, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ico.Intercept(f(g(h())))`.
func (c *IcoClient) Intercept(interceptors ...Interceptor) {
	c.inters.Ico = append(c.inters.Ico, interceptors...)
}

// Create returns a builder for creating a Ico entity.
func (c *IcoClient) Create() *IcoCreate {
	mutation := newIcoMutation(c.config, OpCreate)
	return &IcoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ico entities.
func (c *IcoClient) CreateBulk(builders ...*IcoCreate) *IcoCreateBulk {
	return &IcoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IcoClient) MapCreateBulk(slice any, setFunc func(*IcoCreate, int)) *IcoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IcoCreateBulk{err: fmt.Errorf("calling to IcoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IcoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IcoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ico.
func (c *IcoClient) Update() *IcoUpdate {
	mutation := newIcoMutation(c.config, OpUpdate)
	return &IcoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IcoClient) UpdateOne(i *Ico) *IcoUpdateOne {
	mutation := newIcoMutation(c.config, OpUpdateOne, withIco(i))
	return &IcoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IcoClient) UpdateOneID(id xid.ID) *IcoUpdateOne {
	mutation := newIcoMutation(c.config, OpUpdateOne, withIcoID(id))
	return &IcoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ico.
func (c *IcoClient) Delete() *IcoDelete {
	mutation := newIcoMutation(c.config, OpDelete)
	return &IcoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IcoClient) DeleteOne(i *Ico) *IcoDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IcoClient) DeleteOneID(id xid.ID) *IcoDeleteOne {
	builder := c.Delete().Where(ico.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IcoDeleteOne{builder}
}

// Query returns a query builder for Ico.
func (c *IcoClient) Query() *IcoQuery {
	return &IcoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIco},
		inters: c.Interceptors(),
	}
}

// Get returns a Ico entity by its id.
func (c *IcoClient) Get(ctx context.Context, id xid.ID) (*Ico, error) {
	return c.Query().Where(ico.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IcoClient) GetX(ctx context.Context, id xid.ID) *Ico {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *IcoClient) Hooks() []Hook {
	return c.hooks.Ico
}

// Interceptors returns the client interceptors.
func (c *IcoClient) Interceptors() []Interceptor {
	return c.inters.Ico
}

func (c *IcoClient) mutate(ctx context.Context, m *IcoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IcoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IcoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IcoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IcoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Ico mutation op: %q", m.Op())
	}
}

// IcoCouponClient is a client for the IcoCoupon schema.
type IcoCouponClient struct {
	config
}

// NewIcoCouponClient returns a client for the IcoCoupon from the given config.
func NewIcoCouponClient(c config) *IcoCouponClient {
	return &IcoCouponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `icocoupon.Hooks(f(g(h())))`.
func (c *IcoCouponClient) Use(hooks ...Hook) {
	c.hooks.IcoCoupon = append(c.hooks.IcoCoupon, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `icocoupon.Intercept(f(g(h())))`.
func (c *IcoCouponClient) Intercept(interceptors ...Interceptor) {
	c.inters.IcoCoupon = append(c.inters.IcoCoupon, interceptors...)
}

// Create returns a builder for creating a IcoCoupon entity.
func (c *IcoCouponClient) Create() *IcoCouponCreate {
	mutation := newIcoCouponMutation(c.config, OpCreate)
	return &IcoCouponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IcoCoupon entities.
func (c *IcoCouponClient) CreateBulk(builders ...*IcoCouponCreate) *IcoCouponCreateBulk {
	return &IcoCouponCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IcoCouponClient) MapCreateBulk(slice any, setFunc func(*IcoCouponCreate, int)) *IcoCouponCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IcoCouponCreateBulk{err: fmt.Errorf("calling to IcoCouponClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IcoCouponCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IcoCouponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IcoCoupon.
func (c *IcoCouponClient) Update() *IcoCouponUpdate {
	mutation := newIcoCouponMutation(c.config, OpUpdate)
	return &IcoCouponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IcoCouponClient) UpdateOne(ic *IcoCoupon) *IcoCouponUpdateOne {
	mutation := newIcoCouponMutation(c.config, OpUpdateOne, withIcoCoupon(ic))
	return &IcoCouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IcoCouponClient) UpdateOneID(id xid.ID) *IcoCouponUpdateOne {
	mutation := newIcoCouponMutation(c.config, OpUpdateOne, withIcoCouponID(id))
	return &IcoCouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IcoCoupon.
func (c *IcoCouponClient) Delete() *IcoCouponDelete {
	mutation := newIcoCouponMutation(c.config, OpDelete)
	return &IcoCouponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IcoCouponClient) DeleteOne(ic *IcoCoupon) *IcoCouponDeleteOne {
	return c.DeleteOneID(ic.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IcoCouponClient) DeleteOneID(id xid.ID) *IcoCouponDeleteOne {
	builder := c.Delete().Where(icocoupon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IcoCouponDeleteOne{builder}
}

// Query returns a query builder for IcoCoupon.
func (c *IcoCouponClient) Query() *IcoCouponQuery {
	return &IcoCouponQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIcoCoupon},
		inters: c.Interceptors(),
	}
}

// Get returns a IcoCoupon entity by its id.
func (c *IcoCouponClient) Get(ctx context.Context, id xid.ID) (*IcoCoupon, error) {
	return c.Query().Where(icocoupon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IcoCouponClient) GetX(ctx context.Context, id xid.ID) *IcoCoupon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *IcoCouponClient) Hooks() []Hook {
	return c.hooks.IcoCoupon
}

// Interceptors returns the client interceptors.
func (c *IcoCouponClient) Interceptors() []Interceptor {
	return c.inters.IcoCoupon
}

func (c *IcoCouponClient) mutate(ctx context.Context, m *IcoCouponMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IcoCouponCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IcoCouponUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IcoCouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IcoCouponDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown IcoCoupon mutation op: %q", m.Op())
	}
}

// IcoHistoryClient is a client for the IcoHistory schema.
type IcoHistoryClient struct {
	config
}

// NewIcoHistoryClient returns a client for the IcoHistory from the given config.
func NewIcoHistoryClient(c config) *IcoHistoryClient {
	return &IcoHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `icohistory.Hooks(f(g(h())))`.
func (c *IcoHistoryClient) Use(hooks ...Hook) {
	c.hooks.IcoHistory = append(c.hooks.IcoHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `icohistory.Intercept(f(g(h())))`.
func (c *IcoHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.IcoHistory = append(c.inters.IcoHistory, interceptors...)
}

// Create returns a builder for creating a IcoHistory entity.
func (c *IcoHistoryClient) Create() *IcoHistoryCreate {
	mutation := newIcoHistoryMutation(c.config, OpCreate)
	return &IcoHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IcoHistory entities.
func (c *IcoHistoryClient) CreateBulk(builders ...*IcoHistoryCreate) *IcoHistoryCreateBulk {
	return &IcoHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IcoHistoryClient) MapCreateBulk(slice any, setFunc func(*IcoHistoryCreate, int)) *IcoHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IcoHistoryCreateBulk{err: fmt.Errorf("calling to IcoHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IcoHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IcoHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IcoHistory.
func (c *IcoHistoryClient) Update() *IcoHistoryUpdate {
	mutation := newIcoHistoryMutation(c.config, OpUpdate)
	return &IcoHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IcoHistoryClient) UpdateOne(ih *IcoHistory) *IcoHistoryUpdateOne {
	mutation := newIcoHistoryMutation(c.config, OpUpdateOne, withIcoHistory(ih))
	return &IcoHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IcoHistoryClient) UpdateOneID(id xid.ID) *IcoHistoryUpdateOne {
	mutation := newIcoHistoryMutation(c.config, OpUpdateOne, withIcoHistoryID(id))
	return &IcoHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IcoHistory.
func (c *IcoHistoryClient) Delete() *IcoHistoryDelete {
	mutation := newIcoHistoryMutation(c.config, OpDelete)
	return &IcoHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IcoHistoryClient) DeleteOne(ih *IcoHistory) *IcoHistoryDeleteOne {
	return c.DeleteOneID(ih.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IcoHistoryClient) DeleteOneID(id xid.ID) *IcoHistoryDeleteOne {
	builder := c.Delete().Where(icohistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IcoHistoryDeleteOne{builder}
}

// Query returns a query builder for IcoHistory.
func (c *IcoHistoryClient) Query() *IcoHistoryQuery {
	return &IcoHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIcoHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a IcoHistory entity by its id.
func (c *IcoHistoryClient) Get(ctx context.Context, id xid.ID) (*IcoHistory, error) {
	return c.Query().Where(icohistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IcoHistoryClient) GetX(ctx context.Context, id xid.ID) *IcoHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *IcoHistoryClient) Hooks() []Hook {
	return c.hooks.IcoHistory
}

// Interceptors returns the client interceptors.
func (c *IcoHistoryClient) Interceptors() []Interceptor {
	return c.inters.IcoHistory
}

func (c *IcoHistoryClient) mutate(ctx context.Context, m *IcoHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IcoHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IcoHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IcoHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IcoHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown IcoHistory mutation op: %q", m.Op())
	}
}

// IcoRoundClient is a client for the IcoRound schema.
type IcoRoundClient struct {
	config
}

// NewIcoRoundClient returns a client for the IcoRound from the given config.
func NewIcoRoundClient(c config) *IcoRoundClient {
	return &IcoRoundClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `icoround.Hooks(f(g(h())))`.
func (c *IcoRoundClient) Use(hooks ...Hook) {
	c.hooks.IcoRound = append(c.hooks.IcoRound, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `icoround.Intercept(f(g(h())))`.
func (c *IcoRoundClient) Intercept(interceptors ...Interceptor) {
	c.inters.IcoRound = append(c.inters.IcoRound, interceptors...)
}

// Create returns a builder for creating a IcoRound entity.
func (c *IcoRoundClient) Create() *IcoRoundCreate {
	mutation := newIcoRoundMutation(c.config, OpCreate)
	return &IcoRoundCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IcoRound entities.
func (c *IcoRoundClient) CreateBulk(builders ...*IcoRoundCreate) *IcoRoundCreateBulk {
	return &IcoRoundCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IcoRoundClient) MapCreateBulk(slice any, setFunc func(*IcoRoundCreate, int)) *IcoRoundCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IcoRoundCreateBulk{err: fmt.Errorf("calling to IcoRoundClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IcoRoundCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IcoRoundCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IcoRound.
func (c *IcoRoundClient) Update() *IcoRoundUpdate {
	mutation := newIcoRoundMutation(c.config, OpUpdate)
	return &IcoRoundUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IcoRoundClient) UpdateOne(ir *IcoRound) *IcoRoundUpdateOne {
	mutation := newIcoRoundMutation(c.config, OpUpdateOne, withIcoRound(ir))
	return &IcoRoundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IcoRoundClient) UpdateOneID(id xid.ID) *IcoRoundUpdateOne {
	mutation := newIcoRoundMutation(c.config, OpUpdateOne, withIcoRoundID(id))
	return &IcoRoundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IcoRound.
func (c *IcoRoundClient) Delete() *IcoRoundDelete {
	mutation := newIcoRoundMutation(c.config, OpDelete)
	return &IcoRoundDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IcoRoundClient) DeleteOne(ir *IcoRound) *IcoRoundDeleteOne {
	return c.DeleteOneID(ir.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IcoRoundClient) DeleteOneID(id xid.ID) *IcoRoundDeleteOne {
	builder := c.Delete().Where(icoround.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IcoRoundDeleteOne{builder}
}

// Query returns a query builder for IcoRound.
func (c *IcoRoundClient) Query() *IcoRoundQuery {
	return &IcoRoundQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIcoRound},
		inters: c.Interceptors(),
	}
}

// Get returns a IcoRound entity by its id.
func (c *IcoRoundClient) Get(ctx context.Context, id xid.ID) (*IcoRound, error) {
	return c.Query().Where(icoround.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IcoRoundClient) GetX(ctx context.Context, id xid.ID) *IcoRound {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *IcoRoundClient) Hooks() []Hook {
	return c.hooks.IcoRound
}

// Interceptors returns the client interceptors.
func (c *IcoRoundClient) Interceptors() []Interceptor {
	return c.inters.IcoRound
}

func (c *IcoRoundClient) mutate(ctx context.Context, m *IcoRoundMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IcoRoundCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IcoRoundUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IcoRoundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IcoRoundDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown IcoRound mutation op: %q", m.Op())
	}
}

// TransactionClient is a client for the Transaction schema.
type TransactionClient struct {
	config
}

// NewTransactionClient returns a client for the Transaction from the given config.
func NewTransactionClient(c config) *TransactionClient {
	return &TransactionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transaction.Hooks(f(g(h())))`.
func (c *TransactionClient) Use(hooks ...Hook) {
	c.hooks.Transaction = append(c.hooks.Transaction, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `transaction.Intercept(f(g(h())))`.
func (c *TransactionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Transaction = append(c.inters.Transaction, interceptors...)
}

// Create returns a builder for creating a Transaction entity.
func (c *TransactionClient) Create() *TransactionCreate {
	mutation := newTransactionMutation(c.config, OpCreate)
	return &TransactionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transaction entities.
func (c *TransactionClient) CreateBulk(builders ...*TransactionCreate) *TransactionCreateBulk {
	return &TransactionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TransactionClient) MapCreateBulk(slice any, setFunc func(*TransactionCreate, int)) *TransactionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TransactionCreateBulk{err: fmt.Errorf("calling to TransactionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TransactionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TransactionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transaction.
func (c *TransactionClient) Update() *TransactionUpdate {
	mutation := newTransactionMutation(c.config, OpUpdate)
	return &TransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionClient) UpdateOne(t *Transaction) *TransactionUpdateOne {
	mutation := newTransactionMutation(c.config, OpUpdateOne, withTransaction(t))
	return &TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionClient) UpdateOneID(id xid.ID) *TransactionUpdateOne {
	mutation := newTransactionMutation(c.config, OpUpdateOne, withTransactionID(id))
	return &TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transaction.
func (c *TransactionClient) Delete() *TransactionDelete {
	mutation := newTransactionMutation(c.config, OpDelete)
	return &TransactionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TransactionClient) DeleteOne(t *Transaction) *TransactionDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TransactionClient) DeleteOneID(id xid.ID) *TransactionDeleteOne {
	builder := c.Delete().Where(transaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionDeleteOne{builder}
}

// Query returns a query builder for Transaction.
func (c *TransactionClient) Query() *TransactionQuery {
	return &TransactionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTransaction},
		inters: c.Interceptors(),
	}
}

// Get returns a Transaction entity by its id.
func (c *TransactionClient) Get(ctx context.Context, id xid.ID) (*Transaction, error) {
	return c.Query().Where(transaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionClient) GetX(ctx context.Context, id xid.ID) *Transaction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TransactionClient) Hooks() []Hook {
	return c.hooks.Transaction
}

// Interceptors returns the client interceptors.
func (c *TransactionClient) Interceptors() []Interceptor {
	return c.inters.Transaction
}

func (c *TransactionClient) mutate(ctx context.Context, m *TransactionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TransactionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TransactionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Transaction mutation op: %q", m.Op())
	}
}

// UserWalletClient is a client for the UserWallet schema.
type UserWalletClient struct {
	config
}

// NewUserWalletClient returns a client for the UserWallet from the given config.
func NewUserWalletClient(c config) *UserWalletClient {
	return &UserWalletClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userwallet.Hooks(f(g(h())))`.
func (c *UserWalletClient) Use(hooks ...Hook) {
	c.hooks.UserWallet = append(c.hooks.UserWallet, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userwallet.Intercept(f(g(h())))`.
func (c *UserWalletClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserWallet = append(c.inters.UserWallet, interceptors...)
}

// Create returns a builder for creating a UserWallet entity.
func (c *UserWalletClient) Create() *UserWalletCreate {
	mutation := newUserWalletMutation(c.config, OpCreate)
	return &UserWalletCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserWallet entities.
func (c *UserWalletClient) CreateBulk(builders ...*UserWalletCreate) *UserWalletCreateBulk {
	return &UserWalletCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserWalletClient) MapCreateBulk(slice any, setFunc func(*UserWalletCreate, int)) *UserWalletCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserWalletCreateBulk{err: fmt.Errorf("calling to UserWalletClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserWalletCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserWalletCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserWallet.
func (c *UserWalletClient) Update() *UserWalletUpdate {
	mutation := newUserWalletMutation(c.config, OpUpdate)
	return &UserWalletUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserWalletClient) UpdateOne(uw *UserWallet) *UserWalletUpdateOne {
	mutation := newUserWalletMutation(c.config, OpUpdateOne, withUserWallet(uw))
	return &UserWalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserWalletClient) UpdateOneID(id xid.ID) *UserWalletUpdateOne {
	mutation := newUserWalletMutation(c.config, OpUpdateOne, withUserWalletID(id))
	return &UserWalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserWallet.
func (c *UserWalletClient) Delete() *UserWalletDelete {
	mutation := newUserWalletMutation(c.config, OpDelete)
	return &UserWalletDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserWalletClient) DeleteOne(uw *UserWallet) *UserWalletDeleteOne {
	return c.DeleteOneID(uw.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserWalletClient) DeleteOneID(id xid.ID) *UserWalletDeleteOne {
	builder := c.Delete().Where(userwallet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserWalletDeleteOne{builder}
}

// Query returns a query builder for UserWallet.
func (c *UserWalletClient) Query() *UserWalletQuery {
	return &UserWalletQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserWallet},
		inters: c.Interceptors(),
	}
}

// Get returns a UserWallet entity by its id.
func (c *UserWalletClient) Get(ctx context.Context, id xid.ID) (*UserWallet, error) {
	return c.Query().Where(userwallet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserWalletClient) GetX(ctx context.Context, id xid.ID) *UserWallet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserWalletClient) Hooks() []Hook {
	return c.hooks.UserWallet
}

// Interceptors returns the client interceptors.
func (c *UserWalletClient) Interceptors() []Interceptor {
	return c.inters.UserWallet
}

func (c *UserWalletClient) mutate(ctx context.Context, m *UserWalletMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserWalletCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserWalletUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserWalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserWalletDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserWallet mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		CurrencyRate, Ico, IcoCoupon, IcoHistory, IcoRound, Transaction,
		UserWallet []ent.Hook
	}
	inters struct {
		CurrencyRate, Ico, IcoCoupon, IcoHistory, IcoRound, Transaction,
		UserWallet []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
