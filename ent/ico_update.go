// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/indikay/wallet-service/ent/ico"
	"github.com/indikay/wallet-service/ent/predicate"
)

// IcoUpdate is the builder for updating Ico entities.
type IcoUpdate struct {
	config
	hooks     []Hook
	mutation  *IcoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IcoUpdate builder.
func (iu *IcoUpdate) Where(ps ...predicate.Ico) *IcoUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *IcoUpdate) SetUpdatedAt(t time.Time) *IcoUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetRoundID sets the "round_id" field.
func (iu *IcoUpdate) SetRoundID(i int32) *IcoUpdate {
	iu.mutation.ResetRoundID()
	iu.mutation.SetRoundID(i)
	return iu
}

// SetNillableRoundID sets the "round_id" field if the given value is not nil.
func (iu *IcoUpdate) SetNillableRoundID(i *int32) *IcoUpdate {
	if i != nil {
		iu.SetRoundID(*i)
	}
	return iu
}

// AddRoundID adds i to the "round_id" field.
func (iu *IcoUpdate) AddRoundID(i int32) *IcoUpdate {
	iu.mutation.AddRoundID(i)
	return iu
}

// SetRoundName sets the "round_name" field.
func (iu *IcoUpdate) SetRoundName(s string) *IcoUpdate {
	iu.mutation.SetRoundName(s)
	return iu
}

// SetNillableRoundName sets the "round_name" field if the given value is not nil.
func (iu *IcoUpdate) SetNillableRoundName(s *string) *IcoUpdate {
	if s != nil {
		iu.SetRoundName(*s)
	}
	return iu
}

// SetPrice sets the "price" field.
func (iu *IcoUpdate) SetPrice(s string) *IcoUpdate {
	iu.mutation.SetPrice(s)
	return iu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (iu *IcoUpdate) SetNillablePrice(s *string) *IcoUpdate {
	if s != nil {
		iu.SetPrice(*s)
	}
	return iu
}

// SetNumToken sets the "num_token" field.
func (iu *IcoUpdate) SetNumToken(s string) *IcoUpdate {
	iu.mutation.SetNumToken(s)
	return iu
}

// SetNillableNumToken sets the "num_token" field if the given value is not nil.
func (iu *IcoUpdate) SetNillableNumToken(s *string) *IcoUpdate {
	if s != nil {
		iu.SetNumToken(*s)
	}
	return iu
}

// SetNumSub sets the "num_sub" field.
func (iu *IcoUpdate) SetNumSub(i int32) *IcoUpdate {
	iu.mutation.ResetNumSub()
	iu.mutation.SetNumSub(i)
	return iu
}

// SetNillableNumSub sets the "num_sub" field if the given value is not nil.
func (iu *IcoUpdate) SetNillableNumSub(i *int32) *IcoUpdate {
	if i != nil {
		iu.SetNumSub(*i)
	}
	return iu
}

// AddNumSub adds i to the "num_sub" field.
func (iu *IcoUpdate) AddNumSub(i int32) *IcoUpdate {
	iu.mutation.AddNumSub(i)
	return iu
}

// SetPriceGap sets the "price_gap" field.
func (iu *IcoUpdate) SetPriceGap(s string) *IcoUpdate {
	iu.mutation.SetPriceGap(s)
	return iu
}

// SetNillablePriceGap sets the "price_gap" field if the given value is not nil.
func (iu *IcoUpdate) SetNillablePriceGap(s *string) *IcoUpdate {
	if s != nil {
		iu.SetPriceGap(*s)
	}
	return iu
}

// SetEndedAt sets the "ended_at" field.
func (iu *IcoUpdate) SetEndedAt(t time.Time) *IcoUpdate {
	iu.mutation.SetEndedAt(t)
	return iu
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (iu *IcoUpdate) SetNillableEndedAt(t *time.Time) *IcoUpdate {
	if t != nil {
		iu.SetEndedAt(*t)
	}
	return iu
}

// ClearEndedAt clears the value of the "ended_at" field.
func (iu *IcoUpdate) ClearEndedAt() *IcoUpdate {
	iu.mutation.ClearEndedAt()
	return iu
}

// Mutation returns the IcoMutation object of the builder.
func (iu *IcoUpdate) Mutation() *IcoMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IcoUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IcoUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IcoUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IcoUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *IcoUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := ico.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iu *IcoUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IcoUpdate {
	iu.modifiers = append(iu.modifiers, modifiers...)
	return iu
}

func (iu *IcoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ico.Table, ico.Columns, sqlgraph.NewFieldSpec(ico.FieldID, field.TypeString))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(ico.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.RoundID(); ok {
		_spec.SetField(ico.FieldRoundID, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedRoundID(); ok {
		_spec.AddField(ico.FieldRoundID, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.RoundName(); ok {
		_spec.SetField(ico.FieldRoundName, field.TypeString, value)
	}
	if value, ok := iu.mutation.Price(); ok {
		_spec.SetField(ico.FieldPrice, field.TypeString, value)
	}
	if value, ok := iu.mutation.NumToken(); ok {
		_spec.SetField(ico.FieldNumToken, field.TypeString, value)
	}
	if value, ok := iu.mutation.NumSub(); ok {
		_spec.SetField(ico.FieldNumSub, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedNumSub(); ok {
		_spec.AddField(ico.FieldNumSub, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.PriceGap(); ok {
		_spec.SetField(ico.FieldPriceGap, field.TypeString, value)
	}
	if value, ok := iu.mutation.EndedAt(); ok {
		_spec.SetField(ico.FieldEndedAt, field.TypeTime, value)
	}
	if iu.mutation.EndedAtCleared() {
		_spec.ClearField(ico.FieldEndedAt, field.TypeTime)
	}
	_spec.AddModifiers(iu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ico.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IcoUpdateOne is the builder for updating a single Ico entity.
type IcoUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IcoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *IcoUpdateOne) SetUpdatedAt(t time.Time) *IcoUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetRoundID sets the "round_id" field.
func (iuo *IcoUpdateOne) SetRoundID(i int32) *IcoUpdateOne {
	iuo.mutation.ResetRoundID()
	iuo.mutation.SetRoundID(i)
	return iuo
}

// SetNillableRoundID sets the "round_id" field if the given value is not nil.
func (iuo *IcoUpdateOne) SetNillableRoundID(i *int32) *IcoUpdateOne {
	if i != nil {
		iuo.SetRoundID(*i)
	}
	return iuo
}

// AddRoundID adds i to the "round_id" field.
func (iuo *IcoUpdateOne) AddRoundID(i int32) *IcoUpdateOne {
	iuo.mutation.AddRoundID(i)
	return iuo
}

// SetRoundName sets the "round_name" field.
func (iuo *IcoUpdateOne) SetRoundName(s string) *IcoUpdateOne {
	iuo.mutation.SetRoundName(s)
	return iuo
}

// SetNillableRoundName sets the "round_name" field if the given value is not nil.
func (iuo *IcoUpdateOne) SetNillableRoundName(s *string) *IcoUpdateOne {
	if s != nil {
		iuo.SetRoundName(*s)
	}
	return iuo
}

// SetPrice sets the "price" field.
func (iuo *IcoUpdateOne) SetPrice(s string) *IcoUpdateOne {
	iuo.mutation.SetPrice(s)
	return iuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (iuo *IcoUpdateOne) SetNillablePrice(s *string) *IcoUpdateOne {
	if s != nil {
		iuo.SetPrice(*s)
	}
	return iuo
}

// SetNumToken sets the "num_token" field.
func (iuo *IcoUpdateOne) SetNumToken(s string) *IcoUpdateOne {
	iuo.mutation.SetNumToken(s)
	return iuo
}

// SetNillableNumToken sets the "num_token" field if the given value is not nil.
func (iuo *IcoUpdateOne) SetNillableNumToken(s *string) *IcoUpdateOne {
	if s != nil {
		iuo.SetNumToken(*s)
	}
	return iuo
}

// SetNumSub sets the "num_sub" field.
func (iuo *IcoUpdateOne) SetNumSub(i int32) *IcoUpdateOne {
	iuo.mutation.ResetNumSub()
	iuo.mutation.SetNumSub(i)
	return iuo
}

// SetNillableNumSub sets the "num_sub" field if the given value is not nil.
func (iuo *IcoUpdateOne) SetNillableNumSub(i *int32) *IcoUpdateOne {
	if i != nil {
		iuo.SetNumSub(*i)
	}
	return iuo
}

// AddNumSub adds i to the "num_sub" field.
func (iuo *IcoUpdateOne) AddNumSub(i int32) *IcoUpdateOne {
	iuo.mutation.AddNumSub(i)
	return iuo
}

// SetPriceGap sets the "price_gap" field.
func (iuo *IcoUpdateOne) SetPriceGap(s string) *IcoUpdateOne {
	iuo.mutation.SetPriceGap(s)
	return iuo
}

// SetNillablePriceGap sets the "price_gap" field if the given value is not nil.
func (iuo *IcoUpdateOne) SetNillablePriceGap(s *string) *IcoUpdateOne {
	if s != nil {
		iuo.SetPriceGap(*s)
	}
	return iuo
}

// SetEndedAt sets the "ended_at" field.
func (iuo *IcoUpdateOne) SetEndedAt(t time.Time) *IcoUpdateOne {
	iuo.mutation.SetEndedAt(t)
	return iuo
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (iuo *IcoUpdateOne) SetNillableEndedAt(t *time.Time) *IcoUpdateOne {
	if t != nil {
		iuo.SetEndedAt(*t)
	}
	return iuo
}

// ClearEndedAt clears the value of the "ended_at" field.
func (iuo *IcoUpdateOne) ClearEndedAt() *IcoUpdateOne {
	iuo.mutation.ClearEndedAt()
	return iuo
}

// Mutation returns the IcoMutation object of the builder.
func (iuo *IcoUpdateOne) Mutation() *IcoMutation {
	return iuo.mutation
}

// Where appends a list predicates to the IcoUpdate builder.
func (iuo *IcoUpdateOne) Where(ps ...predicate.Ico) *IcoUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IcoUpdateOne) Select(field string, fields ...string) *IcoUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Ico entity.
func (iuo *IcoUpdateOne) Save(ctx context.Context) (*Ico, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IcoUpdateOne) SaveX(ctx context.Context) *Ico {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IcoUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IcoUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *IcoUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := ico.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iuo *IcoUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IcoUpdateOne {
	iuo.modifiers = append(iuo.modifiers, modifiers...)
	return iuo
}

func (iuo *IcoUpdateOne) sqlSave(ctx context.Context) (_node *Ico, err error) {
	_spec := sqlgraph.NewUpdateSpec(ico.Table, ico.Columns, sqlgraph.NewFieldSpec(ico.FieldID, field.TypeString))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ico.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ico.FieldID)
		for _, f := range fields {
			if !ico.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ico.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(ico.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.RoundID(); ok {
		_spec.SetField(ico.FieldRoundID, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedRoundID(); ok {
		_spec.AddField(ico.FieldRoundID, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.RoundName(); ok {
		_spec.SetField(ico.FieldRoundName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Price(); ok {
		_spec.SetField(ico.FieldPrice, field.TypeString, value)
	}
	if value, ok := iuo.mutation.NumToken(); ok {
		_spec.SetField(ico.FieldNumToken, field.TypeString, value)
	}
	if value, ok := iuo.mutation.NumSub(); ok {
		_spec.SetField(ico.FieldNumSub, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedNumSub(); ok {
		_spec.AddField(ico.FieldNumSub, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.PriceGap(); ok {
		_spec.SetField(ico.FieldPriceGap, field.TypeString, value)
	}
	if value, ok := iuo.mutation.EndedAt(); ok {
		_spec.SetField(ico.FieldEndedAt, field.TypeTime, value)
	}
	if iuo.mutation.EndedAtCleared() {
		_spec.ClearField(ico.FieldEndedAt, field.TypeTime)
	}
	_spec.AddModifiers(iuo.modifiers...)
	_node = &Ico{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ico.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
