// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/indikay/wallet-service/ent/predicate"
	"github.com/indikay/wallet-service/ent/userwallet"
)

// UserWalletUpdate is the builder for updating UserWallet entities.
type UserWalletUpdate struct {
	config
	hooks     []Hook
	mutation  *UserWalletMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserWalletUpdate builder.
func (uwu *UserWalletUpdate) Where(ps ...predicate.UserWallet) *UserWalletUpdate {
	uwu.mutation.Where(ps...)
	return uwu
}

// SetUpdatedAt sets the "updated_at" field.
func (uwu *UserWalletUpdate) SetUpdatedAt(t time.Time) *UserWalletUpdate {
	uwu.mutation.SetUpdatedAt(t)
	return uwu
}

// SetUserID sets the "user_id" field.
func (uwu *UserWalletUpdate) SetUserID(s string) *UserWalletUpdate {
	uwu.mutation.SetUserID(s)
	return uwu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uwu *UserWalletUpdate) SetNillableUserID(s *string) *UserWalletUpdate {
	if s != nil {
		uwu.SetUserID(*s)
	}
	return uwu
}

// SetType sets the "type" field.
func (uwu *UserWalletUpdate) SetType(s string) *UserWalletUpdate {
	uwu.mutation.SetType(s)
	return uwu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uwu *UserWalletUpdate) SetNillableType(s *string) *UserWalletUpdate {
	if s != nil {
		uwu.SetType(*s)
	}
	return uwu
}

// SetSymbol sets the "symbol" field.
func (uwu *UserWalletUpdate) SetSymbol(s string) *UserWalletUpdate {
	uwu.mutation.SetSymbol(s)
	return uwu
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (uwu *UserWalletUpdate) SetNillableSymbol(s *string) *UserWalletUpdate {
	if s != nil {
		uwu.SetSymbol(*s)
	}
	return uwu
}

// SetIsActive sets the "is_active" field.
func (uwu *UserWalletUpdate) SetIsActive(b bool) *UserWalletUpdate {
	uwu.mutation.SetIsActive(b)
	return uwu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (uwu *UserWalletUpdate) SetNillableIsActive(b *bool) *UserWalletUpdate {
	if b != nil {
		uwu.SetIsActive(*b)
	}
	return uwu
}

// SetBalance sets the "balance" field.
func (uwu *UserWalletUpdate) SetBalance(s string) *UserWalletUpdate {
	uwu.mutation.SetBalance(s)
	return uwu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (uwu *UserWalletUpdate) SetNillableBalance(s *string) *UserWalletUpdate {
	if s != nil {
		uwu.SetBalance(*s)
	}
	return uwu
}

// Mutation returns the UserWalletMutation object of the builder.
func (uwu *UserWalletUpdate) Mutation() *UserWalletMutation {
	return uwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uwu *UserWalletUpdate) Save(ctx context.Context) (int, error) {
	uwu.defaults()
	return withHooks(ctx, uwu.sqlSave, uwu.mutation, uwu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uwu *UserWalletUpdate) SaveX(ctx context.Context) int {
	affected, err := uwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uwu *UserWalletUpdate) Exec(ctx context.Context) error {
	_, err := uwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwu *UserWalletUpdate) ExecX(ctx context.Context) {
	if err := uwu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uwu *UserWalletUpdate) defaults() {
	if _, ok := uwu.mutation.UpdatedAt(); !ok {
		v := userwallet.UpdateDefaultUpdatedAt()
		uwu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uwu *UserWalletUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserWalletUpdate {
	uwu.modifiers = append(uwu.modifiers, modifiers...)
	return uwu
}

func (uwu *UserWalletUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userwallet.Table, userwallet.Columns, sqlgraph.NewFieldSpec(userwallet.FieldID, field.TypeString))
	if ps := uwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uwu.mutation.UpdatedAt(); ok {
		_spec.SetField(userwallet.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uwu.mutation.UserID(); ok {
		_spec.SetField(userwallet.FieldUserID, field.TypeString, value)
	}
	if value, ok := uwu.mutation.GetType(); ok {
		_spec.SetField(userwallet.FieldType, field.TypeString, value)
	}
	if value, ok := uwu.mutation.Symbol(); ok {
		_spec.SetField(userwallet.FieldSymbol, field.TypeString, value)
	}
	if value, ok := uwu.mutation.IsActive(); ok {
		_spec.SetField(userwallet.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := uwu.mutation.Balance(); ok {
		_spec.SetField(userwallet.FieldBalance, field.TypeString, value)
	}
	_spec.AddModifiers(uwu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userwallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uwu.mutation.done = true
	return n, nil
}

// UserWalletUpdateOne is the builder for updating a single UserWallet entity.
type UserWalletUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserWalletMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (uwuo *UserWalletUpdateOne) SetUpdatedAt(t time.Time) *UserWalletUpdateOne {
	uwuo.mutation.SetUpdatedAt(t)
	return uwuo
}

// SetUserID sets the "user_id" field.
func (uwuo *UserWalletUpdateOne) SetUserID(s string) *UserWalletUpdateOne {
	uwuo.mutation.SetUserID(s)
	return uwuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uwuo *UserWalletUpdateOne) SetNillableUserID(s *string) *UserWalletUpdateOne {
	if s != nil {
		uwuo.SetUserID(*s)
	}
	return uwuo
}

// SetType sets the "type" field.
func (uwuo *UserWalletUpdateOne) SetType(s string) *UserWalletUpdateOne {
	uwuo.mutation.SetType(s)
	return uwuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uwuo *UserWalletUpdateOne) SetNillableType(s *string) *UserWalletUpdateOne {
	if s != nil {
		uwuo.SetType(*s)
	}
	return uwuo
}

// SetSymbol sets the "symbol" field.
func (uwuo *UserWalletUpdateOne) SetSymbol(s string) *UserWalletUpdateOne {
	uwuo.mutation.SetSymbol(s)
	return uwuo
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (uwuo *UserWalletUpdateOne) SetNillableSymbol(s *string) *UserWalletUpdateOne {
	if s != nil {
		uwuo.SetSymbol(*s)
	}
	return uwuo
}

// SetIsActive sets the "is_active" field.
func (uwuo *UserWalletUpdateOne) SetIsActive(b bool) *UserWalletUpdateOne {
	uwuo.mutation.SetIsActive(b)
	return uwuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (uwuo *UserWalletUpdateOne) SetNillableIsActive(b *bool) *UserWalletUpdateOne {
	if b != nil {
		uwuo.SetIsActive(*b)
	}
	return uwuo
}

// SetBalance sets the "balance" field.
func (uwuo *UserWalletUpdateOne) SetBalance(s string) *UserWalletUpdateOne {
	uwuo.mutation.SetBalance(s)
	return uwuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (uwuo *UserWalletUpdateOne) SetNillableBalance(s *string) *UserWalletUpdateOne {
	if s != nil {
		uwuo.SetBalance(*s)
	}
	return uwuo
}

// Mutation returns the UserWalletMutation object of the builder.
func (uwuo *UserWalletUpdateOne) Mutation() *UserWalletMutation {
	return uwuo.mutation
}

// Where appends a list predicates to the UserWalletUpdate builder.
func (uwuo *UserWalletUpdateOne) Where(ps ...predicate.UserWallet) *UserWalletUpdateOne {
	uwuo.mutation.Where(ps...)
	return uwuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uwuo *UserWalletUpdateOne) Select(field string, fields ...string) *UserWalletUpdateOne {
	uwuo.fields = append([]string{field}, fields...)
	return uwuo
}

// Save executes the query and returns the updated UserWallet entity.
func (uwuo *UserWalletUpdateOne) Save(ctx context.Context) (*UserWallet, error) {
	uwuo.defaults()
	return withHooks(ctx, uwuo.sqlSave, uwuo.mutation, uwuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uwuo *UserWalletUpdateOne) SaveX(ctx context.Context) *UserWallet {
	node, err := uwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uwuo *UserWalletUpdateOne) Exec(ctx context.Context) error {
	_, err := uwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uwuo *UserWalletUpdateOne) ExecX(ctx context.Context) {
	if err := uwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uwuo *UserWalletUpdateOne) defaults() {
	if _, ok := uwuo.mutation.UpdatedAt(); !ok {
		v := userwallet.UpdateDefaultUpdatedAt()
		uwuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uwuo *UserWalletUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserWalletUpdateOne {
	uwuo.modifiers = append(uwuo.modifiers, modifiers...)
	return uwuo
}

func (uwuo *UserWalletUpdateOne) sqlSave(ctx context.Context) (_node *UserWallet, err error) {
	_spec := sqlgraph.NewUpdateSpec(userwallet.Table, userwallet.Columns, sqlgraph.NewFieldSpec(userwallet.FieldID, field.TypeString))
	id, ok := uwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserWallet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userwallet.FieldID)
		for _, f := range fields {
			if !userwallet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userwallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uwuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userwallet.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uwuo.mutation.UserID(); ok {
		_spec.SetField(userwallet.FieldUserID, field.TypeString, value)
	}
	if value, ok := uwuo.mutation.GetType(); ok {
		_spec.SetField(userwallet.FieldType, field.TypeString, value)
	}
	if value, ok := uwuo.mutation.Symbol(); ok {
		_spec.SetField(userwallet.FieldSymbol, field.TypeString, value)
	}
	if value, ok := uwuo.mutation.IsActive(); ok {
		_spec.SetField(userwallet.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := uwuo.mutation.Balance(); ok {
		_spec.SetField(userwallet.FieldBalance, field.TypeString, value)
	}
	_spec.AddModifiers(uwuo.modifiers...)
	_node = &UserWallet{config: uwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userwallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uwuo.mutation.done = true
	return _node, nil
}
