// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/indikay/wallet-service/ent/transaction"
	"github.com/rs/xid"
)

// TransactionCreate is the builder for creating a Transaction entity.
type TransactionCreate struct {
	config
	mutation *TransactionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TransactionCreate) SetCreatedAt(t time.Time) *TransactionCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableCreatedAt(t *time.Time) *TransactionCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TransactionCreate) SetUpdatedAt(t time.Time) *TransactionCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableUpdatedAt(t *time.Time) *TransactionCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetTransType sets the "trans_type" field.
func (tc *TransactionCreate) SetTransType(s string) *TransactionCreate {
	tc.mutation.SetTransType(s)
	return tc
}

// SetSource sets the "source" field.
func (tc *TransactionCreate) SetSource(s string) *TransactionCreate {
	tc.mutation.SetSource(s)
	return tc
}

// SetSrcSymbol sets the "src_symbol" field.
func (tc *TransactionCreate) SetSrcSymbol(s string) *TransactionCreate {
	tc.mutation.SetSrcSymbol(s)
	return tc
}

// SetSrcAmount sets the "src_amount" field.
func (tc *TransactionCreate) SetSrcAmount(s string) *TransactionCreate {
	tc.mutation.SetSrcAmount(s)
	return tc
}

// SetDestination sets the "destination" field.
func (tc *TransactionCreate) SetDestination(s string) *TransactionCreate {
	tc.mutation.SetDestination(s)
	return tc
}

// SetDestSymbol sets the "dest_symbol" field.
func (tc *TransactionCreate) SetDestSymbol(s string) *TransactionCreate {
	tc.mutation.SetDestSymbol(s)
	return tc
}

// SetDestAmount sets the "dest_amount" field.
func (tc *TransactionCreate) SetDestAmount(s string) *TransactionCreate {
	tc.mutation.SetDestAmount(s)
	return tc
}

// SetRate sets the "rate" field.
func (tc *TransactionCreate) SetRate(s string) *TransactionCreate {
	tc.mutation.SetRate(s)
	return tc
}

// SetSourceService sets the "source_service" field.
func (tc *TransactionCreate) SetSourceService(s string) *TransactionCreate {
	tc.mutation.SetSourceService(s)
	return tc
}

// SetSourceID sets the "source_id" field.
func (tc *TransactionCreate) SetSourceID(s string) *TransactionCreate {
	tc.mutation.SetSourceID(s)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TransactionCreate) SetStatus(s string) *TransactionCreate {
	tc.mutation.SetStatus(s)
	return tc
}

// SetID sets the "id" field.
func (tc *TransactionCreate) SetID(x xid.ID) *TransactionCreate {
	tc.mutation.SetID(x)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableID(x *xid.ID) *TransactionCreate {
	if x != nil {
		tc.SetID(*x)
	}
	return tc
}

// Mutation returns the TransactionMutation object of the builder.
func (tc *TransactionCreate) Mutation() *TransactionMutation {
	return tc.mutation
}

// Save creates the Transaction in the database.
func (tc *TransactionCreate) Save(ctx context.Context) (*Transaction, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransactionCreate) SaveX(ctx context.Context) *Transaction {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransactionCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransactionCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TransactionCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := transaction.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := transaction.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := transaction.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransactionCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Transaction.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Transaction.updated_at"`)}
	}
	if _, ok := tc.mutation.TransType(); !ok {
		return &ValidationError{Name: "trans_type", err: errors.New(`ent: missing required field "Transaction.trans_type"`)}
	}
	if _, ok := tc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "Transaction.source"`)}
	}
	if _, ok := tc.mutation.SrcSymbol(); !ok {
		return &ValidationError{Name: "src_symbol", err: errors.New(`ent: missing required field "Transaction.src_symbol"`)}
	}
	if _, ok := tc.mutation.SrcAmount(); !ok {
		return &ValidationError{Name: "src_amount", err: errors.New(`ent: missing required field "Transaction.src_amount"`)}
	}
	if _, ok := tc.mutation.Destination(); !ok {
		return &ValidationError{Name: "destination", err: errors.New(`ent: missing required field "Transaction.destination"`)}
	}
	if _, ok := tc.mutation.DestSymbol(); !ok {
		return &ValidationError{Name: "dest_symbol", err: errors.New(`ent: missing required field "Transaction.dest_symbol"`)}
	}
	if _, ok := tc.mutation.DestAmount(); !ok {
		return &ValidationError{Name: "dest_amount", err: errors.New(`ent: missing required field "Transaction.dest_amount"`)}
	}
	if _, ok := tc.mutation.Rate(); !ok {
		return &ValidationError{Name: "rate", err: errors.New(`ent: missing required field "Transaction.rate"`)}
	}
	if _, ok := tc.mutation.SourceService(); !ok {
		return &ValidationError{Name: "source_service", err: errors.New(`ent: missing required field "Transaction.source_service"`)}
	}
	if _, ok := tc.mutation.SourceID(); !ok {
		return &ValidationError{Name: "source_id", err: errors.New(`ent: missing required field "Transaction.source_id"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Transaction.status"`)}
	}
	return nil
}

func (tc *TransactionCreate) sqlSave(ctx context.Context) (*Transaction, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TransactionCreate) createSpec() (*Transaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Transaction{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(transaction.Table, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(transaction.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.TransType(); ok {
		_spec.SetField(transaction.FieldTransType, field.TypeString, value)
		_node.TransType = value
	}
	if value, ok := tc.mutation.Source(); ok {
		_spec.SetField(transaction.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := tc.mutation.SrcSymbol(); ok {
		_spec.SetField(transaction.FieldSrcSymbol, field.TypeString, value)
		_node.SrcSymbol = value
	}
	if value, ok := tc.mutation.SrcAmount(); ok {
		_spec.SetField(transaction.FieldSrcAmount, field.TypeString, value)
		_node.SrcAmount = value
	}
	if value, ok := tc.mutation.Destination(); ok {
		_spec.SetField(transaction.FieldDestination, field.TypeString, value)
		_node.Destination = value
	}
	if value, ok := tc.mutation.DestSymbol(); ok {
		_spec.SetField(transaction.FieldDestSymbol, field.TypeString, value)
		_node.DestSymbol = value
	}
	if value, ok := tc.mutation.DestAmount(); ok {
		_spec.SetField(transaction.FieldDestAmount, field.TypeString, value)
		_node.DestAmount = value
	}
	if value, ok := tc.mutation.Rate(); ok {
		_spec.SetField(transaction.FieldRate, field.TypeString, value)
		_node.Rate = value
	}
	if value, ok := tc.mutation.SourceService(); ok {
		_spec.SetField(transaction.FieldSourceService, field.TypeString, value)
		_node.SourceService = value
	}
	if value, ok := tc.mutation.SourceID(); ok {
		_spec.SetField(transaction.FieldSourceID, field.TypeString, value)
		_node.SourceID = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(transaction.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Transaction.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransactionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tc *TransactionCreate) OnConflict(opts ...sql.ConflictOption) *TransactionUpsertOne {
	tc.conflict = opts
	return &TransactionUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Transaction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TransactionCreate) OnConflictColumns(columns ...string) *TransactionUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TransactionUpsertOne{
		create: tc,
	}
}

type (
	// TransactionUpsertOne is the builder for "upsert"-ing
	//  one Transaction node.
	TransactionUpsertOne struct {
		create *TransactionCreate
	}

	// TransactionUpsert is the "OnConflict" setter.
	TransactionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TransactionUpsert) SetUpdatedAt(v time.Time) *TransactionUpsert {
	u.Set(transaction.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateUpdatedAt() *TransactionUpsert {
	u.SetExcluded(transaction.FieldUpdatedAt)
	return u
}

// SetTransType sets the "trans_type" field.
func (u *TransactionUpsert) SetTransType(v string) *TransactionUpsert {
	u.Set(transaction.FieldTransType, v)
	return u
}

// UpdateTransType sets the "trans_type" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateTransType() *TransactionUpsert {
	u.SetExcluded(transaction.FieldTransType)
	return u
}

// SetSource sets the "source" field.
func (u *TransactionUpsert) SetSource(v string) *TransactionUpsert {
	u.Set(transaction.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateSource() *TransactionUpsert {
	u.SetExcluded(transaction.FieldSource)
	return u
}

// SetSrcSymbol sets the "src_symbol" field.
func (u *TransactionUpsert) SetSrcSymbol(v string) *TransactionUpsert {
	u.Set(transaction.FieldSrcSymbol, v)
	return u
}

// UpdateSrcSymbol sets the "src_symbol" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateSrcSymbol() *TransactionUpsert {
	u.SetExcluded(transaction.FieldSrcSymbol)
	return u
}

// SetSrcAmount sets the "src_amount" field.
func (u *TransactionUpsert) SetSrcAmount(v string) *TransactionUpsert {
	u.Set(transaction.FieldSrcAmount, v)
	return u
}

// UpdateSrcAmount sets the "src_amount" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateSrcAmount() *TransactionUpsert {
	u.SetExcluded(transaction.FieldSrcAmount)
	return u
}

// SetDestination sets the "destination" field.
func (u *TransactionUpsert) SetDestination(v string) *TransactionUpsert {
	u.Set(transaction.FieldDestination, v)
	return u
}

// UpdateDestination sets the "destination" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateDestination() *TransactionUpsert {
	u.SetExcluded(transaction.FieldDestination)
	return u
}

// SetDestSymbol sets the "dest_symbol" field.
func (u *TransactionUpsert) SetDestSymbol(v string) *TransactionUpsert {
	u.Set(transaction.FieldDestSymbol, v)
	return u
}

// UpdateDestSymbol sets the "dest_symbol" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateDestSymbol() *TransactionUpsert {
	u.SetExcluded(transaction.FieldDestSymbol)
	return u
}

// SetDestAmount sets the "dest_amount" field.
func (u *TransactionUpsert) SetDestAmount(v string) *TransactionUpsert {
	u.Set(transaction.FieldDestAmount, v)
	return u
}

// UpdateDestAmount sets the "dest_amount" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateDestAmount() *TransactionUpsert {
	u.SetExcluded(transaction.FieldDestAmount)
	return u
}

// SetRate sets the "rate" field.
func (u *TransactionUpsert) SetRate(v string) *TransactionUpsert {
	u.Set(transaction.FieldRate, v)
	return u
}

// UpdateRate sets the "rate" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateRate() *TransactionUpsert {
	u.SetExcluded(transaction.FieldRate)
	return u
}

// SetSourceService sets the "source_service" field.
func (u *TransactionUpsert) SetSourceService(v string) *TransactionUpsert {
	u.Set(transaction.FieldSourceService, v)
	return u
}

// UpdateSourceService sets the "source_service" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateSourceService() *TransactionUpsert {
	u.SetExcluded(transaction.FieldSourceService)
	return u
}

// SetSourceID sets the "source_id" field.
func (u *TransactionUpsert) SetSourceID(v string) *TransactionUpsert {
	u.Set(transaction.FieldSourceID, v)
	return u
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateSourceID() *TransactionUpsert {
	u.SetExcluded(transaction.FieldSourceID)
	return u
}

// SetStatus sets the "status" field.
func (u *TransactionUpsert) SetStatus(v string) *TransactionUpsert {
	u.Set(transaction.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TransactionUpsert) UpdateStatus() *TransactionUpsert {
	u.SetExcluded(transaction.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Transaction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transaction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TransactionUpsertOne) UpdateNewValues() *TransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(transaction.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(transaction.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Transaction.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TransactionUpsertOne) Ignore() *TransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransactionUpsertOne) DoNothing() *TransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransactionCreate.OnConflict
// documentation for more info.
func (u *TransactionUpsertOne) Update(set func(*TransactionUpsert)) *TransactionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransactionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransactionUpsertOne) SetUpdatedAt(v time.Time) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateUpdatedAt() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTransType sets the "trans_type" field.
func (u *TransactionUpsertOne) SetTransType(v string) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetTransType(v)
	})
}

// UpdateTransType sets the "trans_type" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateTransType() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateTransType()
	})
}

// SetSource sets the "source" field.
func (u *TransactionUpsertOne) SetSource(v string) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateSource() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateSource()
	})
}

// SetSrcSymbol sets the "src_symbol" field.
func (u *TransactionUpsertOne) SetSrcSymbol(v string) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetSrcSymbol(v)
	})
}

// UpdateSrcSymbol sets the "src_symbol" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateSrcSymbol() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateSrcSymbol()
	})
}

// SetSrcAmount sets the "src_amount" field.
func (u *TransactionUpsertOne) SetSrcAmount(v string) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetSrcAmount(v)
	})
}

// UpdateSrcAmount sets the "src_amount" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateSrcAmount() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateSrcAmount()
	})
}

// SetDestination sets the "destination" field.
func (u *TransactionUpsertOne) SetDestination(v string) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetDestination(v)
	})
}

// UpdateDestination sets the "destination" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateDestination() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateDestination()
	})
}

// SetDestSymbol sets the "dest_symbol" field.
func (u *TransactionUpsertOne) SetDestSymbol(v string) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetDestSymbol(v)
	})
}

// UpdateDestSymbol sets the "dest_symbol" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateDestSymbol() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateDestSymbol()
	})
}

// SetDestAmount sets the "dest_amount" field.
func (u *TransactionUpsertOne) SetDestAmount(v string) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetDestAmount(v)
	})
}

// UpdateDestAmount sets the "dest_amount" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateDestAmount() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateDestAmount()
	})
}

// SetRate sets the "rate" field.
func (u *TransactionUpsertOne) SetRate(v string) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetRate(v)
	})
}

// UpdateRate sets the "rate" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateRate() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateRate()
	})
}

// SetSourceService sets the "source_service" field.
func (u *TransactionUpsertOne) SetSourceService(v string) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetSourceService(v)
	})
}

// UpdateSourceService sets the "source_service" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateSourceService() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateSourceService()
	})
}

// SetSourceID sets the "source_id" field.
func (u *TransactionUpsertOne) SetSourceID(v string) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateSourceID() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateSourceID()
	})
}

// SetStatus sets the "status" field.
func (u *TransactionUpsertOne) SetStatus(v string) *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TransactionUpsertOne) UpdateStatus() *TransactionUpsertOne {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *TransactionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TransactionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransactionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TransactionUpsertOne) ID(ctx context.Context) (id xid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TransactionUpsertOne.ID is not supported by MySQL driver. Use TransactionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TransactionUpsertOne) IDX(ctx context.Context) xid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TransactionCreateBulk is the builder for creating many Transaction entities in bulk.
type TransactionCreateBulk struct {
	config
	err      error
	builders []*TransactionCreate
	conflict []sql.ConflictOption
}

// Save creates the Transaction entities in the database.
func (tcb *TransactionCreateBulk) Save(ctx context.Context) ([]*Transaction, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transaction, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransactionCreateBulk) SaveX(ctx context.Context) []*Transaction {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransactionCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Transaction.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransactionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcb *TransactionCreateBulk) OnConflict(opts ...sql.ConflictOption) *TransactionUpsertBulk {
	tcb.conflict = opts
	return &TransactionUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Transaction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TransactionCreateBulk) OnConflictColumns(columns ...string) *TransactionUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TransactionUpsertBulk{
		create: tcb,
	}
}

// TransactionUpsertBulk is the builder for "upsert"-ing
// a bulk of Transaction nodes.
type TransactionUpsertBulk struct {
	create *TransactionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Transaction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transaction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TransactionUpsertBulk) UpdateNewValues() *TransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(transaction.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(transaction.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Transaction.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TransactionUpsertBulk) Ignore() *TransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransactionUpsertBulk) DoNothing() *TransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransactionCreateBulk.OnConflict
// documentation for more info.
func (u *TransactionUpsertBulk) Update(set func(*TransactionUpsert)) *TransactionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransactionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransactionUpsertBulk) SetUpdatedAt(v time.Time) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateUpdatedAt() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTransType sets the "trans_type" field.
func (u *TransactionUpsertBulk) SetTransType(v string) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetTransType(v)
	})
}

// UpdateTransType sets the "trans_type" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateTransType() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateTransType()
	})
}

// SetSource sets the "source" field.
func (u *TransactionUpsertBulk) SetSource(v string) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateSource() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateSource()
	})
}

// SetSrcSymbol sets the "src_symbol" field.
func (u *TransactionUpsertBulk) SetSrcSymbol(v string) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetSrcSymbol(v)
	})
}

// UpdateSrcSymbol sets the "src_symbol" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateSrcSymbol() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateSrcSymbol()
	})
}

// SetSrcAmount sets the "src_amount" field.
func (u *TransactionUpsertBulk) SetSrcAmount(v string) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetSrcAmount(v)
	})
}

// UpdateSrcAmount sets the "src_amount" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateSrcAmount() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateSrcAmount()
	})
}

// SetDestination sets the "destination" field.
func (u *TransactionUpsertBulk) SetDestination(v string) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetDestination(v)
	})
}

// UpdateDestination sets the "destination" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateDestination() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateDestination()
	})
}

// SetDestSymbol sets the "dest_symbol" field.
func (u *TransactionUpsertBulk) SetDestSymbol(v string) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetDestSymbol(v)
	})
}

// UpdateDestSymbol sets the "dest_symbol" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateDestSymbol() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateDestSymbol()
	})
}

// SetDestAmount sets the "dest_amount" field.
func (u *TransactionUpsertBulk) SetDestAmount(v string) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetDestAmount(v)
	})
}

// UpdateDestAmount sets the "dest_amount" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateDestAmount() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateDestAmount()
	})
}

// SetRate sets the "rate" field.
func (u *TransactionUpsertBulk) SetRate(v string) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetRate(v)
	})
}

// UpdateRate sets the "rate" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateRate() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateRate()
	})
}

// SetSourceService sets the "source_service" field.
func (u *TransactionUpsertBulk) SetSourceService(v string) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetSourceService(v)
	})
}

// UpdateSourceService sets the "source_service" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateSourceService() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateSourceService()
	})
}

// SetSourceID sets the "source_id" field.
func (u *TransactionUpsertBulk) SetSourceID(v string) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetSourceID(v)
	})
}

// UpdateSourceID sets the "source_id" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateSourceID() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateSourceID()
	})
}

// SetStatus sets the "status" field.
func (u *TransactionUpsertBulk) SetStatus(v string) *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TransactionUpsertBulk) UpdateStatus() *TransactionUpsertBulk {
	return u.Update(func(s *TransactionUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *TransactionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TransactionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TransactionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransactionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
