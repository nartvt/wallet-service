// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/indikay/wallet-service/ent/currencyrate"
)

// CurrencyRate is the model entity for the CurrencyRate schema.
type CurrencyRate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// Rate holds the value of the "rate" field.
	Rate string `json:"rate,omitempty"`
	// ExpiredAt holds the value of the "expired_at" field.
	ExpiredAt    *time.Time `json:"expired_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CurrencyRate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case currencyrate.FieldID:
			values[i] = new(sql.NullInt64)
		case currencyrate.FieldSymbol, currencyrate.FieldRate:
			values[i] = new(sql.NullString)
		case currencyrate.FieldCreatedAt, currencyrate.FieldUpdatedAt, currencyrate.FieldExpiredAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CurrencyRate fields.
func (cr *CurrencyRate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case currencyrate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cr.ID = int(value.Int64)
		case currencyrate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cr.CreatedAt = value.Time
			}
		case currencyrate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cr.UpdatedAt = value.Time
			}
		case currencyrate.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				cr.Symbol = value.String
			}
		case currencyrate.FieldRate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rate", values[i])
			} else if value.Valid {
				cr.Rate = value.String
			}
		case currencyrate.FieldExpiredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expired_at", values[i])
			} else if value.Valid {
				cr.ExpiredAt = new(time.Time)
				*cr.ExpiredAt = value.Time
			}
		default:
			cr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CurrencyRate.
// This includes values selected through modifiers, order, etc.
func (cr *CurrencyRate) Value(name string) (ent.Value, error) {
	return cr.selectValues.Get(name)
}

// Update returns a builder for updating this CurrencyRate.
// Note that you need to call CurrencyRate.Unwrap() before calling this method if this CurrencyRate
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *CurrencyRate) Update() *CurrencyRateUpdateOne {
	return NewCurrencyRateClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the CurrencyRate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *CurrencyRate) Unwrap() *CurrencyRate {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CurrencyRate is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *CurrencyRate) String() string {
	var builder strings.Builder
	builder.WriteString("CurrencyRate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("symbol=")
	builder.WriteString(cr.Symbol)
	builder.WriteString(", ")
	builder.WriteString("rate=")
	builder.WriteString(cr.Rate)
	builder.WriteString(", ")
	if v := cr.ExpiredAt; v != nil {
		builder.WriteString("expired_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// CurrencyRates is a parsable slice of CurrencyRate.
type CurrencyRates []*CurrencyRate
