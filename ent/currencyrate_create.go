// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/indikay/wallet-service/ent/currencyrate"
)

// CurrencyRateCreate is the builder for creating a CurrencyRate entity.
type CurrencyRateCreate struct {
	config
	mutation *CurrencyRateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (crc *CurrencyRateCreate) SetCreatedAt(t time.Time) *CurrencyRateCreate {
	crc.mutation.SetCreatedAt(t)
	return crc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (crc *CurrencyRateCreate) SetNillableCreatedAt(t *time.Time) *CurrencyRateCreate {
	if t != nil {
		crc.SetCreatedAt(*t)
	}
	return crc
}

// SetUpdatedAt sets the "updated_at" field.
func (crc *CurrencyRateCreate) SetUpdatedAt(t time.Time) *CurrencyRateCreate {
	crc.mutation.SetUpdatedAt(t)
	return crc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (crc *CurrencyRateCreate) SetNillableUpdatedAt(t *time.Time) *CurrencyRateCreate {
	if t != nil {
		crc.SetUpdatedAt(*t)
	}
	return crc
}

// SetSymbol sets the "symbol" field.
func (crc *CurrencyRateCreate) SetSymbol(s string) *CurrencyRateCreate {
	crc.mutation.SetSymbol(s)
	return crc
}

// SetRate sets the "rate" field.
func (crc *CurrencyRateCreate) SetRate(s string) *CurrencyRateCreate {
	crc.mutation.SetRate(s)
	return crc
}

// SetExpiredAt sets the "expired_at" field.
func (crc *CurrencyRateCreate) SetExpiredAt(t time.Time) *CurrencyRateCreate {
	crc.mutation.SetExpiredAt(t)
	return crc
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (crc *CurrencyRateCreate) SetNillableExpiredAt(t *time.Time) *CurrencyRateCreate {
	if t != nil {
		crc.SetExpiredAt(*t)
	}
	return crc
}

// Mutation returns the CurrencyRateMutation object of the builder.
func (crc *CurrencyRateCreate) Mutation() *CurrencyRateMutation {
	return crc.mutation
}

// Save creates the CurrencyRate in the database.
func (crc *CurrencyRateCreate) Save(ctx context.Context) (*CurrencyRate, error) {
	crc.defaults()
	return withHooks(ctx, crc.sqlSave, crc.mutation, crc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (crc *CurrencyRateCreate) SaveX(ctx context.Context) *CurrencyRate {
	v, err := crc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crc *CurrencyRateCreate) Exec(ctx context.Context) error {
	_, err := crc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crc *CurrencyRateCreate) ExecX(ctx context.Context) {
	if err := crc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crc *CurrencyRateCreate) defaults() {
	if _, ok := crc.mutation.CreatedAt(); !ok {
		v := currencyrate.DefaultCreatedAt()
		crc.mutation.SetCreatedAt(v)
	}
	if _, ok := crc.mutation.UpdatedAt(); !ok {
		v := currencyrate.DefaultUpdatedAt()
		crc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crc *CurrencyRateCreate) check() error {
	if _, ok := crc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CurrencyRate.created_at"`)}
	}
	if _, ok := crc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CurrencyRate.updated_at"`)}
	}
	if _, ok := crc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "CurrencyRate.symbol"`)}
	}
	if _, ok := crc.mutation.Rate(); !ok {
		return &ValidationError{Name: "rate", err: errors.New(`ent: missing required field "CurrencyRate.rate"`)}
	}
	return nil
}

func (crc *CurrencyRateCreate) sqlSave(ctx context.Context) (*CurrencyRate, error) {
	if err := crc.check(); err != nil {
		return nil, err
	}
	_node, _spec := crc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	crc.mutation.id = &_node.ID
	crc.mutation.done = true
	return _node, nil
}

func (crc *CurrencyRateCreate) createSpec() (*CurrencyRate, *sqlgraph.CreateSpec) {
	var (
		_node = &CurrencyRate{config: crc.config}
		_spec = sqlgraph.NewCreateSpec(currencyrate.Table, sqlgraph.NewFieldSpec(currencyrate.FieldID, field.TypeInt))
	)
	_spec.OnConflict = crc.conflict
	if value, ok := crc.mutation.CreatedAt(); ok {
		_spec.SetField(currencyrate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := crc.mutation.UpdatedAt(); ok {
		_spec.SetField(currencyrate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := crc.mutation.Symbol(); ok {
		_spec.SetField(currencyrate.FieldSymbol, field.TypeString, value)
		_node.Symbol = value
	}
	if value, ok := crc.mutation.Rate(); ok {
		_spec.SetField(currencyrate.FieldRate, field.TypeString, value)
		_node.Rate = value
	}
	if value, ok := crc.mutation.ExpiredAt(); ok {
		_spec.SetField(currencyrate.FieldExpiredAt, field.TypeTime, value)
		_node.ExpiredAt = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CurrencyRate.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CurrencyRateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (crc *CurrencyRateCreate) OnConflict(opts ...sql.ConflictOption) *CurrencyRateUpsertOne {
	crc.conflict = opts
	return &CurrencyRateUpsertOne{
		create: crc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CurrencyRate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (crc *CurrencyRateCreate) OnConflictColumns(columns ...string) *CurrencyRateUpsertOne {
	crc.conflict = append(crc.conflict, sql.ConflictColumns(columns...))
	return &CurrencyRateUpsertOne{
		create: crc,
	}
}

type (
	// CurrencyRateUpsertOne is the builder for "upsert"-ing
	//  one CurrencyRate node.
	CurrencyRateUpsertOne struct {
		create *CurrencyRateCreate
	}

	// CurrencyRateUpsert is the "OnConflict" setter.
	CurrencyRateUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CurrencyRateUpsert) SetUpdatedAt(v time.Time) *CurrencyRateUpsert {
	u.Set(currencyrate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CurrencyRateUpsert) UpdateUpdatedAt() *CurrencyRateUpsert {
	u.SetExcluded(currencyrate.FieldUpdatedAt)
	return u
}

// SetSymbol sets the "symbol" field.
func (u *CurrencyRateUpsert) SetSymbol(v string) *CurrencyRateUpsert {
	u.Set(currencyrate.FieldSymbol, v)
	return u
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *CurrencyRateUpsert) UpdateSymbol() *CurrencyRateUpsert {
	u.SetExcluded(currencyrate.FieldSymbol)
	return u
}

// SetRate sets the "rate" field.
func (u *CurrencyRateUpsert) SetRate(v string) *CurrencyRateUpsert {
	u.Set(currencyrate.FieldRate, v)
	return u
}

// UpdateRate sets the "rate" field to the value that was provided on create.
func (u *CurrencyRateUpsert) UpdateRate() *CurrencyRateUpsert {
	u.SetExcluded(currencyrate.FieldRate)
	return u
}

// SetExpiredAt sets the "expired_at" field.
func (u *CurrencyRateUpsert) SetExpiredAt(v time.Time) *CurrencyRateUpsert {
	u.Set(currencyrate.FieldExpiredAt, v)
	return u
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *CurrencyRateUpsert) UpdateExpiredAt() *CurrencyRateUpsert {
	u.SetExcluded(currencyrate.FieldExpiredAt)
	return u
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *CurrencyRateUpsert) ClearExpiredAt() *CurrencyRateUpsert {
	u.SetNull(currencyrate.FieldExpiredAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CurrencyRate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CurrencyRateUpsertOne) UpdateNewValues() *CurrencyRateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(currencyrate.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CurrencyRate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CurrencyRateUpsertOne) Ignore() *CurrencyRateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CurrencyRateUpsertOne) DoNothing() *CurrencyRateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CurrencyRateCreate.OnConflict
// documentation for more info.
func (u *CurrencyRateUpsertOne) Update(set func(*CurrencyRateUpsert)) *CurrencyRateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CurrencyRateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CurrencyRateUpsertOne) SetUpdatedAt(v time.Time) *CurrencyRateUpsertOne {
	return u.Update(func(s *CurrencyRateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CurrencyRateUpsertOne) UpdateUpdatedAt() *CurrencyRateUpsertOne {
	return u.Update(func(s *CurrencyRateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSymbol sets the "symbol" field.
func (u *CurrencyRateUpsertOne) SetSymbol(v string) *CurrencyRateUpsertOne {
	return u.Update(func(s *CurrencyRateUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *CurrencyRateUpsertOne) UpdateSymbol() *CurrencyRateUpsertOne {
	return u.Update(func(s *CurrencyRateUpsert) {
		s.UpdateSymbol()
	})
}

// SetRate sets the "rate" field.
func (u *CurrencyRateUpsertOne) SetRate(v string) *CurrencyRateUpsertOne {
	return u.Update(func(s *CurrencyRateUpsert) {
		s.SetRate(v)
	})
}

// UpdateRate sets the "rate" field to the value that was provided on create.
func (u *CurrencyRateUpsertOne) UpdateRate() *CurrencyRateUpsertOne {
	return u.Update(func(s *CurrencyRateUpsert) {
		s.UpdateRate()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *CurrencyRateUpsertOne) SetExpiredAt(v time.Time) *CurrencyRateUpsertOne {
	return u.Update(func(s *CurrencyRateUpsert) {
		s.SetExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *CurrencyRateUpsertOne) UpdateExpiredAt() *CurrencyRateUpsertOne {
	return u.Update(func(s *CurrencyRateUpsert) {
		s.UpdateExpiredAt()
	})
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *CurrencyRateUpsertOne) ClearExpiredAt() *CurrencyRateUpsertOne {
	return u.Update(func(s *CurrencyRateUpsert) {
		s.ClearExpiredAt()
	})
}

// Exec executes the query.
func (u *CurrencyRateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CurrencyRateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CurrencyRateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CurrencyRateUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CurrencyRateUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CurrencyRateCreateBulk is the builder for creating many CurrencyRate entities in bulk.
type CurrencyRateCreateBulk struct {
	config
	err      error
	builders []*CurrencyRateCreate
	conflict []sql.ConflictOption
}

// Save creates the CurrencyRate entities in the database.
func (crcb *CurrencyRateCreateBulk) Save(ctx context.Context) ([]*CurrencyRate, error) {
	if crcb.err != nil {
		return nil, crcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(crcb.builders))
	nodes := make([]*CurrencyRate, len(crcb.builders))
	mutators := make([]Mutator, len(crcb.builders))
	for i := range crcb.builders {
		func(i int, root context.Context) {
			builder := crcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CurrencyRateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = crcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crcb *CurrencyRateCreateBulk) SaveX(ctx context.Context) []*CurrencyRate {
	v, err := crcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crcb *CurrencyRateCreateBulk) Exec(ctx context.Context) error {
	_, err := crcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcb *CurrencyRateCreateBulk) ExecX(ctx context.Context) {
	if err := crcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CurrencyRate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CurrencyRateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (crcb *CurrencyRateCreateBulk) OnConflict(opts ...sql.ConflictOption) *CurrencyRateUpsertBulk {
	crcb.conflict = opts
	return &CurrencyRateUpsertBulk{
		create: crcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CurrencyRate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (crcb *CurrencyRateCreateBulk) OnConflictColumns(columns ...string) *CurrencyRateUpsertBulk {
	crcb.conflict = append(crcb.conflict, sql.ConflictColumns(columns...))
	return &CurrencyRateUpsertBulk{
		create: crcb,
	}
}

// CurrencyRateUpsertBulk is the builder for "upsert"-ing
// a bulk of CurrencyRate nodes.
type CurrencyRateUpsertBulk struct {
	create *CurrencyRateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CurrencyRate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CurrencyRateUpsertBulk) UpdateNewValues() *CurrencyRateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(currencyrate.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CurrencyRate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CurrencyRateUpsertBulk) Ignore() *CurrencyRateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CurrencyRateUpsertBulk) DoNothing() *CurrencyRateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CurrencyRateCreateBulk.OnConflict
// documentation for more info.
func (u *CurrencyRateUpsertBulk) Update(set func(*CurrencyRateUpsert)) *CurrencyRateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CurrencyRateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CurrencyRateUpsertBulk) SetUpdatedAt(v time.Time) *CurrencyRateUpsertBulk {
	return u.Update(func(s *CurrencyRateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CurrencyRateUpsertBulk) UpdateUpdatedAt() *CurrencyRateUpsertBulk {
	return u.Update(func(s *CurrencyRateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSymbol sets the "symbol" field.
func (u *CurrencyRateUpsertBulk) SetSymbol(v string) *CurrencyRateUpsertBulk {
	return u.Update(func(s *CurrencyRateUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *CurrencyRateUpsertBulk) UpdateSymbol() *CurrencyRateUpsertBulk {
	return u.Update(func(s *CurrencyRateUpsert) {
		s.UpdateSymbol()
	})
}

// SetRate sets the "rate" field.
func (u *CurrencyRateUpsertBulk) SetRate(v string) *CurrencyRateUpsertBulk {
	return u.Update(func(s *CurrencyRateUpsert) {
		s.SetRate(v)
	})
}

// UpdateRate sets the "rate" field to the value that was provided on create.
func (u *CurrencyRateUpsertBulk) UpdateRate() *CurrencyRateUpsertBulk {
	return u.Update(func(s *CurrencyRateUpsert) {
		s.UpdateRate()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *CurrencyRateUpsertBulk) SetExpiredAt(v time.Time) *CurrencyRateUpsertBulk {
	return u.Update(func(s *CurrencyRateUpsert) {
		s.SetExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *CurrencyRateUpsertBulk) UpdateExpiredAt() *CurrencyRateUpsertBulk {
	return u.Update(func(s *CurrencyRateUpsert) {
		s.UpdateExpiredAt()
	})
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *CurrencyRateUpsertBulk) ClearExpiredAt() *CurrencyRateUpsertBulk {
	return u.Update(func(s *CurrencyRateUpsert) {
		s.ClearExpiredAt()
	})
}

// Exec executes the query.
func (u *CurrencyRateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CurrencyRateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CurrencyRateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CurrencyRateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
