// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/indikay/wallet-service/ent/icohistory"
	"github.com/indikay/wallet-service/ent/predicate"
)

// IcoHistoryUpdate is the builder for updating IcoHistory entities.
type IcoHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *IcoHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the IcoHistoryUpdate builder.
func (ihu *IcoHistoryUpdate) Where(ps ...predicate.IcoHistory) *IcoHistoryUpdate {
	ihu.mutation.Where(ps...)
	return ihu
}

// SetUpdatedAt sets the "updated_at" field.
func (ihu *IcoHistoryUpdate) SetUpdatedAt(t time.Time) *IcoHistoryUpdate {
	ihu.mutation.SetUpdatedAt(t)
	return ihu
}

// SetRoundID sets the "round_id" field.
func (ihu *IcoHistoryUpdate) SetRoundID(i int32) *IcoHistoryUpdate {
	ihu.mutation.ResetRoundID()
	ihu.mutation.SetRoundID(i)
	return ihu
}

// SetNillableRoundID sets the "round_id" field if the given value is not nil.
func (ihu *IcoHistoryUpdate) SetNillableRoundID(i *int32) *IcoHistoryUpdate {
	if i != nil {
		ihu.SetRoundID(*i)
	}
	return ihu
}

// AddRoundID adds i to the "round_id" field.
func (ihu *IcoHistoryUpdate) AddRoundID(i int32) *IcoHistoryUpdate {
	ihu.mutation.AddRoundID(i)
	return ihu
}

// SetUserID sets the "user_id" field.
func (ihu *IcoHistoryUpdate) SetUserID(s string) *IcoHistoryUpdate {
	ihu.mutation.SetUserID(s)
	return ihu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ihu *IcoHistoryUpdate) SetNillableUserID(s *string) *IcoHistoryUpdate {
	if s != nil {
		ihu.SetUserID(*s)
	}
	return ihu
}

// SetPrice sets the "price" field.
func (ihu *IcoHistoryUpdate) SetPrice(s string) *IcoHistoryUpdate {
	ihu.mutation.SetPrice(s)
	return ihu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ihu *IcoHistoryUpdate) SetNillablePrice(s *string) *IcoHistoryUpdate {
	if s != nil {
		ihu.SetPrice(*s)
	}
	return ihu
}

// SetNumToken sets the "num_token" field.
func (ihu *IcoHistoryUpdate) SetNumToken(s string) *IcoHistoryUpdate {
	ihu.mutation.SetNumToken(s)
	return ihu
}

// SetNillableNumToken sets the "num_token" field if the given value is not nil.
func (ihu *IcoHistoryUpdate) SetNillableNumToken(s *string) *IcoHistoryUpdate {
	if s != nil {
		ihu.SetNumToken(*s)
	}
	return ihu
}

// SetSubRound sets the "sub_round" field.
func (ihu *IcoHistoryUpdate) SetSubRound(i int32) *IcoHistoryUpdate {
	ihu.mutation.ResetSubRound()
	ihu.mutation.SetSubRound(i)
	return ihu
}

// SetNillableSubRound sets the "sub_round" field if the given value is not nil.
func (ihu *IcoHistoryUpdate) SetNillableSubRound(i *int32) *IcoHistoryUpdate {
	if i != nil {
		ihu.SetSubRound(*i)
	}
	return ihu
}

// AddSubRound adds i to the "sub_round" field.
func (ihu *IcoHistoryUpdate) AddSubRound(i int32) *IcoHistoryUpdate {
	ihu.mutation.AddSubRound(i)
	return ihu
}

// SetType sets the "type" field.
func (ihu *IcoHistoryUpdate) SetType(s string) *IcoHistoryUpdate {
	ihu.mutation.SetType(s)
	return ihu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ihu *IcoHistoryUpdate) SetNillableType(s *string) *IcoHistoryUpdate {
	if s != nil {
		ihu.SetType(*s)
	}
	return ihu
}

// ClearType clears the value of the "type" field.
func (ihu *IcoHistoryUpdate) ClearType() *IcoHistoryUpdate {
	ihu.mutation.ClearType()
	return ihu
}

// Mutation returns the IcoHistoryMutation object of the builder.
func (ihu *IcoHistoryUpdate) Mutation() *IcoHistoryMutation {
	return ihu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ihu *IcoHistoryUpdate) Save(ctx context.Context) (int, error) {
	ihu.defaults()
	return withHooks(ctx, ihu.sqlSave, ihu.mutation, ihu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ihu *IcoHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ihu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ihu *IcoHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ihu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ihu *IcoHistoryUpdate) ExecX(ctx context.Context) {
	if err := ihu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ihu *IcoHistoryUpdate) defaults() {
	if _, ok := ihu.mutation.UpdatedAt(); !ok {
		v := icohistory.UpdateDefaultUpdatedAt()
		ihu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ihu *IcoHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IcoHistoryUpdate {
	ihu.modifiers = append(ihu.modifiers, modifiers...)
	return ihu
}

func (ihu *IcoHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(icohistory.Table, icohistory.Columns, sqlgraph.NewFieldSpec(icohistory.FieldID, field.TypeString))
	if ps := ihu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ihu.mutation.UpdatedAt(); ok {
		_spec.SetField(icohistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ihu.mutation.RoundID(); ok {
		_spec.SetField(icohistory.FieldRoundID, field.TypeInt32, value)
	}
	if value, ok := ihu.mutation.AddedRoundID(); ok {
		_spec.AddField(icohistory.FieldRoundID, field.TypeInt32, value)
	}
	if value, ok := ihu.mutation.UserID(); ok {
		_spec.SetField(icohistory.FieldUserID, field.TypeString, value)
	}
	if value, ok := ihu.mutation.Price(); ok {
		_spec.SetField(icohistory.FieldPrice, field.TypeString, value)
	}
	if value, ok := ihu.mutation.NumToken(); ok {
		_spec.SetField(icohistory.FieldNumToken, field.TypeString, value)
	}
	if value, ok := ihu.mutation.SubRound(); ok {
		_spec.SetField(icohistory.FieldSubRound, field.TypeInt32, value)
	}
	if value, ok := ihu.mutation.AddedSubRound(); ok {
		_spec.AddField(icohistory.FieldSubRound, field.TypeInt32, value)
	}
	if value, ok := ihu.mutation.GetType(); ok {
		_spec.SetField(icohistory.FieldType, field.TypeString, value)
	}
	if ihu.mutation.TypeCleared() {
		_spec.ClearField(icohistory.FieldType, field.TypeString)
	}
	_spec.AddModifiers(ihu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ihu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{icohistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ihu.mutation.done = true
	return n, nil
}

// IcoHistoryUpdateOne is the builder for updating a single IcoHistory entity.
type IcoHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *IcoHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ihuo *IcoHistoryUpdateOne) SetUpdatedAt(t time.Time) *IcoHistoryUpdateOne {
	ihuo.mutation.SetUpdatedAt(t)
	return ihuo
}

// SetRoundID sets the "round_id" field.
func (ihuo *IcoHistoryUpdateOne) SetRoundID(i int32) *IcoHistoryUpdateOne {
	ihuo.mutation.ResetRoundID()
	ihuo.mutation.SetRoundID(i)
	return ihuo
}

// SetNillableRoundID sets the "round_id" field if the given value is not nil.
func (ihuo *IcoHistoryUpdateOne) SetNillableRoundID(i *int32) *IcoHistoryUpdateOne {
	if i != nil {
		ihuo.SetRoundID(*i)
	}
	return ihuo
}

// AddRoundID adds i to the "round_id" field.
func (ihuo *IcoHistoryUpdateOne) AddRoundID(i int32) *IcoHistoryUpdateOne {
	ihuo.mutation.AddRoundID(i)
	return ihuo
}

// SetUserID sets the "user_id" field.
func (ihuo *IcoHistoryUpdateOne) SetUserID(s string) *IcoHistoryUpdateOne {
	ihuo.mutation.SetUserID(s)
	return ihuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ihuo *IcoHistoryUpdateOne) SetNillableUserID(s *string) *IcoHistoryUpdateOne {
	if s != nil {
		ihuo.SetUserID(*s)
	}
	return ihuo
}

// SetPrice sets the "price" field.
func (ihuo *IcoHistoryUpdateOne) SetPrice(s string) *IcoHistoryUpdateOne {
	ihuo.mutation.SetPrice(s)
	return ihuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (ihuo *IcoHistoryUpdateOne) SetNillablePrice(s *string) *IcoHistoryUpdateOne {
	if s != nil {
		ihuo.SetPrice(*s)
	}
	return ihuo
}

// SetNumToken sets the "num_token" field.
func (ihuo *IcoHistoryUpdateOne) SetNumToken(s string) *IcoHistoryUpdateOne {
	ihuo.mutation.SetNumToken(s)
	return ihuo
}

// SetNillableNumToken sets the "num_token" field if the given value is not nil.
func (ihuo *IcoHistoryUpdateOne) SetNillableNumToken(s *string) *IcoHistoryUpdateOne {
	if s != nil {
		ihuo.SetNumToken(*s)
	}
	return ihuo
}

// SetSubRound sets the "sub_round" field.
func (ihuo *IcoHistoryUpdateOne) SetSubRound(i int32) *IcoHistoryUpdateOne {
	ihuo.mutation.ResetSubRound()
	ihuo.mutation.SetSubRound(i)
	return ihuo
}

// SetNillableSubRound sets the "sub_round" field if the given value is not nil.
func (ihuo *IcoHistoryUpdateOne) SetNillableSubRound(i *int32) *IcoHistoryUpdateOne {
	if i != nil {
		ihuo.SetSubRound(*i)
	}
	return ihuo
}

// AddSubRound adds i to the "sub_round" field.
func (ihuo *IcoHistoryUpdateOne) AddSubRound(i int32) *IcoHistoryUpdateOne {
	ihuo.mutation.AddSubRound(i)
	return ihuo
}

// SetType sets the "type" field.
func (ihuo *IcoHistoryUpdateOne) SetType(s string) *IcoHistoryUpdateOne {
	ihuo.mutation.SetType(s)
	return ihuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ihuo *IcoHistoryUpdateOne) SetNillableType(s *string) *IcoHistoryUpdateOne {
	if s != nil {
		ihuo.SetType(*s)
	}
	return ihuo
}

// ClearType clears the value of the "type" field.
func (ihuo *IcoHistoryUpdateOne) ClearType() *IcoHistoryUpdateOne {
	ihuo.mutation.ClearType()
	return ihuo
}

// Mutation returns the IcoHistoryMutation object of the builder.
func (ihuo *IcoHistoryUpdateOne) Mutation() *IcoHistoryMutation {
	return ihuo.mutation
}

// Where appends a list predicates to the IcoHistoryUpdate builder.
func (ihuo *IcoHistoryUpdateOne) Where(ps ...predicate.IcoHistory) *IcoHistoryUpdateOne {
	ihuo.mutation.Where(ps...)
	return ihuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ihuo *IcoHistoryUpdateOne) Select(field string, fields ...string) *IcoHistoryUpdateOne {
	ihuo.fields = append([]string{field}, fields...)
	return ihuo
}

// Save executes the query and returns the updated IcoHistory entity.
func (ihuo *IcoHistoryUpdateOne) Save(ctx context.Context) (*IcoHistory, error) {
	ihuo.defaults()
	return withHooks(ctx, ihuo.sqlSave, ihuo.mutation, ihuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ihuo *IcoHistoryUpdateOne) SaveX(ctx context.Context) *IcoHistory {
	node, err := ihuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ihuo *IcoHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ihuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ihuo *IcoHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ihuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ihuo *IcoHistoryUpdateOne) defaults() {
	if _, ok := ihuo.mutation.UpdatedAt(); !ok {
		v := icohistory.UpdateDefaultUpdatedAt()
		ihuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ihuo *IcoHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *IcoHistoryUpdateOne {
	ihuo.modifiers = append(ihuo.modifiers, modifiers...)
	return ihuo
}

func (ihuo *IcoHistoryUpdateOne) sqlSave(ctx context.Context) (_node *IcoHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(icohistory.Table, icohistory.Columns, sqlgraph.NewFieldSpec(icohistory.FieldID, field.TypeString))
	id, ok := ihuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IcoHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ihuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, icohistory.FieldID)
		for _, f := range fields {
			if !icohistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != icohistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ihuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ihuo.mutation.UpdatedAt(); ok {
		_spec.SetField(icohistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ihuo.mutation.RoundID(); ok {
		_spec.SetField(icohistory.FieldRoundID, field.TypeInt32, value)
	}
	if value, ok := ihuo.mutation.AddedRoundID(); ok {
		_spec.AddField(icohistory.FieldRoundID, field.TypeInt32, value)
	}
	if value, ok := ihuo.mutation.UserID(); ok {
		_spec.SetField(icohistory.FieldUserID, field.TypeString, value)
	}
	if value, ok := ihuo.mutation.Price(); ok {
		_spec.SetField(icohistory.FieldPrice, field.TypeString, value)
	}
	if value, ok := ihuo.mutation.NumToken(); ok {
		_spec.SetField(icohistory.FieldNumToken, field.TypeString, value)
	}
	if value, ok := ihuo.mutation.SubRound(); ok {
		_spec.SetField(icohistory.FieldSubRound, field.TypeInt32, value)
	}
	if value, ok := ihuo.mutation.AddedSubRound(); ok {
		_spec.AddField(icohistory.FieldSubRound, field.TypeInt32, value)
	}
	if value, ok := ihuo.mutation.GetType(); ok {
		_spec.SetField(icohistory.FieldType, field.TypeString, value)
	}
	if ihuo.mutation.TypeCleared() {
		_spec.ClearField(icohistory.FieldType, field.TypeString)
	}
	_spec.AddModifiers(ihuo.modifiers...)
	_node = &IcoHistory{config: ihuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ihuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{icohistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ihuo.mutation.done = true
	return _node, nil
}
