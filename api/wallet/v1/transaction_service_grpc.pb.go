// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: wallet/v1/transaction_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TransactionService_ChargeFee_FullMethodName               = "/wallet.v1.TransactionService/ChargeFee"
	TransactionService_Deposit_FullMethodName                 = "/wallet.v1.TransactionService/Deposit"
	TransactionService_BuyICO_FullMethodName                  = "/wallet.v1.TransactionService/BuyICO"
	TransactionService_Subscription_FullMethodName            = "/wallet.v1.TransactionService/Subscription"
	TransactionService_ReferralReward_FullMethodName          = "/wallet.v1.TransactionService/ReferralReward"
	TransactionService_CalcChargeFee_FullMethodName           = "/wallet.v1.TransactionService/CalcChargeFee"
	TransactionService_MarketingRewardInternal_FullMethodName = "/wallet.v1.TransactionService/MarketingRewardInternal"
)

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionServiceClient interface {
	ChargeFee(ctx context.Context, in *ChargeFeeRequest, opts ...grpc.CallOption) (*ChargeFeeResponse, error)
	Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error)
	BuyICO(ctx context.Context, in *BuyICORequest, opts ...grpc.CallOption) (*BuyICOResponse, error)
	Subscription(ctx context.Context, in *SubsciptionRequest, opts ...grpc.CallOption) (*SubsciptionResponse, error)
	ReferralReward(ctx context.Context, in *ReferralRewardRequest, opts ...grpc.CallOption) (*ReferralRewardResponse, error)
	CalcChargeFee(ctx context.Context, in *CalcChargeFeeRequest, opts ...grpc.CallOption) (*CalcChargeFeeResponse, error)
	MarketingRewardInternal(ctx context.Context, in *MarketingRewardRequest, opts ...grpc.CallOption) (*MarketingRewardResponse, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) ChargeFee(ctx context.Context, in *ChargeFeeRequest, opts ...grpc.CallOption) (*ChargeFeeResponse, error) {
	out := new(ChargeFeeResponse)
	err := c.cc.Invoke(ctx, TransactionService_ChargeFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error) {
	out := new(DepositResponse)
	err := c.cc.Invoke(ctx, TransactionService_Deposit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) BuyICO(ctx context.Context, in *BuyICORequest, opts ...grpc.CallOption) (*BuyICOResponse, error) {
	out := new(BuyICOResponse)
	err := c.cc.Invoke(ctx, TransactionService_BuyICO_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) Subscription(ctx context.Context, in *SubsciptionRequest, opts ...grpc.CallOption) (*SubsciptionResponse, error) {
	out := new(SubsciptionResponse)
	err := c.cc.Invoke(ctx, TransactionService_Subscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ReferralReward(ctx context.Context, in *ReferralRewardRequest, opts ...grpc.CallOption) (*ReferralRewardResponse, error) {
	out := new(ReferralRewardResponse)
	err := c.cc.Invoke(ctx, TransactionService_ReferralReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CalcChargeFee(ctx context.Context, in *CalcChargeFeeRequest, opts ...grpc.CallOption) (*CalcChargeFeeResponse, error) {
	out := new(CalcChargeFeeResponse)
	err := c.cc.Invoke(ctx, TransactionService_CalcChargeFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) MarketingRewardInternal(ctx context.Context, in *MarketingRewardRequest, opts ...grpc.CallOption) (*MarketingRewardResponse, error) {
	out := new(MarketingRewardResponse)
	err := c.cc.Invoke(ctx, TransactionService_MarketingRewardInternal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
// All implementations must embed UnimplementedTransactionServiceServer
// for forward compatibility
type TransactionServiceServer interface {
	ChargeFee(context.Context, *ChargeFeeRequest) (*ChargeFeeResponse, error)
	Deposit(context.Context, *DepositRequest) (*DepositResponse, error)
	BuyICO(context.Context, *BuyICORequest) (*BuyICOResponse, error)
	Subscription(context.Context, *SubsciptionRequest) (*SubsciptionResponse, error)
	ReferralReward(context.Context, *ReferralRewardRequest) (*ReferralRewardResponse, error)
	CalcChargeFee(context.Context, *CalcChargeFeeRequest) (*CalcChargeFeeResponse, error)
	MarketingRewardInternal(context.Context, *MarketingRewardRequest) (*MarketingRewardResponse, error)
	mustEmbedUnimplementedTransactionServiceServer()
}

// UnimplementedTransactionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionServiceServer struct {
}

func (UnimplementedTransactionServiceServer) ChargeFee(context.Context, *ChargeFeeRequest) (*ChargeFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargeFee not implemented")
}
func (UnimplementedTransactionServiceServer) Deposit(context.Context, *DepositRequest) (*DepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedTransactionServiceServer) BuyICO(context.Context, *BuyICORequest) (*BuyICOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyICO not implemented")
}
func (UnimplementedTransactionServiceServer) Subscription(context.Context, *SubsciptionRequest) (*SubsciptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscription not implemented")
}
func (UnimplementedTransactionServiceServer) ReferralReward(context.Context, *ReferralRewardRequest) (*ReferralRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReferralReward not implemented")
}
func (UnimplementedTransactionServiceServer) CalcChargeFee(context.Context, *CalcChargeFeeRequest) (*CalcChargeFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcChargeFee not implemented")
}
func (UnimplementedTransactionServiceServer) MarketingRewardInternal(context.Context, *MarketingRewardRequest) (*MarketingRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketingRewardInternal not implemented")
}
func (UnimplementedTransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	s.RegisterService(&TransactionService_ServiceDesc, srv)
}

func _TransactionService_ChargeFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ChargeFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_ChargeFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ChargeFee(ctx, req.(*ChargeFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_Deposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).Deposit(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_BuyICO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyICORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).BuyICO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_BuyICO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).BuyICO(ctx, req.(*BuyICORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_Subscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubsciptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).Subscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_Subscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).Subscription(ctx, req.(*SubsciptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ReferralReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferralRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ReferralReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_ReferralReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ReferralReward(ctx, req.(*ReferralRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CalcChargeFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcChargeFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CalcChargeFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_CalcChargeFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CalcChargeFee(ctx, req.(*CalcChargeFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_MarketingRewardInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketingRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).MarketingRewardInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_MarketingRewardInternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).MarketingRewardInternal(ctx, req.(*MarketingRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionService_ServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet.v1.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChargeFee",
			Handler:    _TransactionService_ChargeFee_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _TransactionService_Deposit_Handler,
		},
		{
			MethodName: "BuyICO",
			Handler:    _TransactionService_BuyICO_Handler,
		},
		{
			MethodName: "Subscription",
			Handler:    _TransactionService_Subscription_Handler,
		},
		{
			MethodName: "ReferralReward",
			Handler:    _TransactionService_ReferralReward_Handler,
		},
		{
			MethodName: "CalcChargeFee",
			Handler:    _TransactionService_CalcChargeFee_Handler,
		},
		{
			MethodName: "MarketingRewardInternal",
			Handler:    _TransactionService_MarketingRewardInternal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet/v1/transaction_service.proto",
}
