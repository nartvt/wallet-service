// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.24.3
// source: wallet/v1/transaction_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTransactionServiceBuyICO = "/wallet.v1.TransactionService/BuyICO"
const OperationTransactionServiceChargeFee = "/wallet.v1.TransactionService/ChargeFee"
const OperationTransactionServiceDeposit = "/wallet.v1.TransactionService/Deposit"
const OperationTransactionServiceReferralReward = "/wallet.v1.TransactionService/ReferralReward"
const OperationTransactionServiceSubscription = "/wallet.v1.TransactionService/Subscription"

type TransactionServiceHTTPServer interface {
	BuyICO(context.Context, *BuyICORequest) (*BuyICOResponse, error)
	ChargeFee(context.Context, *ChargeFeeRequest) (*ChargeFeeResponse, error)
	Deposit(context.Context, *DepositRequest) (*DepositResponse, error)
	ReferralReward(context.Context, *ReferralRewardRequest) (*ReferralRewardResponse, error)
	Subscription(context.Context, *SubsciptionRequest) (*SubsciptionResponse, error)
}

func RegisterTransactionServiceHTTPServer(s *http.Server, srv TransactionServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/internal/wallet/v1/charge", _TransactionService_ChargeFee0_HTTP_Handler(srv))
	r.POST("/internal/wallet/v1/deposit", _TransactionService_Deposit0_HTTP_Handler(srv))
	r.POST("/internal/wallet/v1/ico", _TransactionService_BuyICO0_HTTP_Handler(srv))
	r.POST("/internal/wallet/v1/subscription", _TransactionService_Subscription0_HTTP_Handler(srv))
	r.POST("/internal/wallet/v1/charge", _TransactionService_ReferralReward0_HTTP_Handler(srv))
}

func _TransactionService_ChargeFee0_HTTP_Handler(srv TransactionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChargeFeeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionServiceChargeFee)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChargeFee(ctx, req.(*ChargeFeeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChargeFeeResponse)
		return ctx.Result(200, reply)
	}
}

func _TransactionService_Deposit0_HTTP_Handler(srv TransactionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DepositRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionServiceDeposit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Deposit(ctx, req.(*DepositRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DepositResponse)
		return ctx.Result(200, reply)
	}
}

func _TransactionService_BuyICO0_HTTP_Handler(srv TransactionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BuyICORequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionServiceBuyICO)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BuyICO(ctx, req.(*BuyICORequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BuyICOResponse)
		return ctx.Result(200, reply)
	}
}

func _TransactionService_Subscription0_HTTP_Handler(srv TransactionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubsciptionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionServiceSubscription)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Subscription(ctx, req.(*SubsciptionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubsciptionResponse)
		return ctx.Result(200, reply)
	}
}

func _TransactionService_ReferralReward0_HTTP_Handler(srv TransactionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReferralRewardRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionServiceReferralReward)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReferralReward(ctx, req.(*ReferralRewardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReferralRewardResponse)
		return ctx.Result(200, reply)
	}
}

type TransactionServiceHTTPClient interface {
	BuyICO(ctx context.Context, req *BuyICORequest, opts ...http.CallOption) (rsp *BuyICOResponse, err error)
	ChargeFee(ctx context.Context, req *ChargeFeeRequest, opts ...http.CallOption) (rsp *ChargeFeeResponse, err error)
	Deposit(ctx context.Context, req *DepositRequest, opts ...http.CallOption) (rsp *DepositResponse, err error)
	ReferralReward(ctx context.Context, req *ReferralRewardRequest, opts ...http.CallOption) (rsp *ReferralRewardResponse, err error)
	Subscription(ctx context.Context, req *SubsciptionRequest, opts ...http.CallOption) (rsp *SubsciptionResponse, err error)
}

type TransactionServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewTransactionServiceHTTPClient(client *http.Client) TransactionServiceHTTPClient {
	return &TransactionServiceHTTPClientImpl{client}
}

func (c *TransactionServiceHTTPClientImpl) BuyICO(ctx context.Context, in *BuyICORequest, opts ...http.CallOption) (*BuyICOResponse, error) {
	var out BuyICOResponse
	pattern := "/internal/wallet/v1/ico"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTransactionServiceBuyICO))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TransactionServiceHTTPClientImpl) ChargeFee(ctx context.Context, in *ChargeFeeRequest, opts ...http.CallOption) (*ChargeFeeResponse, error) {
	var out ChargeFeeResponse
	pattern := "/internal/wallet/v1/charge"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTransactionServiceChargeFee))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TransactionServiceHTTPClientImpl) Deposit(ctx context.Context, in *DepositRequest, opts ...http.CallOption) (*DepositResponse, error) {
	var out DepositResponse
	pattern := "/internal/wallet/v1/deposit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTransactionServiceDeposit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TransactionServiceHTTPClientImpl) ReferralReward(ctx context.Context, in *ReferralRewardRequest, opts ...http.CallOption) (*ReferralRewardResponse, error) {
	var out ReferralRewardResponse
	pattern := "/internal/wallet/v1/charge"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTransactionServiceReferralReward))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TransactionServiceHTTPClientImpl) Subscription(ctx context.Context, in *SubsciptionRequest, opts ...http.CallOption) (*SubsciptionResponse, error) {
	var out SubsciptionResponse
	pattern := "/internal/wallet/v1/subscription"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTransactionServiceSubscription))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
