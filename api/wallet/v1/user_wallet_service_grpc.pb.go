// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: wallet/v1/user_wallet_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserWalletService_GetWalletByUserId_FullMethodName      = "/wallet.v1.UserWalletService/GetWalletByUserId"
	UserWalletService_GetWalletHistories_FullMethodName     = "/wallet.v1.UserWalletService/GetWalletHistories"
	UserWalletService_GetCurrentRateBySymbol_FullMethodName = "/wallet.v1.UserWalletService/GetCurrentRateBySymbol"
)

// UserWalletServiceClient is the client API for UserWalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserWalletServiceClient interface {
	GetWalletByUserId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserWalletResponse, error)
	GetWalletHistories(ctx context.Context, in *GetWalletHistoryRequest, opts ...grpc.CallOption) (*GetWalletHistoryResponse, error)
	GetCurrentRateBySymbol(ctx context.Context, in *CurrentRateRequest, opts ...grpc.CallOption) (*CurrentRate, error)
}

type userWalletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserWalletServiceClient(cc grpc.ClientConnInterface) UserWalletServiceClient {
	return &userWalletServiceClient{cc}
}

func (c *userWalletServiceClient) GetWalletByUserId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserWalletResponse, error) {
	out := new(UserWalletResponse)
	err := c.cc.Invoke(ctx, UserWalletService_GetWalletByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletServiceClient) GetWalletHistories(ctx context.Context, in *GetWalletHistoryRequest, opts ...grpc.CallOption) (*GetWalletHistoryResponse, error) {
	out := new(GetWalletHistoryResponse)
	err := c.cc.Invoke(ctx, UserWalletService_GetWalletHistories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletServiceClient) GetCurrentRateBySymbol(ctx context.Context, in *CurrentRateRequest, opts ...grpc.CallOption) (*CurrentRate, error) {
	out := new(CurrentRate)
	err := c.cc.Invoke(ctx, UserWalletService_GetCurrentRateBySymbol_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserWalletServiceServer is the server API for UserWalletService service.
// All implementations must embed UnimplementedUserWalletServiceServer
// for forward compatibility
type UserWalletServiceServer interface {
	GetWalletByUserId(context.Context, *emptypb.Empty) (*UserWalletResponse, error)
	GetWalletHistories(context.Context, *GetWalletHistoryRequest) (*GetWalletHistoryResponse, error)
	GetCurrentRateBySymbol(context.Context, *CurrentRateRequest) (*CurrentRate, error)
	mustEmbedUnimplementedUserWalletServiceServer()
}

// UnimplementedUserWalletServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserWalletServiceServer struct {
}

func (UnimplementedUserWalletServiceServer) GetWalletByUserId(context.Context, *emptypb.Empty) (*UserWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletByUserId not implemented")
}
func (UnimplementedUserWalletServiceServer) GetWalletHistories(context.Context, *GetWalletHistoryRequest) (*GetWalletHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletHistories not implemented")
}
func (UnimplementedUserWalletServiceServer) GetCurrentRateBySymbol(context.Context, *CurrentRateRequest) (*CurrentRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentRateBySymbol not implemented")
}
func (UnimplementedUserWalletServiceServer) mustEmbedUnimplementedUserWalletServiceServer() {}

// UnsafeUserWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserWalletServiceServer will
// result in compilation errors.
type UnsafeUserWalletServiceServer interface {
	mustEmbedUnimplementedUserWalletServiceServer()
}

func RegisterUserWalletServiceServer(s grpc.ServiceRegistrar, srv UserWalletServiceServer) {
	s.RegisterService(&UserWalletService_ServiceDesc, srv)
}

func _UserWalletService_GetWalletByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletServiceServer).GetWalletByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWalletService_GetWalletByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletServiceServer).GetWalletByUserId(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletService_GetWalletHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletServiceServer).GetWalletHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWalletService_GetWalletHistories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletServiceServer).GetWalletHistories(ctx, req.(*GetWalletHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletService_GetCurrentRateBySymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletServiceServer).GetCurrentRateBySymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWalletService_GetCurrentRateBySymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletServiceServer).GetCurrentRateBySymbol(ctx, req.(*CurrentRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserWalletService_ServiceDesc is the grpc.ServiceDesc for UserWalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserWalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet.v1.UserWalletService",
	HandlerType: (*UserWalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWalletByUserId",
			Handler:    _UserWalletService_GetWalletByUserId_Handler,
		},
		{
			MethodName: "GetWalletHistories",
			Handler:    _UserWalletService_GetWalletHistories_Handler,
		},
		{
			MethodName: "GetCurrentRateBySymbol",
			Handler:    _UserWalletService_GetCurrentRateBySymbol_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet/v1/user_wallet_service.proto",
}
