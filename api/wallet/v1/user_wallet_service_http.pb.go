// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.24.3
// source: wallet/v1/user_wallet_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserWalletServiceGetWalletByUserId = "/wallet.v1.UserWalletService/GetWalletByUserId"
const OperationUserWalletServiceGetWalletHistories = "/wallet.v1.UserWalletService/GetWalletHistories"

type UserWalletServiceHTTPServer interface {
	GetWalletByUserId(context.Context, *emptypb.Empty) (*UserWalletResponse, error)
	GetWalletHistories(context.Context, *GetWalletHistoryRequest) (*GetWalletHistoryResponse, error)
}

func RegisterUserWalletServiceHTTPServer(s *http.Server, srv UserWalletServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/wallet/v1/balance", _UserWalletService_GetWalletByUserId0_HTTP_Handler(srv))
	r.GET("/api/wallet/v1/histories", _UserWalletService_GetWalletHistories0_HTTP_Handler(srv))
}

func _UserWalletService_GetWalletByUserId0_HTTP_Handler(srv UserWalletServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserWalletServiceGetWalletByUserId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWalletByUserId(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserWalletResponse)
		return ctx.Result(200, reply)
	}
}

func _UserWalletService_GetWalletHistories0_HTTP_Handler(srv UserWalletServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWalletHistoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserWalletServiceGetWalletHistories)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWalletHistories(ctx, req.(*GetWalletHistoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWalletHistoryResponse)
		return ctx.Result(200, reply)
	}
}

type UserWalletServiceHTTPClient interface {
	GetWalletByUserId(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *UserWalletResponse, err error)
	GetWalletHistories(ctx context.Context, req *GetWalletHistoryRequest, opts ...http.CallOption) (rsp *GetWalletHistoryResponse, err error)
}

type UserWalletServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewUserWalletServiceHTTPClient(client *http.Client) UserWalletServiceHTTPClient {
	return &UserWalletServiceHTTPClientImpl{client}
}

func (c *UserWalletServiceHTTPClientImpl) GetWalletByUserId(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*UserWalletResponse, error) {
	var out UserWalletResponse
	pattern := "/api/wallet/v1/balance"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserWalletServiceGetWalletByUserId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserWalletServiceHTTPClientImpl) GetWalletHistories(ctx context.Context, in *GetWalletHistoryRequest, opts ...http.CallOption) (*GetWalletHistoryResponse, error) {
	var out GetWalletHistoryResponse
	pattern := "/api/wallet/v1/histories"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserWalletServiceGetWalletHistories))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
