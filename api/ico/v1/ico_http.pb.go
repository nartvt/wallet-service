// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.24.3
// source: ico/v1/ico.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationICOServiceAddICOCoupon = "/ico.v1.ICOService/AddICOCoupon"
const OperationICOServiceGetBuyICOUserHistory = "/ico.v1.ICOService/GetBuyICOUserHistory"
const OperationICOServiceGetCoupon = "/ico.v1.ICOService/GetCoupon"
const OperationICOServiceGetCurrentRound = "/ico.v1.ICOService/GetCurrentRound"
const OperationICOServiceGetICOInfo = "/ico.v1.ICOService/GetICOInfo"

type ICOServiceHTTPServer interface {
	AddICOCoupon(context.Context, *AddICOCouponRequest) (*emptypb.Empty, error)
	GetBuyICOUserHistory(context.Context, *GetBuyICOUserHistoryRequest) (*GetBuyICOUserHistoryResponse, error)
	GetCoupon(context.Context, *GetCouponRequest) (*GetCouponResponse, error)
	GetCurrentRound(context.Context, *emptypb.Empty) (*GetCurrentRoundResponse, error)
	// GetICOInfo Sends a greeting
	GetICOInfo(context.Context, *emptypb.Empty) (*GetICOInfoResponse, error)
}

func RegisterICOServiceHTTPServer(s *http.Server, srv ICOServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/ico/v1/round", _ICOService_GetICOInfo0_HTTP_Handler(srv))
	r.GET("/api/ico/v1/histories", _ICOService_GetBuyICOUserHistory0_HTTP_Handler(srv))
	r.GET("/api/ico/v1/current", _ICOService_GetCurrentRound0_HTTP_Handler(srv))
	r.GET("/api/ico/v1/coupon/{coupon}", _ICOService_GetCoupon0_HTTP_Handler(srv))
	r.POST("/internal/ico/v1/coupon", _ICOService_AddICOCoupon0_HTTP_Handler(srv))
}

func _ICOService_GetICOInfo0_HTTP_Handler(srv ICOServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationICOServiceGetICOInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetICOInfo(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetICOInfoResponse)
		return ctx.Result(200, reply)
	}
}

func _ICOService_GetBuyICOUserHistory0_HTTP_Handler(srv ICOServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBuyICOUserHistoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationICOServiceGetBuyICOUserHistory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBuyICOUserHistory(ctx, req.(*GetBuyICOUserHistoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBuyICOUserHistoryResponse)
		return ctx.Result(200, reply)
	}
}

func _ICOService_GetCurrentRound0_HTTP_Handler(srv ICOServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationICOServiceGetCurrentRound)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCurrentRound(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCurrentRoundResponse)
		return ctx.Result(200, reply)
	}
}

func _ICOService_GetCoupon0_HTTP_Handler(srv ICOServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCouponRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationICOServiceGetCoupon)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCoupon(ctx, req.(*GetCouponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCouponResponse)
		return ctx.Result(200, reply)
	}
}

func _ICOService_AddICOCoupon0_HTTP_Handler(srv ICOServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddICOCouponRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationICOServiceAddICOCoupon)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddICOCoupon(ctx, req.(*AddICOCouponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type ICOServiceHTTPClient interface {
	AddICOCoupon(ctx context.Context, req *AddICOCouponRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetBuyICOUserHistory(ctx context.Context, req *GetBuyICOUserHistoryRequest, opts ...http.CallOption) (rsp *GetBuyICOUserHistoryResponse, err error)
	GetCoupon(ctx context.Context, req *GetCouponRequest, opts ...http.CallOption) (rsp *GetCouponResponse, err error)
	GetCurrentRound(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetCurrentRoundResponse, err error)
	GetICOInfo(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetICOInfoResponse, err error)
}

type ICOServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewICOServiceHTTPClient(client *http.Client) ICOServiceHTTPClient {
	return &ICOServiceHTTPClientImpl{client}
}

func (c *ICOServiceHTTPClientImpl) AddICOCoupon(ctx context.Context, in *AddICOCouponRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/internal/ico/v1/coupon"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationICOServiceAddICOCoupon))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ICOServiceHTTPClientImpl) GetBuyICOUserHistory(ctx context.Context, in *GetBuyICOUserHistoryRequest, opts ...http.CallOption) (*GetBuyICOUserHistoryResponse, error) {
	var out GetBuyICOUserHistoryResponse
	pattern := "/api/ico/v1/histories"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationICOServiceGetBuyICOUserHistory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ICOServiceHTTPClientImpl) GetCoupon(ctx context.Context, in *GetCouponRequest, opts ...http.CallOption) (*GetCouponResponse, error) {
	var out GetCouponResponse
	pattern := "/api/ico/v1/coupon/{coupon}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationICOServiceGetCoupon))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ICOServiceHTTPClientImpl) GetCurrentRound(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetCurrentRoundResponse, error) {
	var out GetCurrentRoundResponse
	pattern := "/api/ico/v1/current"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationICOServiceGetCurrentRound))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ICOServiceHTTPClientImpl) GetICOInfo(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetICOInfoResponse, error) {
	var out GetICOInfoResponse
	pattern := "/api/ico/v1/round"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationICOServiceGetICOInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
