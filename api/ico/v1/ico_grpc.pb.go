// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: ico/v1/ico.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ICOService_GetICOInfo_FullMethodName           = "/ico.v1.ICOService/GetICOInfo"
	ICOService_GetBuyICOUserHistory_FullMethodName = "/ico.v1.ICOService/GetBuyICOUserHistory"
	ICOService_GetCurrentRound_FullMethodName      = "/ico.v1.ICOService/GetCurrentRound"
	ICOService_GetCoupon_FullMethodName            = "/ico.v1.ICOService/GetCoupon"
	ICOService_AddICOCoupon_FullMethodName         = "/ico.v1.ICOService/AddICOCoupon"
)

// ICOServiceClient is the client API for ICOService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ICOServiceClient interface {
	// Sends a greeting
	GetICOInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetICOInfoResponse, error)
	GetBuyICOUserHistory(ctx context.Context, in *GetBuyICOUserHistoryRequest, opts ...grpc.CallOption) (*GetBuyICOUserHistoryResponse, error)
	GetCurrentRound(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCurrentRoundResponse, error)
	GetCoupon(ctx context.Context, in *GetCouponRequest, opts ...grpc.CallOption) (*GetCouponResponse, error)
	AddICOCoupon(ctx context.Context, in *AddICOCouponRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type iCOServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewICOServiceClient(cc grpc.ClientConnInterface) ICOServiceClient {
	return &iCOServiceClient{cc}
}

func (c *iCOServiceClient) GetICOInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetICOInfoResponse, error) {
	out := new(GetICOInfoResponse)
	err := c.cc.Invoke(ctx, ICOService_GetICOInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCOServiceClient) GetBuyICOUserHistory(ctx context.Context, in *GetBuyICOUserHistoryRequest, opts ...grpc.CallOption) (*GetBuyICOUserHistoryResponse, error) {
	out := new(GetBuyICOUserHistoryResponse)
	err := c.cc.Invoke(ctx, ICOService_GetBuyICOUserHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCOServiceClient) GetCurrentRound(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCurrentRoundResponse, error) {
	out := new(GetCurrentRoundResponse)
	err := c.cc.Invoke(ctx, ICOService_GetCurrentRound_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCOServiceClient) GetCoupon(ctx context.Context, in *GetCouponRequest, opts ...grpc.CallOption) (*GetCouponResponse, error) {
	out := new(GetCouponResponse)
	err := c.cc.Invoke(ctx, ICOService_GetCoupon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCOServiceClient) AddICOCoupon(ctx context.Context, in *AddICOCouponRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ICOService_AddICOCoupon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ICOServiceServer is the server API for ICOService service.
// All implementations must embed UnimplementedICOServiceServer
// for forward compatibility
type ICOServiceServer interface {
	// Sends a greeting
	GetICOInfo(context.Context, *emptypb.Empty) (*GetICOInfoResponse, error)
	GetBuyICOUserHistory(context.Context, *GetBuyICOUserHistoryRequest) (*GetBuyICOUserHistoryResponse, error)
	GetCurrentRound(context.Context, *emptypb.Empty) (*GetCurrentRoundResponse, error)
	GetCoupon(context.Context, *GetCouponRequest) (*GetCouponResponse, error)
	AddICOCoupon(context.Context, *AddICOCouponRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedICOServiceServer()
}

// UnimplementedICOServiceServer must be embedded to have forward compatible implementations.
type UnimplementedICOServiceServer struct {
}

func (UnimplementedICOServiceServer) GetICOInfo(context.Context, *emptypb.Empty) (*GetICOInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetICOInfo not implemented")
}
func (UnimplementedICOServiceServer) GetBuyICOUserHistory(context.Context, *GetBuyICOUserHistoryRequest) (*GetBuyICOUserHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuyICOUserHistory not implemented")
}
func (UnimplementedICOServiceServer) GetCurrentRound(context.Context, *emptypb.Empty) (*GetCurrentRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentRound not implemented")
}
func (UnimplementedICOServiceServer) GetCoupon(context.Context, *GetCouponRequest) (*GetCouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoupon not implemented")
}
func (UnimplementedICOServiceServer) AddICOCoupon(context.Context, *AddICOCouponRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddICOCoupon not implemented")
}
func (UnimplementedICOServiceServer) mustEmbedUnimplementedICOServiceServer() {}

// UnsafeICOServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ICOServiceServer will
// result in compilation errors.
type UnsafeICOServiceServer interface {
	mustEmbedUnimplementedICOServiceServer()
}

func RegisterICOServiceServer(s grpc.ServiceRegistrar, srv ICOServiceServer) {
	s.RegisterService(&ICOService_ServiceDesc, srv)
}

func _ICOService_GetICOInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICOServiceServer).GetICOInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ICOService_GetICOInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICOServiceServer).GetICOInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICOService_GetBuyICOUserHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuyICOUserHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICOServiceServer).GetBuyICOUserHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ICOService_GetBuyICOUserHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICOServiceServer).GetBuyICOUserHistory(ctx, req.(*GetBuyICOUserHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICOService_GetCurrentRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICOServiceServer).GetCurrentRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ICOService_GetCurrentRound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICOServiceServer).GetCurrentRound(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICOService_GetCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICOServiceServer).GetCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ICOService_GetCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICOServiceServer).GetCoupon(ctx, req.(*GetCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICOService_AddICOCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddICOCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICOServiceServer).AddICOCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ICOService_AddICOCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICOServiceServer).AddICOCoupon(ctx, req.(*AddICOCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ICOService_ServiceDesc is the grpc.ServiceDesc for ICOService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ICOService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ico.v1.ICOService",
	HandlerType: (*ICOServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetICOInfo",
			Handler:    _ICOService_GetICOInfo_Handler,
		},
		{
			MethodName: "GetBuyICOUserHistory",
			Handler:    _ICOService_GetBuyICOUserHistory_Handler,
		},
		{
			MethodName: "GetCurrentRound",
			Handler:    _ICOService_GetCurrentRound_Handler,
		},
		{
			MethodName: "GetCoupon",
			Handler:    _ICOService_GetCoupon_Handler,
		},
		{
			MethodName: "AddICOCoupon",
			Handler:    _ICOService_AddICOCoupon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ico/v1/ico.proto",
}
