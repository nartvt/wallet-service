// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/indikay/go-core/conf"
	"github.com/indikay/go-core/server"
	"github.com/indikay/wallet-service/internal/biz"
	"github.com/indikay/wallet-service/internal/client"
	conf2 "github.com/indikay/wallet-service/internal/conf"
	"github.com/indikay/wallet-service/internal/data"
	"github.com/indikay/wallet-service/internal/messaging"
	"github.com/indikay/wallet-service/internal/queue"
	"github.com/indikay/wallet-service/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf2.Data, logger log.Logger) (*kratos.App, func(), error) {
	httpServer := server.NewHTTPServer(confServer, logger)
	grpcServer := server.NewGRPCServer(confServer, logger)
	dataData, cleanup, err := data.NewData(confData)
	if err != nil {
		return nil, nil, err
	}
	transactionRepo := data.NewTransactionRepo(dataData)
	userWalletRepo := data.NewWalletRepo(dataData)
	icoRepo := data.NewIcoRepo(dataData)
	currencyRateRepo := data.NewCurrencyRepo(dataData)
	icoCouponRepo := data.NewIcoCouponRepo(dataData)
	icoUsecase := biz.NewICOUseCase(icoRepo, icoCouponRepo, currencyRateRepo)
	lockRepo := data.NewLockRepo(dataData)
	queueJob := queue.NewQueue(confData, icoRepo, userWalletRepo, transactionRepo, icoUsecase, lockRepo)
	transactionPublisher := messaging.NewPublisher(confData)
	walletTransactionUseCase := biz.NewWalletTransactionUseCase(transactionRepo, userWalletRepo, icoRepo, currencyRateRepo, icoCouponRepo, queueJob, transactionPublisher, icoUsecase, lockRepo)
	userWalletService := service.NewUserWalletService(walletTransactionUseCase)
	transactionService := service.NewTransactionService(walletTransactionUseCase)
	profileClient, err := client.NewProfileClient(confData)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	icoService := service.NewICOService(icoUsecase, profileClient)
	app := initService(logger, httpServer, grpcServer, userWalletService, transactionService, icoService, queueJob)
	return app, func() {
		cleanup()
	}, nil
}
